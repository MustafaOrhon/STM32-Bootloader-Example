
001_BOOTLOADER_First_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002878  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a0b2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001776  00000000  00000000  0002a152  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007a0  00000000  00000000  0002b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000708  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003f14  00000000  00000000  0002c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002a70  00000000  00000000  00030684  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000330f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002104  00000000  00000000  00033170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002a10 	.word	0x08002a10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002a10 	.word	0x08002a10

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 faa6 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f814 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8ea 	bl	8000794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f894 	bl	80006ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f8bc 	bl	8000740 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005c8:	f000 f87c 	bl	80006c4 <MX_CRC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printMsg("Hello from the Bootloader %d. Project\r\n",1);
 80005cc:	2101      	movs	r1, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x30>)
 80005d0:	f000 f940 	bl	8000854 <printMsg>
	HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fb06 	bl	8000be8 <HAL_Delay>
	printMsg("Hello from the Bootloader %d. Project\r\n",1);
 80005dc:	e7f6      	b.n	80005cc <main+0x1c>
 80005de:	bf00      	nop
 80005e0:	08002a28 	.word	0x08002a28

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fde8 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xd8>)
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <SystemClock_Config+0xd8>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xd8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xdc>)
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xdc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xdc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000658:	23b4      	movs	r3, #180	; 0xb4
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fdf3 	bl	8001254 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f000 f910 	bl	8000898 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000678:	f000 fd9c 	bl	80011b4 <HAL_PWREx_EnableOverDrive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000682:	f000 f909 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f84d 	bl	8001744 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b0:	f000 f8f2 	bl	8000898 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f000 fb8f 	bl	8000df2 <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 f8dd 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000dc 	.word	0x200000dc
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART1_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART1_UART_Init+0x4c>)
 8000724:	f001 fa00 	bl	8001b28 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f8b3 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000e4 	.word	0x200000e4
 800073c:	40011000 	.word	0x40011000

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART3_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000778:	f001 f9d6 	bl	8001b28 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f889 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_GPIO_Init+0xb8>)
 8000806:	f000 fcbb 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_GPIO_Init+0xbc>)
 800081e:	f000 fb05 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000822:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xb8>)
 800083c:	f000 faf6 	bl	8000e2c <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40021800 	.word	0x40021800
 8000850:	40020000 	.word	0x40020000

08000854 <printMsg>:

/* USER CODE BEGIN 4 */
void printMsg(char *msg,...)
{
 8000854:	b40f      	push	{r0, r1, r2, r3}
 8000856:	b580      	push	{r7, lr}
 8000858:	b09a      	sub	sp, #104	; 0x68
 800085a:	af00      	add	r7, sp, #0
   char comingMsg[100];

  va_list vaList;
  va_start(vaList,msg);
 800085c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000860:	603b      	str	r3, [r7, #0]
  vsprintf(comingMsg,msg,vaList);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fccd 	bl	8002208 <vsiprintf>
  HAL_UART_Transmit(DEBUG_UART,(uint8_t *)comingMsg,strlen(comingMsg),HAL_MAX_DELAY);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcbd 	bl	80001f0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	1d39      	adds	r1, r7, #4
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <printMsg+0x40>)
 8000882:	f001 f99e 	bl	8001bc2 <HAL_UART_Transmit>
  va_end(vaList);

}
 8000886:	bf00      	nop
 8000888:	3768      	adds	r7, #104	; 0x68
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000890:	b004      	add	sp, #16
 8000892:	4770      	bx	lr
 8000894:	20000098 	.word	0x20000098

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089e:	e7fe      	b.n	800089e <Error_Handler+0x6>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fa54 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_CRC_MspInit+0x3c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10d      	bne.n	800091e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_CRC_MspInit+0x40>)
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_CRC_MspInit+0x40>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_CRC_MspInit+0x40>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023000 	.word	0x40023000
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <HAL_UART_MspInit+0xec>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12d      	bne.n	80009b2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a0:	2307      	movs	r3, #7
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <HAL_UART_MspInit+0xf4>)
 80009ac:	f000 fa3e 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b0:	e031      	b.n	8000a16 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <HAL_UART_MspInit+0xf8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d12c      	bne.n	8000a16 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a06:	2307      	movs	r3, #7
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <HAL_UART_MspInit+0xfc>)
 8000a12:	f000 fa0b 	bl	8000e2c <HAL_GPIO_Init>
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40011000 	.word	0x40011000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40020800 	.word	0x40020800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f892 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x50>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x16>
		heap_end = &end;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <_sbrk+0x50>)
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <_sbrk+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <_sbrk+0x50>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <_sbrk+0x50>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	466a      	mov	r2, sp
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d907      	bls.n	8000ac2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000ab2:	f001 fb5f 	bl	8002174 <__errno>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <_sbrk+0x50>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <_sbrk+0x50>)
 8000acc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000008c 	.word	0x2000008c
 8000adc:	20000130 	.word	0x20000130

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f92d 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff feb2 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f937 	bl	8000dda <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f90d 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000128 	.word	0x20000128

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000128 	.word	0x20000128

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_Delay+0x40>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad2      	subs	r2, r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3f7      	bcc.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	490d      	ldr	r1, [pc, #52]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	401a      	ands	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	1e59      	subs	r1, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff90 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff49 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff5e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffb0 	bl	8000d48 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00e      	b.n	8000e22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	795b      	ldrb	r3, [r3, #5]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fd6b 	bl	80008f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e177      	b.n	8001138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8166 	bne.w	8001132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80c0 	beq.w	8001132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4a65      	ldr	r2, [pc, #404]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fb8:	4b64      	ldr	r3, [pc, #400]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_GPIO_Init+0x320>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a60      	ldr	r2, [pc, #384]	; (8001150 <HAL_GPIO_Init+0x324>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a57      	ldr	r2, [pc, #348]	; (8001154 <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <HAL_GPIO_Init+0x23e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a56      	ldr	r2, [pc, #344]	; (8001158 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d031      	beq.n	8001066 <HAL_GPIO_Init+0x23a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a55      	ldr	r2, [pc, #340]	; (800115c <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x236>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a54      	ldr	r2, [pc, #336]	; (8001160 <HAL_GPIO_Init+0x334>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x232>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a53      	ldr	r2, [pc, #332]	; (8001164 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x22e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x22a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a51      	ldr	r2, [pc, #324]	; (800116c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x226>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a50      	ldr	r2, [pc, #320]	; (8001170 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x222>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x21e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x21a>
 8001042:	2309      	movs	r3, #9
 8001044:	e012      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001046:	230a      	movs	r3, #10
 8001048:	e010      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104a:	2308      	movs	r3, #8
 800104c:	e00e      	b.n	800106c <HAL_GPIO_Init+0x240>
 800104e:	2307      	movs	r3, #7
 8001050:	e00c      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001052:	2306      	movs	r3, #6
 8001054:	e00a      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001056:	2305      	movs	r3, #5
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105a:	2304      	movs	r3, #4
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x240>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x240>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x240>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107c:	4934      	ldr	r1, [pc, #208]	; (8001150 <HAL_GPIO_Init+0x324>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_GPIO_Init+0x350>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <HAL_GPIO_Init+0x350>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <HAL_GPIO_Init+0x350>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a28      	ldr	r2, [pc, #160]	; (800117c <HAL_GPIO_Init+0x350>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_GPIO_Init+0x350>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_GPIO_Init+0x350>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_GPIO_Init+0x350>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_GPIO_Init+0x350>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f ae84 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	; 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40021c00 	.word	0x40021c00
 8001174:	40022000 	.word	0x40022000
 8001178:	40022400 	.word	0x40022400
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_PWREx_EnableOverDrive+0x94>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e0:	f7ff fcf6 	bl	8000bd0 <HAL_GetTick>
 80011e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e6:	e009      	b.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011e8:	f7ff fcf2 	bl	8000bd0 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f6:	d901      	bls.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e01f      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d1ee      	bne.n	80011e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fcde 	bl	8000bd0 <HAL_GetTick>
 8001214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001216:	e009      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001218:	f7ff fcda 	bl	8000bd0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001226:	d901      	bls.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e007      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001238:	d1ee      	bne.n	8001218 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	420e0040 	.word	0x420e0040
 800124c:	40007000 	.word	0x40007000
 8001250:	420e0044 	.word	0x420e0044

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e264      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4ba3      	ldr	r3, [pc, #652]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4ba0      	ldr	r3, [pc, #640]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b9d      	ldr	r3, [pc, #628]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b99      	ldr	r3, [pc, #612]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e23f      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4a91      	ldr	r2, [pc, #580]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4a8b      	ldr	r2, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	4b8a      	ldr	r3, [pc, #552]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4a88      	ldr	r2, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	4b87      	ldr	r3, [pc, #540]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4a84      	ldr	r2, [pc, #528]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	4b84      	ldr	r3, [pc, #528]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4a81      	ldr	r2, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc60 	bl	8000bd0 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fc5c 	bl	8000bd0 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e204      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc4c 	bl	8000bd0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fc48 	bl	8000bd0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f0      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b62      	ldr	r3, [pc, #392]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c4      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4956      	ldr	r1, [pc, #344]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <HAL_RCC_OscConfig+0x2b0>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc01 	bl	8000bd0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fbfd 	bl	8000bd0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a5      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4943      	ldr	r1, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_RCC_OscConfig+0x2b0>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fbe0 	bl	8000bd0 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fbdc 	bl	8000bd0 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e184      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d030      	beq.n	80014a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x2b4>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fbc0 	bl	8000bd0 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fbbc 	bl	8000bd0 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e164      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e015      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x2b4>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fba9 	bl	8000bd0 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fba5 	bl	8000bd0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e14d      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a0 	beq.w	80015ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10f      	bne.n	80014de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d121      	bne.n	800152e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_RCC_OscConfig+0x2b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb6b 	bl	8000bd0 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	e011      	b.n	8001522 <HAL_RCC_OscConfig+0x2ce>
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	42470000 	.word	0x42470000
 8001508:	42470e80 	.word	0x42470e80
 800150c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001510:	f7ff fb5e 	bl	8000bd0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e106      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x4e4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x2f0>
 8001536:	4a81      	ldr	r2, [pc, #516]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001538:	4b80      	ldr	r3, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e01c      	b.n	800157e <HAL_RCC_OscConfig+0x32a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x312>
 800154c:	4a7b      	ldr	r2, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800154e:	4b7b      	ldr	r3, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x32a>
 8001566:	4a75      	ldr	r2, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001568:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	4a72      	ldr	r2, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001574:	4b71      	ldr	r3, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d015      	beq.n	80015b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb23 	bl	8000bd0 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb1f 	bl	8000bd0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0c5      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ee      	beq.n	800158e <HAL_RCC_OscConfig+0x33a>
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb0d 	bl	8000bd0 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fb09 	bl	8000bd0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0af      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	4b55      	ldr	r3, [pc, #340]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 809b 	beq.w	800172e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d05c      	beq.n	80016be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d141      	bne.n	8001690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fadd 	bl	8000bd0 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fad9 	bl	8000bd0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e081      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001638:	4940      	ldr	r1, [pc, #256]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fab2 	bl	8000bd0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff faae 	bl	8000bd0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e056      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x41c>
 800168e:	e04e      	b.n	800172e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fa9b 	bl	8000bd0 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fa97 	bl	8000bd0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e03f      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x44a>
 80016bc:	e037      	b.n	800172e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e032      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d028      	beq.n	800172a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d121      	bne.n	800172a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d11a      	bne.n	800172a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001702:	4293      	cmp	r3, r2
 8001704:	d111      	bne.n	800172a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	3b01      	subs	r3, #1
 8001714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d107      	bne.n	800172a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40007000 	.word	0x40007000
 800173c:	40023800 	.word	0x40023800
 8001740:	42470060 	.word	0x42470060

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 020f 	and.w	r2, r3, #15
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d20c      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 020f 	and.w	r2, r3, #15
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4a59      	ldr	r2, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4a53      	ldr	r2, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4950      	ldr	r1, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 0203 	bic.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff f9cc 	bl	8000bd0 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff f9c8 	bl	8000bd0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d90c      	bls.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4919      	ldr	r1, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4912      	ldr	r1, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4601      	mov	r1, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	fa21 f303 	lsr.w	r3, r1, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f92c 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08002a50 	.word	0x08002a50
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	b08f      	sub	sp, #60	; 0x3c
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d007      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 8001934:	2b08      	cmp	r3, #8
 8001936:	d008      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 80b2 	bne.w	8001aa2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001942:	e0b1      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001948:	e0ae      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d04e      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001960:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	ea01 0103 	and.w	r1, r1, r3
 8001976:	ea02 0204 	and.w	r2, r2, r4
 800197a:	460b      	mov	r3, r1
 800197c:	4614      	mov	r4, r2
 800197e:	0160      	lsls	r0, r4, #5
 8001980:	6278      	str	r0, [r7, #36]	; 0x24
 8001982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001984:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001988:	6278      	str	r0, [r7, #36]	; 0x24
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001992:	1a5b      	subs	r3, r3, r1
 8001994:	eb64 0402 	sbc.w	r4, r4, r2
 8001998:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800199c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80019a0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80019a4:	ebb8 0803 	subs.w	r8, r8, r3
 80019a8:	eb69 0904 	sbc.w	r9, r9, r4
 80019ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019c4:	eb18 0801 	adds.w	r8, r8, r1
 80019c8:	eb49 0902 	adc.w	r9, r9, r2
 80019cc:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019e4:	4640      	mov	r0, r8
 80019e6:	4649      	mov	r1, r9
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	461a      	mov	r2, r3
 80019f0:	4623      	mov	r3, r4
 80019f2:	f7fe fc55 	bl	80002a0 <__aeabi_uldivmod>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
 80019fc:	e043      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	f04f 0400 	mov.w	r4, #0
 8001a08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	ea01 0103 	and.w	r1, r1, r3
 8001a14:	ea02 0204 	and.w	r2, r2, r4
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	0160      	lsls	r0, r4, #5
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a30:	1a5b      	subs	r3, r3, r1
 8001a32:	eb64 0402 	sbc.w	r4, r4, r2
 8001a36:	01a6      	lsls	r6, r4, #6
 8001a38:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001a3c:	019d      	lsls	r5, r3, #6
 8001a3e:	1aed      	subs	r5, r5, r3
 8001a40:	eb66 0604 	sbc.w	r6, r6, r4
 8001a44:	00f3      	lsls	r3, r6, #3
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	00eb      	lsls	r3, r5, #3
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001a58:	186d      	adds	r5, r5, r1
 8001a5a:	eb46 0602 	adc.w	r6, r6, r2
 8001a5e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001a62:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001a66:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001a6a:	4655      	mov	r5, sl
 8001a6c:	465e      	mov	r6, fp
 8001a6e:	4628      	mov	r0, r5
 8001a70:	4631      	mov	r1, r6
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	f04f 0400 	mov.w	r4, #0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	f7fe fc10 	bl	80002a0 <__aeabi_uldivmod>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	373c      	adds	r7, #60	; 0x3c
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08002a60 	.word	0x08002a60

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	4601      	mov	r1, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0b5b      	lsrs	r3, r3, #13
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08002a60 	.word	0x08002a60

08001b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e03f      	b.n	8001bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fef0 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2224      	movs	r2, #36	; 0x24
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	68d2      	ldr	r2, [r2, #12]
 8001b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f927 	bl	8001dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	6912      	ldr	r2, [r2, #16]
 8001b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	6952      	ldr	r2, [r2, #20]
 8001b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	68d2      	ldr	r2, [r2, #12]
 8001b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b08a      	sub	sp, #40	; 0x28
 8001bc6:	af02      	add	r7, sp, #8
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d17b      	bne.n	8001cda <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_UART_Transmit+0x2c>
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e074      	b.n	8001cdc <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_UART_Transmit+0x3e>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e06d      	b.n	8001cdc <HAL_UART_Transmit+0x11a>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2221      	movs	r2, #33	; 0x21
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c16:	f7fe ffdb 	bl	8000bd0 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c30:	d108      	bne.n	8001c44 <HAL_UART_Transmit+0x82>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	e003      	b.n	8001c4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c54:	e029      	b.n	8001caa <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f83f 	bl	8001ce4 <UART_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e035      	b.n	8001cdc <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	3302      	adds	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e007      	b.n	8001c9c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1d0      	bne.n	8001c56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f810 	bl	8001ce4 <UART_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e006      	b.n	8001cdc <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf4:	e050      	b.n	8001d98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d04c      	beq.n	8001d98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d04:	f7fe ff64 	bl	8000bd0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	1ad2      	subs	r2, r2, r3
 8001d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d941      	bls.n	8001d98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	330c      	adds	r3, #12
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	e853 3f00 	ldrex	r3, [r3]
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	330c      	adds	r3, #12
 8001d32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d34:	637a      	str	r2, [r7, #52]	; 0x34
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3c:	e841 2300 	strex	r3, r2, [r1]
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e5      	bne.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3314      	adds	r3, #20
 8001d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	e853 3f00 	ldrex	r3, [r3]
 8001d56:	613b      	str	r3, [r7, #16]
   return(result);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3314      	adds	r3, #20
 8001d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d68:	623a      	str	r2, [r7, #32]
 8001d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6c:	69f9      	ldr	r1, [r7, #28]
 8001d6e:	6a3a      	ldr	r2, [r7, #32]
 8001d70:	e841 2300 	strex	r3, r2, [r1]
 8001d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e5      	bne.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e00f      	b.n	8001db8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	401a      	ands	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d09f      	beq.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3740      	adds	r7, #64	; 0x40
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc4:	b091      	sub	sp, #68	; 0x44
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8001df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8001e06:	f022 020c 	bic.w	r2, r2, #12
 8001e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4bba      	ldr	r3, [pc, #744]	; (8002114 <UART_SetConfig+0x354>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d004      	beq.n	8001e3a <UART_SetConfig+0x7a>
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4bb8      	ldr	r3, [pc, #736]	; (8002118 <UART_SetConfig+0x358>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d103      	bne.n	8001e42 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e3a:	f7ff fe61 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8001e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001e40:	e002      	b.n	8001e48 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e42:	f7ff fe49 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8001e46:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e50:	f040 80a7 	bne.w	8001fa2 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	18db      	adds	r3, r3, r3
 8001e68:	eb44 0404 	adc.w	r4, r4, r4
 8001e6c:	185b      	adds	r3, r3, r1
 8001e6e:	eb44 0402 	adc.w	r4, r4, r2
 8001e72:	00e0      	lsls	r0, r4, #3
 8001e74:	6178      	str	r0, [r7, #20]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e7c:	6178      	str	r0, [r7, #20]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e86:	185d      	adds	r5, r3, r1
 8001e88:	eb44 0602 	adc.w	r6, r4, r2
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	4631      	mov	r1, r6
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	18db      	adds	r3, r3, r3
 8001e9a:	eb44 0404 	adc.w	r4, r4, r4
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4623      	mov	r3, r4
 8001ea2:	f7fe f9fd 	bl	80002a0 <__aeabi_uldivmod>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b9b      	ldr	r3, [pc, #620]	; (800211c <UART_SetConfig+0x35c>)
 8001eae:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	011e      	lsls	r6, r3, #4
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	eb44 0404 	adc.w	r4, r4, r4
 8001ec8:	185b      	adds	r3, r3, r1
 8001eca:	eb44 0402 	adc.w	r4, r4, r2
 8001ece:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8001ed2:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001ed6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001eda:	4653      	mov	r3, sl
 8001edc:	465c      	mov	r4, fp
 8001ede:	eb13 0a01 	adds.w	sl, r3, r1
 8001ee2:	eb44 0b02 	adc.w	fp, r4, r2
 8001ee6:	4650      	mov	r0, sl
 8001ee8:	4659      	mov	r1, fp
 8001eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	18db      	adds	r3, r3, r3
 8001ef4:	eb44 0404 	adc.w	r4, r4, r4
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4623      	mov	r3, r4
 8001efc:	f7fe f9d0 	bl	80002a0 <__aeabi_uldivmod>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b85      	ldr	r3, [pc, #532]	; (800211c <UART_SetConfig+0x35c>)
 8001f08:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	2164      	movs	r1, #100	; 0x64
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	3332      	adds	r3, #50	; 0x32
 8001f1a:	4a80      	ldr	r2, [pc, #512]	; (800211c <UART_SetConfig+0x35c>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f28:	441e      	add	r6, r3
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	18db      	adds	r3, r3, r3
 8001f38:	eb44 0404 	adc.w	r4, r4, r4
 8001f3c:	185b      	adds	r3, r3, r1
 8001f3e:	eb44 0402 	adc.w	r4, r4, r2
 8001f42:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001f46:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001f4a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001f4e:	4643      	mov	r3, r8
 8001f50:	464c      	mov	r4, r9
 8001f52:	eb13 0801 	adds.w	r8, r3, r1
 8001f56:	eb44 0902 	adc.w	r9, r4, r2
 8001f5a:	4640      	mov	r0, r8
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f04f 0400 	mov.w	r4, #0
 8001f66:	18db      	adds	r3, r3, r3
 8001f68:	eb44 0404 	adc.w	r4, r4, r4
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	f7fe f996 	bl	80002a0 <__aeabi_uldivmod>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b68      	ldr	r3, [pc, #416]	; (800211c <UART_SetConfig+0x35c>)
 8001f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	2164      	movs	r1, #100	; 0x64
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	3332      	adds	r3, #50	; 0x32
 8001f8e:	4a63      	ldr	r2, [pc, #396]	; (800211c <UART_SetConfig+0x35c>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	4433      	add	r3, r6
 8001f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f9e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fa0:	e0b3      	b.n	800210a <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	18db      	adds	r3, r3, r3
 8001fb6:	eb44 0404 	adc.w	r4, r4, r4
 8001fba:	185b      	adds	r3, r3, r1
 8001fbc:	eb44 0402 	adc.w	r4, r4, r2
 8001fc0:	00e6      	lsls	r6, r4, #3
 8001fc2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8001fc6:	00dd      	lsls	r5, r3, #3
 8001fc8:	462b      	mov	r3, r5
 8001fca:	4634      	mov	r4, r6
 8001fcc:	185d      	adds	r5, r3, r1
 8001fce:	eb44 0602 	adc.w	r6, r4, r2
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	4631      	mov	r1, r6
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	00a5      	lsls	r5, r4, #2
 8001fe0:	62fd      	str	r5, [r7, #44]	; 0x2c
 8001fe2:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8001fe4:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8001fe8:	62fd      	str	r5, [r7, #44]	; 0x2c
 8001fea:	009c      	lsls	r4, r3, #2
 8001fec:	62bc      	str	r4, [r7, #40]	; 0x28
 8001fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff2:	f7fe f955 	bl	80002a0 <__aeabi_uldivmod>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <UART_SetConfig+0x35c>)
 8001ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	011d      	lsls	r5, r3, #4
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002008:	4619      	mov	r1, r3
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	460b      	mov	r3, r1
 8002010:	4614      	mov	r4, r2
 8002012:	18db      	adds	r3, r3, r3
 8002014:	eb44 0404 	adc.w	r4, r4, r4
 8002018:	185b      	adds	r3, r3, r1
 800201a:	eb44 0402 	adc.w	r4, r4, r2
 800201e:	00e0      	lsls	r0, r4, #3
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	00d8      	lsls	r0, r3, #3
 800202c:	60b8      	str	r0, [r7, #8]
 800202e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002032:	eb13 0801 	adds.w	r8, r3, r1
 8002036:	eb44 0902 	adc.w	r9, r4, r2
 800203a:	4640      	mov	r0, r8
 800203c:	4649      	mov	r1, r9
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f04f 0400 	mov.w	r4, #0
 8002046:	00a6      	lsls	r6, r4, #2
 8002048:	627e      	str	r6, [r7, #36]	; 0x24
 800204a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800204c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002050:	627e      	str	r6, [r7, #36]	; 0x24
 8002052:	009c      	lsls	r4, r3, #2
 8002054:	623c      	str	r4, [r7, #32]
 8002056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800205a:	f7fe f921 	bl	80002a0 <__aeabi_uldivmod>
 800205e:	4603      	mov	r3, r0
 8002060:	460c      	mov	r4, r1
 8002062:	461a      	mov	r2, r3
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <UART_SetConfig+0x35c>)
 8002066:	fba3 1302 	umull	r1, r3, r3, r2
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2164      	movs	r1, #100	; 0x64
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <UART_SetConfig+0x35c>)
 800207a:	fba2 1303 	umull	r1, r3, r2, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	441d      	add	r5, r3
 8002086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	460b      	mov	r3, r1
 8002090:	4614      	mov	r4, r2
 8002092:	18db      	adds	r3, r3, r3
 8002094:	eb44 0404 	adc.w	r4, r4, r4
 8002098:	185b      	adds	r3, r3, r1
 800209a:	eb44 0402 	adc.w	r4, r4, r2
 800209e:	00e0      	lsls	r0, r4, #3
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	00d8      	lsls	r0, r3, #3
 80020ac:	6038      	str	r0, [r7, #0]
 80020ae:	e897 0018 	ldmia.w	r7, {r3, r4}
 80020b2:	eb13 0801 	adds.w	r8, r3, r1
 80020b6:	eb44 0902 	adc.w	r9, r4, r2
 80020ba:	4640      	mov	r0, r8
 80020bc:	4649      	mov	r1, r9
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	00a6      	lsls	r6, r4, #2
 80020c8:	61fe      	str	r6, [r7, #28]
 80020ca:	69fe      	ldr	r6, [r7, #28]
 80020cc:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80020d0:	61fe      	str	r6, [r7, #28]
 80020d2:	009c      	lsls	r4, r3, #2
 80020d4:	61bc      	str	r4, [r7, #24]
 80020d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020da:	f7fe f8e1 	bl	80002a0 <__aeabi_uldivmod>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <UART_SetConfig+0x35c>)
 80020e6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2164      	movs	r1, #100	; 0x64
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	3332      	adds	r3, #50	; 0x32
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <UART_SetConfig+0x35c>)
 80020fa:	fba2 1303 	umull	r1, r3, r2, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	442b      	add	r3, r5
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	6093      	str	r3, [r2, #8]
}
 800210a:	bf00      	nop
 800210c:	3744      	adds	r7, #68	; 0x44
 800210e:	46bd      	mov	sp, r7
 8002110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002114:	40011000 	.word	0x40011000
 8002118:	40011400 	.word	0x40011400
 800211c:	51eb851f 	.word	0x51eb851f

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002126:	490e      	ldr	r1, [pc, #56]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <LoopFillZerobss+0x26>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800214a:	f7fe fcc9 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f000 f817 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7fe fa2d 	bl	80005b0 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002158:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002164:	08002aac 	.word	0x08002aac
  ldr r2, =_sbss
 8002168:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800216c:	20000130 	.word	0x20000130

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <__errno>:
 8002174:	4b01      	ldr	r3, [pc, #4]	; (800217c <__errno+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4e0d      	ldr	r6, [pc, #52]	; (80021b8 <__libc_init_array+0x38>)
 8002184:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002186:	1ba4      	subs	r4, r4, r6
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	2500      	movs	r5, #0
 800218c:	42a5      	cmp	r5, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	4e0b      	ldr	r6, [pc, #44]	; (80021c0 <__libc_init_array+0x40>)
 8002192:	4c0c      	ldr	r4, [pc, #48]	; (80021c4 <__libc_init_array+0x44>)
 8002194:	f000 fc3c 	bl	8002a10 <_init>
 8002198:	1ba4      	subs	r4, r4, r6
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	2500      	movs	r5, #0
 800219e:	42a5      	cmp	r5, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a8:	4798      	blx	r3
 80021aa:	3501      	adds	r5, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b2:	4798      	blx	r3
 80021b4:	3501      	adds	r5, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002aa4 	.word	0x08002aa4
 80021bc:	08002aa4 	.word	0x08002aa4
 80021c0:	08002aa4 	.word	0x08002aa4
 80021c4:	08002aa8 	.word	0x08002aa8

080021c8 <memset>:
 80021c8:	4402      	add	r2, r0
 80021ca:	4603      	mov	r3, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <_vsiprintf_r>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	b09a      	sub	sp, #104	; 0x68
 80021dc:	f44f 7402 	mov.w	r4, #520	; 0x208
 80021e0:	9100      	str	r1, [sp, #0]
 80021e2:	9104      	str	r1, [sp, #16]
 80021e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021e8:	9102      	str	r1, [sp, #8]
 80021ea:	9105      	str	r1, [sp, #20]
 80021ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021f0:	f8ad 100e 	strh.w	r1, [sp, #14]
 80021f4:	4669      	mov	r1, sp
 80021f6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80021fa:	f000 f86b 	bl	80022d4 <_svfiprintf_r>
 80021fe:	9b00      	ldr	r3, [sp, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	b01a      	add	sp, #104	; 0x68
 8002206:	bd10      	pop	{r4, pc}

08002208 <vsiprintf>:
 8002208:	4613      	mov	r3, r2
 800220a:	460a      	mov	r2, r1
 800220c:	4601      	mov	r1, r0
 800220e:	4802      	ldr	r0, [pc, #8]	; (8002218 <vsiprintf+0x10>)
 8002210:	6800      	ldr	r0, [r0, #0]
 8002212:	f7ff bfe1 	b.w	80021d8 <_vsiprintf_r>
 8002216:	bf00      	nop
 8002218:	2000000c 	.word	0x2000000c

0800221c <__ssputs_r>:
 800221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002220:	688e      	ldr	r6, [r1, #8]
 8002222:	429e      	cmp	r6, r3
 8002224:	4682      	mov	sl, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4691      	mov	r9, r2
 800222a:	4698      	mov	r8, r3
 800222c:	d835      	bhi.n	800229a <__ssputs_r+0x7e>
 800222e:	898a      	ldrh	r2, [r1, #12]
 8002230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002234:	d031      	beq.n	800229a <__ssputs_r+0x7e>
 8002236:	6825      	ldr	r5, [r4, #0]
 8002238:	6909      	ldr	r1, [r1, #16]
 800223a:	1a6f      	subs	r7, r5, r1
 800223c:	6965      	ldr	r5, [r4, #20]
 800223e:	2302      	movs	r3, #2
 8002240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002244:	fb95 f5f3 	sdiv	r5, r5, r3
 8002248:	f108 0301 	add.w	r3, r8, #1
 800224c:	443b      	add	r3, r7
 800224e:	429d      	cmp	r5, r3
 8002250:	bf38      	it	cc
 8002252:	461d      	movcc	r5, r3
 8002254:	0553      	lsls	r3, r2, #21
 8002256:	d531      	bpl.n	80022bc <__ssputs_r+0xa0>
 8002258:	4629      	mov	r1, r5
 800225a:	f000 fb39 	bl	80028d0 <_malloc_r>
 800225e:	4606      	mov	r6, r0
 8002260:	b950      	cbnz	r0, 8002278 <__ssputs_r+0x5c>
 8002262:	230c      	movs	r3, #12
 8002264:	f8ca 3000 	str.w	r3, [sl]
 8002268:	89a3      	ldrh	r3, [r4, #12]
 800226a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226e:	81a3      	strh	r3, [r4, #12]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002278:	463a      	mov	r2, r7
 800227a:	6921      	ldr	r1, [r4, #16]
 800227c:	f000 fab4 	bl	80027e8 <memcpy>
 8002280:	89a3      	ldrh	r3, [r4, #12]
 8002282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228a:	81a3      	strh	r3, [r4, #12]
 800228c:	6126      	str	r6, [r4, #16]
 800228e:	6165      	str	r5, [r4, #20]
 8002290:	443e      	add	r6, r7
 8002292:	1bed      	subs	r5, r5, r7
 8002294:	6026      	str	r6, [r4, #0]
 8002296:	60a5      	str	r5, [r4, #8]
 8002298:	4646      	mov	r6, r8
 800229a:	4546      	cmp	r6, r8
 800229c:	bf28      	it	cs
 800229e:	4646      	movcs	r6, r8
 80022a0:	4632      	mov	r2, r6
 80022a2:	4649      	mov	r1, r9
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f000 faaa 	bl	80027fe <memmove>
 80022aa:	68a3      	ldr	r3, [r4, #8]
 80022ac:	1b9b      	subs	r3, r3, r6
 80022ae:	60a3      	str	r3, [r4, #8]
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	441e      	add	r6, r3
 80022b4:	6026      	str	r6, [r4, #0]
 80022b6:	2000      	movs	r0, #0
 80022b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022bc:	462a      	mov	r2, r5
 80022be:	f000 fb65 	bl	800298c <_realloc_r>
 80022c2:	4606      	mov	r6, r0
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d1e1      	bne.n	800228c <__ssputs_r+0x70>
 80022c8:	6921      	ldr	r1, [r4, #16]
 80022ca:	4650      	mov	r0, sl
 80022cc:	f000 fab2 	bl	8002834 <_free_r>
 80022d0:	e7c7      	b.n	8002262 <__ssputs_r+0x46>
	...

080022d4 <_svfiprintf_r>:
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b09d      	sub	sp, #116	; 0x74
 80022da:	4680      	mov	r8, r0
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	898b      	ldrh	r3, [r1, #12]
 80022e0:	061c      	lsls	r4, r3, #24
 80022e2:	460d      	mov	r5, r1
 80022e4:	4616      	mov	r6, r2
 80022e6:	d50f      	bpl.n	8002308 <_svfiprintf_r+0x34>
 80022e8:	690b      	ldr	r3, [r1, #16]
 80022ea:	b96b      	cbnz	r3, 8002308 <_svfiprintf_r+0x34>
 80022ec:	2140      	movs	r1, #64	; 0x40
 80022ee:	f000 faef 	bl	80028d0 <_malloc_r>
 80022f2:	6028      	str	r0, [r5, #0]
 80022f4:	6128      	str	r0, [r5, #16]
 80022f6:	b928      	cbnz	r0, 8002304 <_svfiprintf_r+0x30>
 80022f8:	230c      	movs	r3, #12
 80022fa:	f8c8 3000 	str.w	r3, [r8]
 80022fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002302:	e0c5      	b.n	8002490 <_svfiprintf_r+0x1bc>
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	616b      	str	r3, [r5, #20]
 8002308:	2300      	movs	r3, #0
 800230a:	9309      	str	r3, [sp, #36]	; 0x24
 800230c:	2320      	movs	r3, #32
 800230e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002312:	2330      	movs	r3, #48	; 0x30
 8002314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002318:	f04f 0b01 	mov.w	fp, #1
 800231c:	4637      	mov	r7, r6
 800231e:	463c      	mov	r4, r7
 8002320:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d13c      	bne.n	80023a2 <_svfiprintf_r+0xce>
 8002328:	ebb7 0a06 	subs.w	sl, r7, r6
 800232c:	d00b      	beq.n	8002346 <_svfiprintf_r+0x72>
 800232e:	4653      	mov	r3, sl
 8002330:	4632      	mov	r2, r6
 8002332:	4629      	mov	r1, r5
 8002334:	4640      	mov	r0, r8
 8002336:	f7ff ff71 	bl	800221c <__ssputs_r>
 800233a:	3001      	adds	r0, #1
 800233c:	f000 80a3 	beq.w	8002486 <_svfiprintf_r+0x1b2>
 8002340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002342:	4453      	add	r3, sl
 8002344:	9309      	str	r3, [sp, #36]	; 0x24
 8002346:	783b      	ldrb	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 809c 	beq.w	8002486 <_svfiprintf_r+0x1b2>
 800234e:	2300      	movs	r3, #0
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	9304      	str	r3, [sp, #16]
 8002356:	9307      	str	r3, [sp, #28]
 8002358:	9205      	str	r2, [sp, #20]
 800235a:	9306      	str	r3, [sp, #24]
 800235c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002360:	931a      	str	r3, [sp, #104]	; 0x68
 8002362:	2205      	movs	r2, #5
 8002364:	7821      	ldrb	r1, [r4, #0]
 8002366:	4850      	ldr	r0, [pc, #320]	; (80024a8 <_svfiprintf_r+0x1d4>)
 8002368:	f7fd ff4a 	bl	8000200 <memchr>
 800236c:	1c67      	adds	r7, r4, #1
 800236e:	9b04      	ldr	r3, [sp, #16]
 8002370:	b9d8      	cbnz	r0, 80023aa <_svfiprintf_r+0xd6>
 8002372:	06d9      	lsls	r1, r3, #27
 8002374:	bf44      	itt	mi
 8002376:	2220      	movmi	r2, #32
 8002378:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800237c:	071a      	lsls	r2, r3, #28
 800237e:	bf44      	itt	mi
 8002380:	222b      	movmi	r2, #43	; 0x2b
 8002382:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002386:	7822      	ldrb	r2, [r4, #0]
 8002388:	2a2a      	cmp	r2, #42	; 0x2a
 800238a:	d016      	beq.n	80023ba <_svfiprintf_r+0xe6>
 800238c:	9a07      	ldr	r2, [sp, #28]
 800238e:	2100      	movs	r1, #0
 8002390:	200a      	movs	r0, #10
 8002392:	4627      	mov	r7, r4
 8002394:	3401      	adds	r4, #1
 8002396:	783b      	ldrb	r3, [r7, #0]
 8002398:	3b30      	subs	r3, #48	; 0x30
 800239a:	2b09      	cmp	r3, #9
 800239c:	d951      	bls.n	8002442 <_svfiprintf_r+0x16e>
 800239e:	b1c9      	cbz	r1, 80023d4 <_svfiprintf_r+0x100>
 80023a0:	e011      	b.n	80023c6 <_svfiprintf_r+0xf2>
 80023a2:	2b25      	cmp	r3, #37	; 0x25
 80023a4:	d0c0      	beq.n	8002328 <_svfiprintf_r+0x54>
 80023a6:	4627      	mov	r7, r4
 80023a8:	e7b9      	b.n	800231e <_svfiprintf_r+0x4a>
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <_svfiprintf_r+0x1d4>)
 80023ac:	1a80      	subs	r0, r0, r2
 80023ae:	fa0b f000 	lsl.w	r0, fp, r0
 80023b2:	4318      	orrs	r0, r3
 80023b4:	9004      	str	r0, [sp, #16]
 80023b6:	463c      	mov	r4, r7
 80023b8:	e7d3      	b.n	8002362 <_svfiprintf_r+0x8e>
 80023ba:	9a03      	ldr	r2, [sp, #12]
 80023bc:	1d11      	adds	r1, r2, #4
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	9103      	str	r1, [sp, #12]
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	db01      	blt.n	80023ca <_svfiprintf_r+0xf6>
 80023c6:	9207      	str	r2, [sp, #28]
 80023c8:	e004      	b.n	80023d4 <_svfiprintf_r+0x100>
 80023ca:	4252      	negs	r2, r2
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	9207      	str	r2, [sp, #28]
 80023d2:	9304      	str	r3, [sp, #16]
 80023d4:	783b      	ldrb	r3, [r7, #0]
 80023d6:	2b2e      	cmp	r3, #46	; 0x2e
 80023d8:	d10e      	bne.n	80023f8 <_svfiprintf_r+0x124>
 80023da:	787b      	ldrb	r3, [r7, #1]
 80023dc:	2b2a      	cmp	r3, #42	; 0x2a
 80023de:	f107 0101 	add.w	r1, r7, #1
 80023e2:	d132      	bne.n	800244a <_svfiprintf_r+0x176>
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	9203      	str	r2, [sp, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bfb8      	it	lt
 80023f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80023f4:	3702      	adds	r7, #2
 80023f6:	9305      	str	r3, [sp, #20]
 80023f8:	4c2c      	ldr	r4, [pc, #176]	; (80024ac <_svfiprintf_r+0x1d8>)
 80023fa:	7839      	ldrb	r1, [r7, #0]
 80023fc:	2203      	movs	r2, #3
 80023fe:	4620      	mov	r0, r4
 8002400:	f7fd fefe 	bl	8000200 <memchr>
 8002404:	b138      	cbz	r0, 8002416 <_svfiprintf_r+0x142>
 8002406:	2340      	movs	r3, #64	; 0x40
 8002408:	1b00      	subs	r0, r0, r4
 800240a:	fa03 f000 	lsl.w	r0, r3, r0
 800240e:	9b04      	ldr	r3, [sp, #16]
 8002410:	4303      	orrs	r3, r0
 8002412:	9304      	str	r3, [sp, #16]
 8002414:	3701      	adds	r7, #1
 8002416:	7839      	ldrb	r1, [r7, #0]
 8002418:	4825      	ldr	r0, [pc, #148]	; (80024b0 <_svfiprintf_r+0x1dc>)
 800241a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800241e:	2206      	movs	r2, #6
 8002420:	1c7e      	adds	r6, r7, #1
 8002422:	f7fd feed 	bl	8000200 <memchr>
 8002426:	2800      	cmp	r0, #0
 8002428:	d035      	beq.n	8002496 <_svfiprintf_r+0x1c2>
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <_svfiprintf_r+0x1e0>)
 800242c:	b9fb      	cbnz	r3, 800246e <_svfiprintf_r+0x19a>
 800242e:	9b03      	ldr	r3, [sp, #12]
 8002430:	3307      	adds	r3, #7
 8002432:	f023 0307 	bic.w	r3, r3, #7
 8002436:	3308      	adds	r3, #8
 8002438:	9303      	str	r3, [sp, #12]
 800243a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800243c:	444b      	add	r3, r9
 800243e:	9309      	str	r3, [sp, #36]	; 0x24
 8002440:	e76c      	b.n	800231c <_svfiprintf_r+0x48>
 8002442:	fb00 3202 	mla	r2, r0, r2, r3
 8002446:	2101      	movs	r1, #1
 8002448:	e7a3      	b.n	8002392 <_svfiprintf_r+0xbe>
 800244a:	2300      	movs	r3, #0
 800244c:	9305      	str	r3, [sp, #20]
 800244e:	4618      	mov	r0, r3
 8002450:	240a      	movs	r4, #10
 8002452:	460f      	mov	r7, r1
 8002454:	3101      	adds	r1, #1
 8002456:	783a      	ldrb	r2, [r7, #0]
 8002458:	3a30      	subs	r2, #48	; 0x30
 800245a:	2a09      	cmp	r2, #9
 800245c:	d903      	bls.n	8002466 <_svfiprintf_r+0x192>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ca      	beq.n	80023f8 <_svfiprintf_r+0x124>
 8002462:	9005      	str	r0, [sp, #20]
 8002464:	e7c8      	b.n	80023f8 <_svfiprintf_r+0x124>
 8002466:	fb04 2000 	mla	r0, r4, r0, r2
 800246a:	2301      	movs	r3, #1
 800246c:	e7f1      	b.n	8002452 <_svfiprintf_r+0x17e>
 800246e:	ab03      	add	r3, sp, #12
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	462a      	mov	r2, r5
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_svfiprintf_r+0x1e4>)
 8002476:	a904      	add	r1, sp, #16
 8002478:	4640      	mov	r0, r8
 800247a:	f3af 8000 	nop.w
 800247e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002482:	4681      	mov	r9, r0
 8002484:	d1d9      	bne.n	800243a <_svfiprintf_r+0x166>
 8002486:	89ab      	ldrh	r3, [r5, #12]
 8002488:	065b      	lsls	r3, r3, #25
 800248a:	f53f af38 	bmi.w	80022fe <_svfiprintf_r+0x2a>
 800248e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002490:	b01d      	add	sp, #116	; 0x74
 8002492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002496:	ab03      	add	r3, sp, #12
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	462a      	mov	r2, r5
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <_svfiprintf_r+0x1e4>)
 800249e:	a904      	add	r1, sp, #16
 80024a0:	4640      	mov	r0, r8
 80024a2:	f000 f881 	bl	80025a8 <_printf_i>
 80024a6:	e7ea      	b.n	800247e <_svfiprintf_r+0x1aa>
 80024a8:	08002a68 	.word	0x08002a68
 80024ac:	08002a6e 	.word	0x08002a6e
 80024b0:	08002a72 	.word	0x08002a72
 80024b4:	00000000 	.word	0x00000000
 80024b8:	0800221d 	.word	0x0800221d

080024bc <_printf_common>:
 80024bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c0:	4691      	mov	r9, r2
 80024c2:	461f      	mov	r7, r3
 80024c4:	688a      	ldr	r2, [r1, #8]
 80024c6:	690b      	ldr	r3, [r1, #16]
 80024c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfb8      	it	lt
 80024d0:	4613      	movlt	r3, r2
 80024d2:	f8c9 3000 	str.w	r3, [r9]
 80024d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024da:	4606      	mov	r6, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	b112      	cbz	r2, 80024e6 <_printf_common+0x2a>
 80024e0:	3301      	adds	r3, #1
 80024e2:	f8c9 3000 	str.w	r3, [r9]
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	0699      	lsls	r1, r3, #26
 80024ea:	bf42      	ittt	mi
 80024ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024f0:	3302      	addmi	r3, #2
 80024f2:	f8c9 3000 	strmi.w	r3, [r9]
 80024f6:	6825      	ldr	r5, [r4, #0]
 80024f8:	f015 0506 	ands.w	r5, r5, #6
 80024fc:	d107      	bne.n	800250e <_printf_common+0x52>
 80024fe:	f104 0a19 	add.w	sl, r4, #25
 8002502:	68e3      	ldr	r3, [r4, #12]
 8002504:	f8d9 2000 	ldr.w	r2, [r9]
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	429d      	cmp	r5, r3
 800250c:	db29      	blt.n	8002562 <_printf_common+0xa6>
 800250e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002512:	6822      	ldr	r2, [r4, #0]
 8002514:	3300      	adds	r3, #0
 8002516:	bf18      	it	ne
 8002518:	2301      	movne	r3, #1
 800251a:	0692      	lsls	r2, r2, #26
 800251c:	d42e      	bmi.n	800257c <_printf_common+0xc0>
 800251e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002522:	4639      	mov	r1, r7
 8002524:	4630      	mov	r0, r6
 8002526:	47c0      	blx	r8
 8002528:	3001      	adds	r0, #1
 800252a:	d021      	beq.n	8002570 <_printf_common+0xb4>
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	68e5      	ldr	r5, [r4, #12]
 8002530:	f8d9 2000 	ldr.w	r2, [r9]
 8002534:	f003 0306 	and.w	r3, r3, #6
 8002538:	2b04      	cmp	r3, #4
 800253a:	bf08      	it	eq
 800253c:	1aad      	subeq	r5, r5, r2
 800253e:	68a3      	ldr	r3, [r4, #8]
 8002540:	6922      	ldr	r2, [r4, #16]
 8002542:	bf0c      	ite	eq
 8002544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002548:	2500      	movne	r5, #0
 800254a:	4293      	cmp	r3, r2
 800254c:	bfc4      	itt	gt
 800254e:	1a9b      	subgt	r3, r3, r2
 8002550:	18ed      	addgt	r5, r5, r3
 8002552:	f04f 0900 	mov.w	r9, #0
 8002556:	341a      	adds	r4, #26
 8002558:	454d      	cmp	r5, r9
 800255a:	d11b      	bne.n	8002594 <_printf_common+0xd8>
 800255c:	2000      	movs	r0, #0
 800255e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002562:	2301      	movs	r3, #1
 8002564:	4652      	mov	r2, sl
 8002566:	4639      	mov	r1, r7
 8002568:	4630      	mov	r0, r6
 800256a:	47c0      	blx	r8
 800256c:	3001      	adds	r0, #1
 800256e:	d103      	bne.n	8002578 <_printf_common+0xbc>
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002578:	3501      	adds	r5, #1
 800257a:	e7c2      	b.n	8002502 <_printf_common+0x46>
 800257c:	18e1      	adds	r1, r4, r3
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	2030      	movs	r0, #48	; 0x30
 8002582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002586:	4422      	add	r2, r4
 8002588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800258c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002590:	3302      	adds	r3, #2
 8002592:	e7c4      	b.n	800251e <_printf_common+0x62>
 8002594:	2301      	movs	r3, #1
 8002596:	4622      	mov	r2, r4
 8002598:	4639      	mov	r1, r7
 800259a:	4630      	mov	r0, r6
 800259c:	47c0      	blx	r8
 800259e:	3001      	adds	r0, #1
 80025a0:	d0e6      	beq.n	8002570 <_printf_common+0xb4>
 80025a2:	f109 0901 	add.w	r9, r9, #1
 80025a6:	e7d7      	b.n	8002558 <_printf_common+0x9c>

080025a8 <_printf_i>:
 80025a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025ac:	4617      	mov	r7, r2
 80025ae:	7e0a      	ldrb	r2, [r1, #24]
 80025b0:	b085      	sub	sp, #20
 80025b2:	2a6e      	cmp	r2, #110	; 0x6e
 80025b4:	4698      	mov	r8, r3
 80025b6:	4606      	mov	r6, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025bc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80025c0:	f000 80bc 	beq.w	800273c <_printf_i+0x194>
 80025c4:	d81a      	bhi.n	80025fc <_printf_i+0x54>
 80025c6:	2a63      	cmp	r2, #99	; 0x63
 80025c8:	d02e      	beq.n	8002628 <_printf_i+0x80>
 80025ca:	d80a      	bhi.n	80025e2 <_printf_i+0x3a>
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	f000 80c8 	beq.w	8002762 <_printf_i+0x1ba>
 80025d2:	2a58      	cmp	r2, #88	; 0x58
 80025d4:	f000 808a 	beq.w	80026ec <_printf_i+0x144>
 80025d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80025e0:	e02a      	b.n	8002638 <_printf_i+0x90>
 80025e2:	2a64      	cmp	r2, #100	; 0x64
 80025e4:	d001      	beq.n	80025ea <_printf_i+0x42>
 80025e6:	2a69      	cmp	r2, #105	; 0x69
 80025e8:	d1f6      	bne.n	80025d8 <_printf_i+0x30>
 80025ea:	6821      	ldr	r1, [r4, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025f2:	d023      	beq.n	800263c <_printf_i+0x94>
 80025f4:	1d11      	adds	r1, r2, #4
 80025f6:	6019      	str	r1, [r3, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	e027      	b.n	800264c <_printf_i+0xa4>
 80025fc:	2a73      	cmp	r2, #115	; 0x73
 80025fe:	f000 80b4 	beq.w	800276a <_printf_i+0x1c2>
 8002602:	d808      	bhi.n	8002616 <_printf_i+0x6e>
 8002604:	2a6f      	cmp	r2, #111	; 0x6f
 8002606:	d02a      	beq.n	800265e <_printf_i+0xb6>
 8002608:	2a70      	cmp	r2, #112	; 0x70
 800260a:	d1e5      	bne.n	80025d8 <_printf_i+0x30>
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	600a      	str	r2, [r1, #0]
 8002614:	e003      	b.n	800261e <_printf_i+0x76>
 8002616:	2a75      	cmp	r2, #117	; 0x75
 8002618:	d021      	beq.n	800265e <_printf_i+0xb6>
 800261a:	2a78      	cmp	r2, #120	; 0x78
 800261c:	d1dc      	bne.n	80025d8 <_printf_i+0x30>
 800261e:	2278      	movs	r2, #120	; 0x78
 8002620:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002624:	496e      	ldr	r1, [pc, #440]	; (80027e0 <_printf_i+0x238>)
 8002626:	e064      	b.n	80026f2 <_printf_i+0x14a>
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800262e:	1d11      	adds	r1, r2, #4
 8002630:	6019      	str	r1, [r3, #0]
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002638:	2301      	movs	r3, #1
 800263a:	e0a3      	b.n	8002784 <_printf_i+0x1dc>
 800263c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002640:	f102 0104 	add.w	r1, r2, #4
 8002644:	6019      	str	r1, [r3, #0]
 8002646:	d0d7      	beq.n	80025f8 <_printf_i+0x50>
 8002648:	f9b2 3000 	ldrsh.w	r3, [r2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	da03      	bge.n	8002658 <_printf_i+0xb0>
 8002650:	222d      	movs	r2, #45	; 0x2d
 8002652:	425b      	negs	r3, r3
 8002654:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002658:	4962      	ldr	r1, [pc, #392]	; (80027e4 <_printf_i+0x23c>)
 800265a:	220a      	movs	r2, #10
 800265c:	e017      	b.n	800268e <_printf_i+0xe6>
 800265e:	6820      	ldr	r0, [r4, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002666:	d003      	beq.n	8002670 <_printf_i+0xc8>
 8002668:	1d08      	adds	r0, r1, #4
 800266a:	6018      	str	r0, [r3, #0]
 800266c:	680b      	ldr	r3, [r1, #0]
 800266e:	e006      	b.n	800267e <_printf_i+0xd6>
 8002670:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002674:	f101 0004 	add.w	r0, r1, #4
 8002678:	6018      	str	r0, [r3, #0]
 800267a:	d0f7      	beq.n	800266c <_printf_i+0xc4>
 800267c:	880b      	ldrh	r3, [r1, #0]
 800267e:	4959      	ldr	r1, [pc, #356]	; (80027e4 <_printf_i+0x23c>)
 8002680:	2a6f      	cmp	r2, #111	; 0x6f
 8002682:	bf14      	ite	ne
 8002684:	220a      	movne	r2, #10
 8002686:	2208      	moveq	r2, #8
 8002688:	2000      	movs	r0, #0
 800268a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800268e:	6865      	ldr	r5, [r4, #4]
 8002690:	60a5      	str	r5, [r4, #8]
 8002692:	2d00      	cmp	r5, #0
 8002694:	f2c0 809c 	blt.w	80027d0 <_printf_i+0x228>
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	f020 0004 	bic.w	r0, r0, #4
 800269e:	6020      	str	r0, [r4, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d13f      	bne.n	8002724 <_printf_i+0x17c>
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	f040 8095 	bne.w	80027d4 <_printf_i+0x22c>
 80026aa:	4675      	mov	r5, lr
 80026ac:	2a08      	cmp	r2, #8
 80026ae:	d10b      	bne.n	80026c8 <_printf_i+0x120>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	07da      	lsls	r2, r3, #31
 80026b4:	d508      	bpl.n	80026c8 <_printf_i+0x120>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	bfde      	ittt	le
 80026be:	2330      	movle	r3, #48	; 0x30
 80026c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026c8:	ebae 0305 	sub.w	r3, lr, r5
 80026cc:	6123      	str	r3, [r4, #16]
 80026ce:	f8cd 8000 	str.w	r8, [sp]
 80026d2:	463b      	mov	r3, r7
 80026d4:	aa03      	add	r2, sp, #12
 80026d6:	4621      	mov	r1, r4
 80026d8:	4630      	mov	r0, r6
 80026da:	f7ff feef 	bl	80024bc <_printf_common>
 80026de:	3001      	adds	r0, #1
 80026e0:	d155      	bne.n	800278e <_printf_i+0x1e6>
 80026e2:	f04f 30ff 	mov.w	r0, #4294967295
 80026e6:	b005      	add	sp, #20
 80026e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026ec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80026f0:	493c      	ldr	r1, [pc, #240]	; (80027e4 <_printf_i+0x23c>)
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026fa:	f100 0504 	add.w	r5, r0, #4
 80026fe:	601d      	str	r5, [r3, #0]
 8002700:	d001      	beq.n	8002706 <_printf_i+0x15e>
 8002702:	6803      	ldr	r3, [r0, #0]
 8002704:	e002      	b.n	800270c <_printf_i+0x164>
 8002706:	0655      	lsls	r5, r2, #25
 8002708:	d5fb      	bpl.n	8002702 <_printf_i+0x15a>
 800270a:	8803      	ldrh	r3, [r0, #0]
 800270c:	07d0      	lsls	r0, r2, #31
 800270e:	bf44      	itt	mi
 8002710:	f042 0220 	orrmi.w	r2, r2, #32
 8002714:	6022      	strmi	r2, [r4, #0]
 8002716:	b91b      	cbnz	r3, 8002720 <_printf_i+0x178>
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	f022 0220 	bic.w	r2, r2, #32
 800271e:	6022      	str	r2, [r4, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	e7b1      	b.n	8002688 <_printf_i+0xe0>
 8002724:	4675      	mov	r5, lr
 8002726:	fbb3 f0f2 	udiv	r0, r3, r2
 800272a:	fb02 3310 	mls	r3, r2, r0, r3
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002734:	4603      	mov	r3, r0
 8002736:	2800      	cmp	r0, #0
 8002738:	d1f5      	bne.n	8002726 <_printf_i+0x17e>
 800273a:	e7b7      	b.n	80026ac <_printf_i+0x104>
 800273c:	6808      	ldr	r0, [r1, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	6949      	ldr	r1, [r1, #20]
 8002742:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002746:	d004      	beq.n	8002752 <_printf_i+0x1aa>
 8002748:	1d10      	adds	r0, r2, #4
 800274a:	6018      	str	r0, [r3, #0]
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	6019      	str	r1, [r3, #0]
 8002750:	e007      	b.n	8002762 <_printf_i+0x1ba>
 8002752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002756:	f102 0004 	add.w	r0, r2, #4
 800275a:	6018      	str	r0, [r3, #0]
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	d0f6      	beq.n	800274e <_printf_i+0x1a6>
 8002760:	8019      	strh	r1, [r3, #0]
 8002762:	2300      	movs	r3, #0
 8002764:	6123      	str	r3, [r4, #16]
 8002766:	4675      	mov	r5, lr
 8002768:	e7b1      	b.n	80026ce <_printf_i+0x126>
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	1d11      	adds	r1, r2, #4
 800276e:	6019      	str	r1, [r3, #0]
 8002770:	6815      	ldr	r5, [r2, #0]
 8002772:	6862      	ldr	r2, [r4, #4]
 8002774:	2100      	movs	r1, #0
 8002776:	4628      	mov	r0, r5
 8002778:	f7fd fd42 	bl	8000200 <memchr>
 800277c:	b108      	cbz	r0, 8002782 <_printf_i+0x1da>
 800277e:	1b40      	subs	r0, r0, r5
 8002780:	6060      	str	r0, [r4, #4]
 8002782:	6863      	ldr	r3, [r4, #4]
 8002784:	6123      	str	r3, [r4, #16]
 8002786:	2300      	movs	r3, #0
 8002788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800278c:	e79f      	b.n	80026ce <_printf_i+0x126>
 800278e:	6923      	ldr	r3, [r4, #16]
 8002790:	462a      	mov	r2, r5
 8002792:	4639      	mov	r1, r7
 8002794:	4630      	mov	r0, r6
 8002796:	47c0      	blx	r8
 8002798:	3001      	adds	r0, #1
 800279a:	d0a2      	beq.n	80026e2 <_printf_i+0x13a>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	079b      	lsls	r3, r3, #30
 80027a0:	d507      	bpl.n	80027b2 <_printf_i+0x20a>
 80027a2:	2500      	movs	r5, #0
 80027a4:	f104 0919 	add.w	r9, r4, #25
 80027a8:	68e3      	ldr	r3, [r4, #12]
 80027aa:	9a03      	ldr	r2, [sp, #12]
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	429d      	cmp	r5, r3
 80027b0:	db05      	blt.n	80027be <_printf_i+0x216>
 80027b2:	68e0      	ldr	r0, [r4, #12]
 80027b4:	9b03      	ldr	r3, [sp, #12]
 80027b6:	4298      	cmp	r0, r3
 80027b8:	bfb8      	it	lt
 80027ba:	4618      	movlt	r0, r3
 80027bc:	e793      	b.n	80026e6 <_printf_i+0x13e>
 80027be:	2301      	movs	r3, #1
 80027c0:	464a      	mov	r2, r9
 80027c2:	4639      	mov	r1, r7
 80027c4:	4630      	mov	r0, r6
 80027c6:	47c0      	blx	r8
 80027c8:	3001      	adds	r0, #1
 80027ca:	d08a      	beq.n	80026e2 <_printf_i+0x13a>
 80027cc:	3501      	adds	r5, #1
 80027ce:	e7eb      	b.n	80027a8 <_printf_i+0x200>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1a7      	bne.n	8002724 <_printf_i+0x17c>
 80027d4:	780b      	ldrb	r3, [r1, #0]
 80027d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027de:	e765      	b.n	80026ac <_printf_i+0x104>
 80027e0:	08002a8a 	.word	0x08002a8a
 80027e4:	08002a79 	.word	0x08002a79

080027e8 <memcpy>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	1e43      	subs	r3, r0, #1
 80027ec:	440a      	add	r2, r1
 80027ee:	4291      	cmp	r1, r2
 80027f0:	d100      	bne.n	80027f4 <memcpy+0xc>
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027fc:	e7f7      	b.n	80027ee <memcpy+0x6>

080027fe <memmove>:
 80027fe:	4288      	cmp	r0, r1
 8002800:	b510      	push	{r4, lr}
 8002802:	eb01 0302 	add.w	r3, r1, r2
 8002806:	d803      	bhi.n	8002810 <memmove+0x12>
 8002808:	1e42      	subs	r2, r0, #1
 800280a:	4299      	cmp	r1, r3
 800280c:	d10c      	bne.n	8002828 <memmove+0x2a>
 800280e:	bd10      	pop	{r4, pc}
 8002810:	4298      	cmp	r0, r3
 8002812:	d2f9      	bcs.n	8002808 <memmove+0xa>
 8002814:	1881      	adds	r1, r0, r2
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	42d3      	cmn	r3, r2
 800281a:	d100      	bne.n	800281e <memmove+0x20>
 800281c:	bd10      	pop	{r4, pc}
 800281e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002822:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002826:	e7f7      	b.n	8002818 <memmove+0x1a>
 8002828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800282c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002830:	e7eb      	b.n	800280a <memmove+0xc>
	...

08002834 <_free_r>:
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4605      	mov	r5, r0
 8002838:	2900      	cmp	r1, #0
 800283a:	d045      	beq.n	80028c8 <_free_r+0x94>
 800283c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002840:	1f0c      	subs	r4, r1, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	bfb8      	it	lt
 8002846:	18e4      	addlt	r4, r4, r3
 8002848:	f000 f8d6 	bl	80029f8 <__malloc_lock>
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <_free_r+0x98>)
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	4610      	mov	r0, r2
 8002852:	b933      	cbnz	r3, 8002862 <_free_r+0x2e>
 8002854:	6063      	str	r3, [r4, #4]
 8002856:	6014      	str	r4, [r2, #0]
 8002858:	4628      	mov	r0, r5
 800285a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800285e:	f000 b8cc 	b.w	80029fa <__malloc_unlock>
 8002862:	42a3      	cmp	r3, r4
 8002864:	d90c      	bls.n	8002880 <_free_r+0x4c>
 8002866:	6821      	ldr	r1, [r4, #0]
 8002868:	1862      	adds	r2, r4, r1
 800286a:	4293      	cmp	r3, r2
 800286c:	bf04      	itt	eq
 800286e:	681a      	ldreq	r2, [r3, #0]
 8002870:	685b      	ldreq	r3, [r3, #4]
 8002872:	6063      	str	r3, [r4, #4]
 8002874:	bf04      	itt	eq
 8002876:	1852      	addeq	r2, r2, r1
 8002878:	6022      	streq	r2, [r4, #0]
 800287a:	6004      	str	r4, [r0, #0]
 800287c:	e7ec      	b.n	8002858 <_free_r+0x24>
 800287e:	4613      	mov	r3, r2
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	b10a      	cbz	r2, 8002888 <_free_r+0x54>
 8002884:	42a2      	cmp	r2, r4
 8002886:	d9fa      	bls.n	800287e <_free_r+0x4a>
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	1858      	adds	r0, r3, r1
 800288c:	42a0      	cmp	r0, r4
 800288e:	d10b      	bne.n	80028a8 <_free_r+0x74>
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	4401      	add	r1, r0
 8002894:	1858      	adds	r0, r3, r1
 8002896:	4282      	cmp	r2, r0
 8002898:	6019      	str	r1, [r3, #0]
 800289a:	d1dd      	bne.n	8002858 <_free_r+0x24>
 800289c:	6810      	ldr	r0, [r2, #0]
 800289e:	6852      	ldr	r2, [r2, #4]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	4401      	add	r1, r0
 80028a4:	6019      	str	r1, [r3, #0]
 80028a6:	e7d7      	b.n	8002858 <_free_r+0x24>
 80028a8:	d902      	bls.n	80028b0 <_free_r+0x7c>
 80028aa:	230c      	movs	r3, #12
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	e7d3      	b.n	8002858 <_free_r+0x24>
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	1821      	adds	r1, r4, r0
 80028b4:	428a      	cmp	r2, r1
 80028b6:	bf04      	itt	eq
 80028b8:	6811      	ldreq	r1, [r2, #0]
 80028ba:	6852      	ldreq	r2, [r2, #4]
 80028bc:	6062      	str	r2, [r4, #4]
 80028be:	bf04      	itt	eq
 80028c0:	1809      	addeq	r1, r1, r0
 80028c2:	6021      	streq	r1, [r4, #0]
 80028c4:	605c      	str	r4, [r3, #4]
 80028c6:	e7c7      	b.n	8002858 <_free_r+0x24>
 80028c8:	bd38      	pop	{r3, r4, r5, pc}
 80028ca:	bf00      	nop
 80028cc:	20000090 	.word	0x20000090

080028d0 <_malloc_r>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	1ccd      	adds	r5, r1, #3
 80028d4:	f025 0503 	bic.w	r5, r5, #3
 80028d8:	3508      	adds	r5, #8
 80028da:	2d0c      	cmp	r5, #12
 80028dc:	bf38      	it	cc
 80028de:	250c      	movcc	r5, #12
 80028e0:	2d00      	cmp	r5, #0
 80028e2:	4606      	mov	r6, r0
 80028e4:	db01      	blt.n	80028ea <_malloc_r+0x1a>
 80028e6:	42a9      	cmp	r1, r5
 80028e8:	d903      	bls.n	80028f2 <_malloc_r+0x22>
 80028ea:	230c      	movs	r3, #12
 80028ec:	6033      	str	r3, [r6, #0]
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
 80028f2:	f000 f881 	bl	80029f8 <__malloc_lock>
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <_malloc_r+0xb4>)
 80028f8:	6814      	ldr	r4, [r2, #0]
 80028fa:	4621      	mov	r1, r4
 80028fc:	b991      	cbnz	r1, 8002924 <_malloc_r+0x54>
 80028fe:	4c22      	ldr	r4, [pc, #136]	; (8002988 <_malloc_r+0xb8>)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	b91b      	cbnz	r3, 800290c <_malloc_r+0x3c>
 8002904:	4630      	mov	r0, r6
 8002906:	f000 f867 	bl	80029d8 <_sbrk_r>
 800290a:	6020      	str	r0, [r4, #0]
 800290c:	4629      	mov	r1, r5
 800290e:	4630      	mov	r0, r6
 8002910:	f000 f862 	bl	80029d8 <_sbrk_r>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d126      	bne.n	8002966 <_malloc_r+0x96>
 8002918:	230c      	movs	r3, #12
 800291a:	6033      	str	r3, [r6, #0]
 800291c:	4630      	mov	r0, r6
 800291e:	f000 f86c 	bl	80029fa <__malloc_unlock>
 8002922:	e7e4      	b.n	80028ee <_malloc_r+0x1e>
 8002924:	680b      	ldr	r3, [r1, #0]
 8002926:	1b5b      	subs	r3, r3, r5
 8002928:	d41a      	bmi.n	8002960 <_malloc_r+0x90>
 800292a:	2b0b      	cmp	r3, #11
 800292c:	d90f      	bls.n	800294e <_malloc_r+0x7e>
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	50cd      	str	r5, [r1, r3]
 8002932:	18cc      	adds	r4, r1, r3
 8002934:	4630      	mov	r0, r6
 8002936:	f000 f860 	bl	80029fa <__malloc_unlock>
 800293a:	f104 000b 	add.w	r0, r4, #11
 800293e:	1d23      	adds	r3, r4, #4
 8002940:	f020 0007 	bic.w	r0, r0, #7
 8002944:	1ac3      	subs	r3, r0, r3
 8002946:	d01b      	beq.n	8002980 <_malloc_r+0xb0>
 8002948:	425a      	negs	r2, r3
 800294a:	50e2      	str	r2, [r4, r3]
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	428c      	cmp	r4, r1
 8002950:	bf0d      	iteet	eq
 8002952:	6863      	ldreq	r3, [r4, #4]
 8002954:	684b      	ldrne	r3, [r1, #4]
 8002956:	6063      	strne	r3, [r4, #4]
 8002958:	6013      	streq	r3, [r2, #0]
 800295a:	bf18      	it	ne
 800295c:	460c      	movne	r4, r1
 800295e:	e7e9      	b.n	8002934 <_malloc_r+0x64>
 8002960:	460c      	mov	r4, r1
 8002962:	6849      	ldr	r1, [r1, #4]
 8002964:	e7ca      	b.n	80028fc <_malloc_r+0x2c>
 8002966:	1cc4      	adds	r4, r0, #3
 8002968:	f024 0403 	bic.w	r4, r4, #3
 800296c:	42a0      	cmp	r0, r4
 800296e:	d005      	beq.n	800297c <_malloc_r+0xac>
 8002970:	1a21      	subs	r1, r4, r0
 8002972:	4630      	mov	r0, r6
 8002974:	f000 f830 	bl	80029d8 <_sbrk_r>
 8002978:	3001      	adds	r0, #1
 800297a:	d0cd      	beq.n	8002918 <_malloc_r+0x48>
 800297c:	6025      	str	r5, [r4, #0]
 800297e:	e7d9      	b.n	8002934 <_malloc_r+0x64>
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	bf00      	nop
 8002984:	20000090 	.word	0x20000090
 8002988:	20000094 	.word	0x20000094

0800298c <_realloc_r>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	4607      	mov	r7, r0
 8002990:	4614      	mov	r4, r2
 8002992:	460e      	mov	r6, r1
 8002994:	b921      	cbnz	r1, 80029a0 <_realloc_r+0x14>
 8002996:	4611      	mov	r1, r2
 8002998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800299c:	f7ff bf98 	b.w	80028d0 <_malloc_r>
 80029a0:	b922      	cbnz	r2, 80029ac <_realloc_r+0x20>
 80029a2:	f7ff ff47 	bl	8002834 <_free_r>
 80029a6:	4625      	mov	r5, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ac:	f000 f826 	bl	80029fc <_malloc_usable_size_r>
 80029b0:	4284      	cmp	r4, r0
 80029b2:	d90f      	bls.n	80029d4 <_realloc_r+0x48>
 80029b4:	4621      	mov	r1, r4
 80029b6:	4638      	mov	r0, r7
 80029b8:	f7ff ff8a 	bl	80028d0 <_malloc_r>
 80029bc:	4605      	mov	r5, r0
 80029be:	2800      	cmp	r0, #0
 80029c0:	d0f2      	beq.n	80029a8 <_realloc_r+0x1c>
 80029c2:	4631      	mov	r1, r6
 80029c4:	4622      	mov	r2, r4
 80029c6:	f7ff ff0f 	bl	80027e8 <memcpy>
 80029ca:	4631      	mov	r1, r6
 80029cc:	4638      	mov	r0, r7
 80029ce:	f7ff ff31 	bl	8002834 <_free_r>
 80029d2:	e7e9      	b.n	80029a8 <_realloc_r+0x1c>
 80029d4:	4635      	mov	r5, r6
 80029d6:	e7e7      	b.n	80029a8 <_realloc_r+0x1c>

080029d8 <_sbrk_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4c06      	ldr	r4, [pc, #24]	; (80029f4 <_sbrk_r+0x1c>)
 80029dc:	2300      	movs	r3, #0
 80029de:	4605      	mov	r5, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	6023      	str	r3, [r4, #0]
 80029e4:	f7fe f850 	bl	8000a88 <_sbrk>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_sbrk_r+0x1a>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_sbrk_r+0x1a>
 80029f0:	602b      	str	r3, [r5, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	2000012c 	.word	0x2000012c

080029f8 <__malloc_lock>:
 80029f8:	4770      	bx	lr

080029fa <__malloc_unlock>:
 80029fa:	4770      	bx	lr

080029fc <_malloc_usable_size_r>:
 80029fc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f1a0 0004 	sub.w	r0, r0, #4
 8002a06:	bfbc      	itt	lt
 8002a08:	580b      	ldrlt	r3, [r1, r0]
 8002a0a:	18c0      	addlt	r0, r0, r3
 8002a0c:	4770      	bx	lr
	...

08002a10 <_init>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr

08002a1c <_fini>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr
