
002_BOOTLOADER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  080043fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  8 .bss          000001ec  2000007c  2000007c  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000268  20000268  0002007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000cd86  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001fb0  00000000  00000000  0002ce32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009f0  00000000  00000000  0002ede8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000928  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004ef2  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000034ca  00000000  00000000  00034ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000384bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a70  00000000  00000000  00038538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e78 	.word	0x08003e78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08003e78 	.word	0x08003e78

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <bootloader_verify_crc>:
#include "bootloader_command_app.h"

extern uint8_t supported_commands[];
/*                        CRC VERIFICATION AREA        */
uint8_t bootloader_verify_crc(uint8_t *buffer,uint32_t length,uint32_t crc_host)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  uint32_t crc_Value = 0xFF;
 80005bc:	23ff      	movs	r3, #255	; 0xff
 80005be:	61fb      	str	r3, [r7, #28]
  uint32_t data = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  for(uint32_t i = 0;i<length;i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	e00f      	b.n	80005ea <bootloader_verify_crc+0x3a>
  {
	  data = buffer[i];
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	617b      	str	r3, [r7, #20]
	  crc_Value = HAL_CRC_Accumulate(&hcrc,&data,1);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <bootloader_verify_crc+0x68>)
 80005de:	f001 f9d6 	bl	800198e <HAL_CRC_Accumulate>
 80005e2:	61f8      	str	r0, [r7, #28]
  for(uint32_t i = 0;i<length;i++)
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	3301      	adds	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	69ba      	ldr	r2, [r7, #24]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3eb      	bcc.n	80005ca <bootloader_verify_crc+0x1a>

  }
  __HAL_CRC_DR_RESET(&hcrc);
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <bootloader_verify_crc+0x68>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <bootloader_verify_crc+0x68>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	6892      	ldr	r2, [r2, #8]
 80005fc:	f042 0201 	orr.w	r2, r2, #1
 8000600:	609a      	str	r2, [r3, #8]
  if(crc_Value == crc_host)
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	d101      	bne.n	800060e <bootloader_verify_crc+0x5e>
  {
    return CRC_SUCCESS;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <bootloader_verify_crc+0x60>

  }

 return CRC_FAIL;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200001f4 	.word	0x200001f4

0800061c <bootloader_send_ack>:
void bootloader_send_ack(uint8_t follow_length)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  uint8_t ackBuffer[2];
  ackBuffer[0] = BL_ACK_VALUE;
 8000626:	23a5      	movs	r3, #165	; 0xa5
 8000628:	733b      	strb	r3, [r7, #12]
  ackBuffer[1] = follow_length;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	737b      	strb	r3, [r7, #13]
  HAL_UART_Transmit(&huart3,ackBuffer,2,HAL_MAX_DELAY);
 800062e:	f107 010c 	add.w	r1, r7, #12
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2202      	movs	r2, #2
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <bootloader_send_ack+0x2c>)
 800063a:	f002 fc54 	bl	8002ee6 <HAL_UART_Transmit>

}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200001b0 	.word	0x200001b0

0800064c <bootloader_send_nack>:
void bootloader_send_nack()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint8_t nackValue = BL_NACK_VALUE;
 8000652:	237f      	movs	r3, #127	; 0x7f
 8000654:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3,&nackValue,1,HAL_MAX_DELAY);
 8000656:	1df9      	adds	r1, r7, #7
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	2201      	movs	r2, #1
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <bootloader_send_nack+0x20>)
 8000660:	f002 fc41 	bl	8002ee6 <HAL_UART_Transmit>

}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200001b0 	.word	0x200001b0

08000670 <bootloader_uart_write_data>:
void bootloader_uart_write_data(uint8_t *Buffer,uint32_t length)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart3,Buffer,length,HAL_MAX_DELAY);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b29a      	uxth	r2, r3
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <bootloader_uart_write_data+0x24>)
 8000686:	f002 fc2e 	bl	8002ee6 <HAL_UART_Transmit>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200001b0 	.word	0x200001b0

08000698 <bootloader_get_version>:
uint8_t bootloader_get_version(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
   return BL_VER;
 800069c:	2310      	movs	r3, #16
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <bootloader_get_ver_cmd>:
void bootloader_get_ver_cmd(uint8_t *bl_rx_data)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    uint8_t bl_Version = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
    printMsg("BL_DEBUG_MSG: Bootloader Get Version Command Working\r\n");
 80006b4:	481a      	ldr	r0, [pc, #104]	; (8000720 <bootloader_get_ver_cmd+0x78>)
 80006b6:	f000 fe07 	bl	80012c8 <printMsg>

    uint32_t command_package_length = bl_rx_data[0] + 1; // Total Length of the data
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]

    uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3b04      	subs	r3, #4
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	613b      	str	r3, [r7, #16]

    //CRC CONTROL
    if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3b04      	subs	r3, #4
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff6a 	bl	80005b0 <bootloader_verify_crc>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d115      	bne.n	800070e <bootloader_get_ver_cmd+0x66>
    {
       printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <bootloader_get_ver_cmd+0x7c>)
 80006e4:	f000 fdf0 	bl	80012c8 <printMsg>
       bootloader_send_ack(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff97 	bl	800061c <bootloader_send_ack>
       bl_Version = bootloader_get_version();
 80006ee:	f7ff ffd3 	bl	8000698 <bootloader_get_version>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
       printMsg("BL_DEBUG_MSG: BL_VER = %d\r\n",bl_Version);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4619      	mov	r1, r3
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <bootloader_get_ver_cmd+0x80>)
 80006fc:	f000 fde4 	bl	80012c8 <printMsg>
       bootloader_uart_write_data(&bl_Version,1);
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffb2 	bl	8000670 <bootloader_uart_write_data>
    	printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
    	bootloader_send_nack();

    }

}
 800070c:	e004      	b.n	8000718 <bootloader_get_ver_cmd+0x70>
    	printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <bootloader_get_ver_cmd+0x84>)
 8000710:	f000 fdda 	bl	80012c8 <printMsg>
    	bootloader_send_nack();
 8000714:	f7ff ff9a 	bl	800064c <bootloader_send_nack>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08003e90 	.word	0x08003e90
 8000724:	08003ec8 	.word	0x08003ec8
 8000728:	08003eec 	.word	0x08003eec
 800072c:	08003f08 	.word	0x08003f08

08000730 <bootloader_get_help_cmd>:
void bootloader_get_help_cmd(uint8_t *bl_rx_data)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
   printMsg("BL_DEBUG_MSG: bootloader_get_help_cmd\r\n");
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <bootloader_get_help_cmd+0x70>)
 800073a:	f000 fdc5 	bl	80012c8 <printMsg>

   uint32_t command_package_length = bl_rx_data[0] + 1;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]

   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3b04      	subs	r3, #4
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60bb      	str	r3, [r7, #8]
   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3b04      	subs	r3, #4
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	4619      	mov	r1, r3
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff28 	bl	80005b0 <bootloader_verify_crc>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d113      	bne.n	800078e <bootloader_get_help_cmd+0x5e>
   {
	   printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000766:	480f      	ldr	r0, [pc, #60]	; (80007a4 <bootloader_get_help_cmd+0x74>)
 8000768:	f000 fdae 	bl	80012c8 <printMsg>
	   bootloader_send_ack(strlen((char*)supported_commands));
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <bootloader_get_help_cmd+0x78>)
 800076e:	f7ff fd3f 	bl	80001f0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff50 	bl	800061c <bootloader_send_ack>
	   bootloader_uart_write_data(supported_commands,strlen((char*)supported_commands));
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <bootloader_get_help_cmd+0x78>)
 800077e:	f7ff fd37 	bl	80001f0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <bootloader_get_help_cmd+0x78>)
 8000788:	f7ff ff72 	bl	8000670 <bootloader_uart_write_data>
		printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
	    bootloader_send_nack();
   }


}
 800078c:	e004      	b.n	8000798 <bootloader_get_help_cmd+0x68>
		printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <bootloader_get_help_cmd+0x7c>)
 8000790:	f000 fd9a 	bl	80012c8 <printMsg>
	    bootloader_send_nack();
 8000794:	f7ff ff5a 	bl	800064c <bootloader_send_nack>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08003f30 	.word	0x08003f30
 80007a4:	08003ec8 	.word	0x08003ec8
 80007a8:	20000000 	.word	0x20000000
 80007ac:	08003f08 	.word	0x08003f08

080007b0 <bootloader_get_cid_cmd>:
void bootloader_get_cid_cmd(uint8_t *bl_rx_data)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	   uint16_t cID = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	81fb      	strh	r3, [r7, #14]

	   printMsg("BL_DEBUG_MSG: bootloader_get_cid_cmd\r\n");
 80007bc:	481b      	ldr	r0, [pc, #108]	; (800082c <bootloader_get_cid_cmd+0x7c>)
 80007be:	f000 fd83 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3b04      	subs	r3, #4
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3b04      	subs	r3, #4
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fee6 	bl	80005b0 <bootloader_verify_crc>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d117      	bne.n	800081a <bootloader_get_cid_cmd+0x6a>
	   {
		   printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <bootloader_get_cid_cmd+0x80>)
 80007ec:	f000 fd6c 	bl	80012c8 <printMsg>
		   bootloader_send_ack(2);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff ff13 	bl	800061c <bootloader_send_ack>
		   cID = get_mcu_chip_id();
 80007f6:	f000 f821 	bl	800083c <get_mcu_chip_id>
 80007fa:	4603      	mov	r3, r0
 80007fc:	81fb      	strh	r3, [r7, #14]
		   printMsg("BL_DEBUG_MSG: Chip ID = %d  %#x\r\n",cID,cID);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	4619      	mov	r1, r3
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	461a      	mov	r2, r3
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <bootloader_get_cid_cmd+0x84>)
 8000808:	f000 fd5e 	bl	80012c8 <printMsg>
		   bootloader_uart_write_data((uint8_t*)&cID,2);
 800080c:	f107 030e 	add.w	r3, r7, #14
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff2c 	bl	8000670 <bootloader_uart_write_data>
	   {
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
		    bootloader_send_nack();
	   }

}
 8000818:	e004      	b.n	8000824 <bootloader_get_cid_cmd+0x74>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <bootloader_get_cid_cmd+0x88>)
 800081c:	f000 fd54 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000820:	f7ff ff14 	bl	800064c <bootloader_send_nack>
}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08003f58 	.word	0x08003f58
 8000830:	08003ec8 	.word	0x08003ec8
 8000834:	08003f80 	.word	0x08003f80
 8000838:	08003f08 	.word	0x08003f08

0800083c <get_mcu_chip_id>:
uint16_t get_mcu_chip_id(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  uint16_t cID;
  cID = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <get_mcu_chip_id+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084c:	80fb      	strh	r3, [r7, #6]
  return cID;
 800084e:	88fb      	ldrh	r3, [r7, #6]

}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e0042000 	.word	0xe0042000

08000860 <bootloader_get_rdp_cmd>:
void bootloader_get_rdp_cmd(uint8_t *bl_rx_data)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
   uint8_t rdpLevel = 0 ;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]

   printMsg("BL_DEBUG_MSG: bootloader_get_rdp_cmd\r\n");
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <bootloader_get_rdp_cmd+0x7c>)
 800086e:	f000 fd2b 	bl	80012c8 <printMsg>

   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	617b      	str	r3, [r7, #20]

   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3b04      	subs	r3, #4
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	613b      	str	r3, [r7, #16]

   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3b04      	subs	r3, #4
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe8e 	bl	80005b0 <bootloader_verify_crc>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d117      	bne.n	80008ca <bootloader_get_rdp_cmd+0x6a>
   {
	   printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <bootloader_get_rdp_cmd+0x80>)
 800089c:	f000 fd14 	bl	80012c8 <printMsg>
	   bootloader_send_ack(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff febb 	bl	800061c <bootloader_send_ack>

	   rdpLevel = get_flash_rdp_level();
 80008a6:	f000 f821 	bl	80008ec <get_flash_rdp_level>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73fb      	strb	r3, [r7, #15]
	   printMsg("BL_DEBUG_MSG: STM32F4 RDP LEVEL: %d %#x\r\n",rdpLevel,rdpLevel);
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4619      	mov	r1, r3
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	461a      	mov	r2, r3
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <bootloader_get_rdp_cmd+0x84>)
 80008b8:	f000 fd06 	bl	80012c8 <printMsg>
	   bootloader_uart_write_data(&rdpLevel,1);
 80008bc:	f107 030f 	add.w	r3, r7, #15
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fed4 	bl	8000670 <bootloader_uart_write_data>
   {
	    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
	    bootloader_send_nack();
   }

}
 80008c8:	e004      	b.n	80008d4 <bootloader_get_rdp_cmd+0x74>
	    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <bootloader_get_rdp_cmd+0x88>)
 80008cc:	f000 fcfc 	bl	80012c8 <printMsg>
	    bootloader_send_nack();
 80008d0:	f7ff febc 	bl	800064c <bootloader_send_nack>
}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08003fa4 	.word	0x08003fa4
 80008e0:	08003ec8 	.word	0x08003ec8
 80008e4:	08003fcc 	.word	0x08003fcc
 80008e8:	08003f08 	.word	0x08003f08

080008ec <get_flash_rdp_level>:
uint8_t get_flash_rdp_level(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  uint8_t rdp_level = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	71fb      	strb	r3, [r7, #7]

  volatile uint32_t *OB_Address = (uint32_t *)0x1FFFC000;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <get_flash_rdp_level+0x24>)
 80008f8:	603b      	str	r3, [r7, #0]
  rdp_level = (uint8_t)(*OB_Address >> 8);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	71fb      	strb	r3, [r7, #7]

  return rdp_level;
 8000902:	79fb      	ldrb	r3, [r7, #7]
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	1fffc000 	.word	0x1fffc000

08000914 <bootloader_go_to_addr_cmd>:
void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	uint32_t go_to_address = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
	uint8_t adrr_valid =   ADD_VALID;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
	uint8_t adrr_invalid = ADD_INVALID;
 8000924:	2301      	movs	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]

	printMsg("BL_DEBUG_MSG: bootloader_go_to_addr_cmd\r\n");
 8000928:	4827      	ldr	r0, [pc, #156]	; (80009c8 <bootloader_go_to_addr_cmd+0xb4>)
 800092a:	f000 fccd 	bl	80012c8 <printMsg>

	uint32_t command_package_length = bl_rx_data[0] + 1;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]

	uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	3b04      	subs	r3, #4
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	3b04      	subs	r3, #4
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe30 	bl	80005b0 <bootloader_verify_crc>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d12e      	bne.n	80009b4 <bootloader_go_to_addr_cmd+0xa0>
	   {
		   printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000956:	481d      	ldr	r0, [pc, #116]	; (80009cc <bootloader_go_to_addr_cmd+0xb8>)
 8000958:	f000 fcb6 	bl	80012c8 <printMsg>
		   bootloader_send_ack(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fe5d 	bl	800061c <bootloader_send_ack>

		   go_to_address = *(uint32_t *)&bl_rx_data[2];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000968:	61fb      	str	r3, [r7, #28]
		   printMsg("BL_DEBUG_MSG: GO ADDRESS = %#x\r\n",go_to_address);
 800096a:	69f9      	ldr	r1, [r7, #28]
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <bootloader_go_to_addr_cmd+0xbc>)
 800096e:	f000 fcab 	bl	80012c8 <printMsg>

		   if(bootloader_verify_addr(go_to_address) == ADD_VALID)
 8000972:	69f8      	ldr	r0, [r7, #28]
 8000974:	f000 f834 	bl	80009e0 <bootloader_verify_addr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d110      	bne.n	80009a0 <bootloader_go_to_addr_cmd+0x8c>
		   {
             bootloader_uart_write_data(&adrr_valid,1);
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe73 	bl	8000670 <bootloader_uart_write_data>

             // Go to the Address
             go_to_address +=1; // T Bit = 1
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3301      	adds	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
             void (*lets_go_to_address)(void) = (void*)go_to_address;
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	613b      	str	r3, [r7, #16]
             printMsg("BL_DEBUG_MSG: GOIN TO ADDRESS");
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <bootloader_go_to_addr_cmd+0xc0>)
 8000996:	f000 fc97 	bl	80012c8 <printMsg>
             lets_go_to_address();
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4798      	blx	r3
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
		    bootloader_send_nack();
	   }


}
 800099e:	e00e      	b.n	80009be <bootloader_go_to_addr_cmd+0xaa>
			  printMsg("BL_DEBUG_MSG: Go Address INVALID\r\n");
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <bootloader_go_to_addr_cmd+0xc4>)
 80009a2:	f000 fc91 	bl	80012c8 <printMsg>
			  bootloader_uart_write_data(&adrr_invalid,1);
 80009a6:	f107 030e 	add.w	r3, r7, #14
 80009aa:	2101      	movs	r1, #1
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe5f 	bl	8000670 <bootloader_uart_write_data>
}
 80009b2:	e004      	b.n	80009be <bootloader_go_to_addr_cmd+0xaa>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <bootloader_go_to_addr_cmd+0xc8>)
 80009b6:	f000 fc87 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 80009ba:	f7ff fe47 	bl	800064c <bootloader_send_nack>
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08003ff8 	.word	0x08003ff8
 80009cc:	08003ec8 	.word	0x08003ec8
 80009d0:	08004024 	.word	0x08004024
 80009d4:	08004048 	.word	0x08004048
 80009d8:	08004068 	.word	0x08004068
 80009dc:	08003f08 	.word	0x08003f08

080009e0 <bootloader_verify_addr>:
uint8_t bootloader_verify_addr(uint32_t goaddr)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  if(goaddr >= FLASH_BASE && goaddr <= FLASH_END)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80009ee:	d305      	bcc.n	80009fc <bootloader_verify_addr+0x1c>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80009f6:	d201      	bcs.n	80009fc <bootloader_verify_addr+0x1c>
  {
	  return ADD_VALID;
 80009f8:	2300      	movs	r3, #0
 80009fa:	e032      	b.n	8000a62 <bootloader_verify_addr+0x82>
  }
  else if(goaddr >= SRAM1_BASE && goaddr <= SRAM1_END)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a02:	d305      	bcc.n	8000a10 <bootloader_verify_addr+0x30>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <bootloader_verify_addr+0x90>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d801      	bhi.n	8000a10 <bootloader_verify_addr+0x30>
  {
	  return ADD_VALID;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e028      	b.n	8000a62 <bootloader_verify_addr+0x82>

  }
  else if(goaddr >= SRAM2_BASE && goaddr <= SRAM2_END)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <bootloader_verify_addr+0x94>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d905      	bls.n	8000a24 <bootloader_verify_addr+0x44>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <bootloader_verify_addr+0x98>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d801      	bhi.n	8000a24 <bootloader_verify_addr+0x44>
  {
	  return ADD_VALID;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e01e      	b.n	8000a62 <bootloader_verify_addr+0x82>

  }
  else if(goaddr >= SRAM3_BASE && goaddr <= SRAM3_END)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <bootloader_verify_addr+0x9c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d905      	bls.n	8000a38 <bootloader_verify_addr+0x58>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <bootloader_verify_addr+0xa0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d801      	bhi.n	8000a38 <bootloader_verify_addr+0x58>
  {
	  return ADD_VALID;
 8000a34:	2300      	movs	r3, #0
 8000a36:	e014      	b.n	8000a62 <bootloader_verify_addr+0x82>

  }
  else if(goaddr >= BKPSRAM_BASE && goaddr <= BKPSRAM_END)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <bootloader_verify_addr+0xa4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d905      	bls.n	8000a4c <bootloader_verify_addr+0x6c>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <bootloader_verify_addr+0xa8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d801      	bhi.n	8000a4c <bootloader_verify_addr+0x6c>
  {
	  return ADD_VALID;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e00a      	b.n	8000a62 <bootloader_verify_addr+0x82>

  }
  else if(goaddr >= FLASH_OTP_BASE && goaddr <= FLASH_OTP_END)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <bootloader_verify_addr+0xac>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d905      	bls.n	8000a60 <bootloader_verify_addr+0x80>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <bootloader_verify_addr+0xb0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d801      	bhi.n	8000a60 <bootloader_verify_addr+0x80>
  {
	  return ADD_VALID;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e000      	b.n	8000a62 <bootloader_verify_addr+0x82>

  }

  else
  {
   return ADD_INVALID;
 8000a60:	2301      	movs	r3, #1
  }

}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2001c000 	.word	0x2001c000
 8000a74:	2001bfff 	.word	0x2001bfff
 8000a78:	20020000 	.word	0x20020000
 8000a7c:	2001ffff 	.word	0x2001ffff
 8000a80:	20030000 	.word	0x20030000
 8000a84:	40023fff 	.word	0x40023fff
 8000a88:	40025000 	.word	0x40025000
 8000a8c:	1fff77ff 	.word	0x1fff77ff
 8000a90:	1fff7a0f 	.word	0x1fff7a0f

08000a94 <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	   uint8_t eraseStatus = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]

	   printMsg("BL_DEBUG_MSG: bootloader_flash_erase_cmd\r\n");
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <bootloader_flash_erase_cmd+0xa0>)
 8000aa2:	f000 fc11 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3b04      	subs	r3, #4
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fd74 	bl	80005b0 <bootloader_verify_crc>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d128      	bne.n	8000b20 <bootloader_flash_erase_cmd+0x8c>
	   {
		  printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000ace:	481a      	ldr	r0, [pc, #104]	; (8000b38 <bootloader_flash_erase_cmd+0xa4>)
 8000ad0:	f000 fbfa 	bl	80012c8 <printMsg>
		  bootloader_send_ack(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fda1 	bl	800061c <bootloader_send_ack>
		  printMsg("BL_DEBUG_MSG: Initial sector: %d Number of Sector : %d\r\n",bl_rx_data[2],bl_rx_data[3]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3303      	adds	r3, #3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <bootloader_flash_erase_cmd+0xa8>)
 8000aec:	f000 fbec 	bl	80012c8 <printMsg>

		  eraseStatus = execute_flash_erase(bl_rx_data[2],bl_rx_data[3]);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3302      	adds	r3, #2
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3303      	adds	r3, #3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4610      	mov	r0, r2
 8000b00:	f000 f822 	bl	8000b48 <execute_flash_erase>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]

		  printMsg("BL_DEBUG_MSG: Flash Erase Status: %d  \r\n",eraseStatus);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <bootloader_flash_erase_cmd+0xac>)
 8000b0e:	f000 fbdb 	bl	80012c8 <printMsg>
		  bootloader_uart_write_data(&eraseStatus,1);
 8000b12:	f107 030f 	add.w	r3, r7, #15
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fda9 	bl	8000670 <bootloader_uart_write_data>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
		    bootloader_send_nack();
	   }


}
 8000b1e:	e004      	b.n	8000b2a <bootloader_flash_erase_cmd+0x96>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <bootloader_flash_erase_cmd+0xb0>)
 8000b22:	f000 fbd1 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000b26:	f7ff fd91 	bl	800064c <bootloader_send_nack>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800408c 	.word	0x0800408c
 8000b38:	08003ec8 	.word	0x08003ec8
 8000b3c:	080040b8 	.word	0x080040b8
 8000b40:	080040f4 	.word	0x080040f4
 8000b44:	08003f08 	.word	0x08003f08

08000b48 <execute_flash_erase>:
uint8_t execute_flash_erase(uint8_t start_sector,uint8_t number_of_sector)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
	uint8_t erase_status = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]

	if(number_of_sector > 11)
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	2b0b      	cmp	r3, #11
 8000b76:	d901      	bls.n	8000b7c <execute_flash_erase+0x34>
	{
		return INVALID_SECTOR;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e035      	b.n	8000be8 <execute_flash_erase+0xa0>

	}

	if((start_sector<=11) || start_sector == 0xFF)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b0b      	cmp	r3, #11
 8000b80:	d902      	bls.n	8000b88 <execute_flash_erase+0x40>
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d12e      	bne.n	8000be6 <execute_flash_erase+0x9e>
	{
      if(start_sector == 0xFF)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2bff      	cmp	r3, #255	; 0xff
 8000b8c:	d102      	bne.n	8000b94 <execute_flash_erase+0x4c>
      {
    	  // Mass Erase
    	  FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	e012      	b.n	8000bba <execute_flash_erase+0x72>

      }
      else
      {
    	  // Sector Erase
    	  uint8_t remaining_sector = 11 - start_sector;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f1c3 030b 	rsb	r3, r3, #11
 8000b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	  if(start_sector > remaining_sector)
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d902      	bls.n	8000bae <execute_flash_erase+0x66>
    	  {
    		  start_sector = remaining_sector;
 8000ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bac:	71fb      	strb	r3, [r7, #7]
    	  }
    	  FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
    	  FLASH_EraseInitStruct.Sector = start_sector;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	61bb      	str	r3, [r7, #24]
    	  FLASH_EraseInitStruct.NbSectors = number_of_sector;
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	61fb      	str	r3, [r7, #28]
      }
      FLASH_EraseInitStruct.Banks = FLASH_BANK_BOTH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	617b      	str	r3, [r7, #20]

      HAL_FLASH_Unlock();
 8000bbe:	f000 ff65 	bl	8001a8c <HAL_FLASH_Unlock>
      FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	623b      	str	r3, [r7, #32]
      erase_status = (uint8_t) HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&SectorError);
 8000bc6:	f107 020c 	add.w	r2, r7, #12
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f8f5 	bl	8001dc0 <HAL_FLASHEx_Erase>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      HAL_FLASH_Lock();
 8000bdc:	f000 ff78 	bl	8001ad0 <HAL_FLASH_Lock>
      return erase_status;
 8000be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000be4:	e000      	b.n	8000be8 <execute_flash_erase+0xa0>

	}

    return INVALID_SECTOR;
 8000be6:	2304      	movs	r3, #4

}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <bootloader_mem_write_cmd>:
void bootloader_mem_write_cmd(uint8_t *bl_rx_data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
       uint8_t write_status = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
       uint8_t checkSum = 0,length = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	2300      	movs	r3, #0
 8000c02:	77bb      	strb	r3, [r7, #30]

       length = bl_rx_data[0];
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	77bb      	strb	r3, [r7, #30]
       uint8_t payload_length = bl_rx_data[6];
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	799b      	ldrb	r3, [r3, #6]
 8000c0e:	777b      	strb	r3, [r7, #29]
       uint32_t memory_addr = *((uint32_t *)(&bl_rx_data[2]));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c16:	61bb      	str	r3, [r7, #24]

       checkSum = bl_rx_data[length];
 8000c18:	7fbb      	ldrb	r3, [r7, #30]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	77fb      	strb	r3, [r7, #31]

	   printMsg("BL_DEBUG_MSG: bootloader_mem_write_cmd\r\n");
 8000c22:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <bootloader_mem_write_cmd+0xd0>)
 8000c24:	f000 fb50 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3b04      	subs	r3, #4
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fcb3 	bl	80005b0 <bootloader_verify_crc>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12e      	bne.n	8000cae <bootloader_mem_write_cmd+0xbe>
	   {
		  printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000c50:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <bootloader_mem_write_cmd+0xd4>)
 8000c52:	f000 fb39 	bl	80012c8 <printMsg>
		  bootloader_send_ack(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fce0 	bl	800061c <bootloader_send_ack>
		  printMsg("BL_DEBUG_MSG: Memory Write Address : %#x\r\n",memory_addr);
 8000c5c:	69b9      	ldr	r1, [r7, #24]
 8000c5e:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <bootloader_mem_write_cmd+0xd8>)
 8000c60:	f000 fb32 	bl	80012c8 <printMsg>
		  if(bootloader_verify_addr(memory_addr) == ADD_VALID)
 8000c64:	69b8      	ldr	r0, [r7, #24]
 8000c66:	f7ff febb 	bl	80009e0 <bootloader_verify_addr>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d112      	bne.n	8000c96 <bootloader_mem_write_cmd+0xa6>
		  {
			  printMsg("BL_DEBUG_MSG: Valid Memory Write Address\r\n");
 8000c70:	4816      	ldr	r0, [pc, #88]	; (8000ccc <bootloader_mem_write_cmd+0xdc>)
 8000c72:	f000 fb29 	bl	80012c8 <printMsg>
			  write_status = execute_mem_write(&bl_rx_data[7],memory_addr,payload_length);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3307      	adds	r3, #7
 8000c7a:	7f7a      	ldrb	r2, [r7, #29]
 8000c7c:	69b9      	ldr	r1, [r7, #24]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f82a 	bl	8000cd8 <execute_mem_write>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
			  bootloader_uart_write_data(&write_status,1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcee 	bl	8000670 <bootloader_uart_write_data>
	   {
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
		    bootloader_send_nack();
	   }

}
 8000c94:	e010      	b.n	8000cb8 <bootloader_mem_write_cmd+0xc8>
			  printMsg("BL_DEBUG_MSG: Invalid Memory Write Address\r\n");
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <bootloader_mem_write_cmd+0xe0>)
 8000c98:	f000 fb16 	bl	80012c8 <printMsg>
			  write_status = ADD_INVALID;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
			  bootloader_uart_write_data(&write_status,1);
 8000ca0:	f107 030f 	add.w	r3, r7, #15
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fce2 	bl	8000670 <bootloader_uart_write_data>
}
 8000cac:	e004      	b.n	8000cb8 <bootloader_mem_write_cmd+0xc8>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 8000cae:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <bootloader_mem_write_cmd+0xe4>)
 8000cb0:	f000 fb0a 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000cb4:	f7ff fcca 	bl	800064c <bootloader_send_nack>
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08004120 	.word	0x08004120
 8000cc4:	08003ec8 	.word	0x08003ec8
 8000cc8:	0800414c 	.word	0x0800414c
 8000ccc:	08004178 	.word	0x08004178
 8000cd0:	080041a4 	.word	0x080041a4
 8000cd4:	08003f08 	.word	0x08003f08

08000cd8 <execute_mem_write>:
uint8_t execute_mem_write(uint8_t *Buffer,uint32_t memAddress,uint32_t len)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
    uint8_t status = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Unlock();
 8000ce8:	f000 fed0 	bl	8001a8c <HAL_FLASH_Unlock>

    for(uint32_t i = 0; i<len;i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e013      	b.n	8000d1a <execute_mem_write+0x42>
    {
    	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,memAddress+i,Buffer[i]);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	18d1      	adds	r1, r2, r3
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f04f 0400 	mov.w	r4, #0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4623      	mov	r3, r4
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 fe6a 	bl	80019e4 <HAL_FLASH_Program>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0; i<len;i++)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e7      	bcc.n	8000cf2 <execute_mem_write+0x1a>

    }
    HAL_FLASH_Lock();
 8000d22:	f000 fed5 	bl	8001ad0 <HAL_FLASH_Lock>

    return status;
 8000d26:	7dfb      	ldrb	r3, [r7, #23]

}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <bootloader_en_rw_protect_cmd>:
void bootloader_en_rw_protect_cmd(uint8_t *bl_rx_data)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
       uint8_t status = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

	   printMsg("BL_DEBUG_MSG: bootloader_en_rw_protect_cmd\r\n");
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <bootloader_en_rw_protect_cmd+0x88>)
 8000d3e:	f000 fac3 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3b04      	subs	r3, #4
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3b04      	subs	r3, #4
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fc26 	bl	80005b0 <bootloader_verify_crc>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d11d      	bne.n	8000da6 <bootloader_en_rw_protect_cmd+0x76>
	   {
		  printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000d6a:	4814      	ldr	r0, [pc, #80]	; (8000dbc <bootloader_en_rw_protect_cmd+0x8c>)
 8000d6c:	f000 faac 	bl	80012c8 <printMsg>
		  bootloader_send_ack(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fc53 	bl	800061c <bootloader_send_ack>

		  status = configure_flash_sector_r_w_protection(bl_rx_data[2],bl_rx_data[3],0);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	7818      	ldrb	r0, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	f000 f867 	bl	8000e58 <configure_flash_sector_r_w_protection>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
		  printMsg("BL_DEBUG_MSG: Flash Protect Status: %d",status);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <bootloader_en_rw_protect_cmd+0x90>)
 8000d94:	f000 fa98 	bl	80012c8 <printMsg>
		  bootloader_uart_write_data(&status,1);
 8000d98:	f107 030f 	add.w	r3, r7, #15
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc66 	bl	8000670 <bootloader_uart_write_data>
		    bootloader_send_nack();

	   }


}
 8000da4:	e004      	b.n	8000db0 <bootloader_en_rw_protect_cmd+0x80>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <bootloader_en_rw_protect_cmd+0x94>)
 8000da8:	f000 fa8e 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000dac:	f7ff fc4e 	bl	800064c <bootloader_send_nack>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	080041d4 	.word	0x080041d4
 8000dbc:	08003ec8 	.word	0x08003ec8
 8000dc0:	08004204 	.word	0x08004204
 8000dc4:	08003f08 	.word	0x08003f08

08000dc8 <bootloader_dis_rw_protect_cmd>:
void bootloader_dis_rw_protect_cmd(uint8_t *bl_rx_data)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
       uint8_t status = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	   printMsg("BL_DEBUG_MSG: bootloader_dis_rw_protect_cmd\r\n");
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <bootloader_dis_rw_protect_cmd+0x80>)
 8000dd6:	f000 fa77 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3b04      	subs	r3, #4
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3b04      	subs	r3, #4
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fbda 	bl	80005b0 <bootloader_verify_crc>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d118      	bne.n	8000e34 <bootloader_dis_rw_protect_cmd+0x6c>
	   {
		  printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <bootloader_dis_rw_protect_cmd+0x84>)
 8000e04:	f000 fa60 	bl	80012c8 <printMsg>
		  bootloader_send_ack(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fc07 	bl	800061c <bootloader_send_ack>

		  status = configure_flash_sector_r_w_protection(0,0,1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f820 	bl	8000e58 <configure_flash_sector_r_w_protection>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]
		  printMsg("BL_DEBUG_MSG: Flash Protect Status: %d",status);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <bootloader_dis_rw_protect_cmd+0x88>)
 8000e22:	f000 fa51 	bl	80012c8 <printMsg>
		  bootloader_uart_write_data(&status,1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fc1f 	bl	8000670 <bootloader_uart_write_data>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
		    bootloader_send_nack();

	   }

}
 8000e32:	e004      	b.n	8000e3e <bootloader_dis_rw_protect_cmd+0x76>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <bootloader_dis_rw_protect_cmd+0x8c>)
 8000e36:	f000 fa47 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000e3a:	f7ff fc07 	bl	800064c <bootloader_send_nack>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	0800422c 	.word	0x0800422c
 8000e4c:	08003ec8 	.word	0x08003ec8
 8000e50:	08004204 	.word	0x08004204
 8000e54:	08003f08 	.word	0x08003f08

08000e58 <configure_flash_sector_r_w_protection>:
uint8_t configure_flash_sector_r_w_protection(uint8_t sector_detail,uint8_t protection_mode,uint8_t enordisable)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	460b      	mov	r3, r1
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	717b      	strb	r3, [r7, #5]

    //EnableorDisable == 0 -> en_w_r_protect ||EnableorDisable == 1 -> dis_w_r_protect
    if(enordisable)
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d01f      	beq.n	8000eb0 <configure_flash_sector_r_w_protection+0x58>
    {
       	HAL_FLASH_OB_Unlock();
 8000e70:	f000 fe3e 	bl	8001af0 <HAL_FLASH_OB_Unlock>
        while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000e74:	bf00      	nop
 8000e76:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f9      	bne.n	8000e76 <configure_flash_sector_r_w_protection+0x1e>

        FLASH->OPTCR |= (0xFF<<16);
 8000e82:	4a35      	ldr	r2, [pc, #212]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e84:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000e8c:	6153      	str	r3, [r2, #20]

    	FLASH->OPTCR |= (1<<1);
 8000e8e:	4a32      	ldr	r2, [pc, #200]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6153      	str	r3, [r2, #20]

    	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000e9a:	bf00      	nop
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f9      	bne.n	8000e9c <configure_flash_sector_r_w_protection+0x44>

    	HAL_FLASH_OB_Lock();
 8000ea8:	f000 fe3e 	bl	8001b28 <HAL_FLASH_OB_Lock>
    	return 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e04f      	b.n	8000f50 <configure_flash_sector_r_w_protection+0xf8>

    }
    if(protection_mode == 1) //Only Write Protection
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d121      	bne.n	8000efa <configure_flash_sector_r_w_protection+0xa2>
    {
    	HAL_FLASH_OB_Unlock();
 8000eb6:	f000 fe1b 	bl	8001af0 <HAL_FLASH_OB_Unlock>
    	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000eba:	bf00      	nop
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f9      	bne.n	8000ebc <configure_flash_sector_r_w_protection+0x64>
    	FLASH->OPTCR &= ~(sector_detail << 16);
 8000ec8:	4923      	ldr	r1, [pc, #140]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	0412      	lsls	r2, r2, #16
 8000ed2:	43d2      	mvns	r2, r2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	614b      	str	r3, [r1, #20]

    	FLASH->OPTCR |= (1<<1);
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6153      	str	r3, [r2, #20]

    	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000ee4:	bf00      	nop
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f9      	bne.n	8000ee6 <configure_flash_sector_r_w_protection+0x8e>

    	HAL_FLASH_OB_Lock();
 8000ef2:	f000 fe19 	bl	8001b28 <HAL_FLASH_OB_Lock>

    	return 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e02a      	b.n	8000f50 <configure_flash_sector_r_w_protection+0xf8>

    }
    else if(protection_mode == 2)// Read Write Protection
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d126      	bne.n	8000f4e <configure_flash_sector_r_w_protection+0xf6>
    {
    	HAL_FLASH_OB_Unlock();
 8000f00:	f000 fdf6 	bl	8001af0 <HAL_FLASH_OB_Unlock>
    	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f04:	bf00      	nop
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f9      	bne.n	8000f06 <configure_flash_sector_r_w_protection+0xae>

    	FLASH->OPTCR &= ~(0xFF << 16);
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f1c:	6153      	str	r3, [r2, #20]

    	FLASH->OPTCR |= (sector_detail<<16);
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	0412      	lsls	r2, r2, #16
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	614b      	str	r3, [r1, #20]

    	FLASH->OPTCR |= (1<<1);
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	6153      	str	r3, [r2, #20]

    	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000f38:	bf00      	nop
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <configure_flash_sector_r_w_protection+0x100>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <configure_flash_sector_r_w_protection+0xe2>

    	HAL_FLASH_OB_Lock();
 8000f46:	f000 fdef 	bl	8001b28 <HAL_FLASH_OB_Lock>
    	return 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <configure_flash_sector_r_w_protection+0xf8>



    }

    return 1;
 8000f4e:	2301      	movs	r3, #1


}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <bl_read_sector_p_status_cmd>:
void bl_read_sector_p_status_cmd(uint8_t *bl_rx_data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
       uint16_t status = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	81fb      	strh	r3, [r7, #14]

	   printMsg("BL_DEBUG_MSG: bl_read_sector_p_status_cmd\r\n");
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <bl_read_sector_p_status_cmd+0x78>)
 8000f6a:	f000 f9ad 	bl	80012c8 <printMsg>

	   uint32_t command_package_length = bl_rx_data[0] + 1;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]

	   uint32_t host_crc = *((uint32_t *)(bl_rx_data + command_package_length - 4));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3b04      	subs	r3, #4
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]

	   if(!bootloader_verify_crc(&bl_rx_data[0],command_package_length-4,host_crc))
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3b04      	subs	r3, #4
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fb10 	bl	80005b0 <bootloader_verify_crc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d115      	bne.n	8000fc2 <bl_read_sector_p_status_cmd+0x66>
	   {
		  printMsg("BL_DEBUG_MSG: Checksum success\r\n");
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <bl_read_sector_p_status_cmd+0x7c>)
 8000f98:	f000 f996 	bl	80012c8 <printMsg>
		  bootloader_send_ack(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fb3d 	bl	800061c <bootloader_send_ack>
		  status = read_ob_r_w_protection_status();
 8000fa2:	f000 f81f 	bl	8000fe4 <read_ob_r_w_protection_status>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	81fb      	strh	r3, [r7, #14]
		  printMsg("BL_DEBUG_MSG: nWRP Status: %#x \r\n",status);
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <bl_read_sector_p_status_cmd+0x80>)
 8000fb0:	f000 f98a 	bl	80012c8 <printMsg>
		  bootloader_uart_write_data((uint8_t*)&status,2);
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb58 	bl	8000670 <bootloader_uart_write_data>

	   }



}
 8000fc0:	e004      	b.n	8000fcc <bl_read_sector_p_status_cmd+0x70>
		    printMsg("BL_DEBUG_MSG: Checksum unsuccessful\r\n");
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <bl_read_sector_p_status_cmd+0x84>)
 8000fc4:	f000 f980 	bl	80012c8 <printMsg>
		    bootloader_send_nack();
 8000fc8:	f7ff fb40 	bl	800064c <bootloader_send_nack>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800425c 	.word	0x0800425c
 8000fd8:	08003ec8 	.word	0x08003ec8
 8000fdc:	08004288 	.word	0x08004288
 8000fe0:	08003f08 	.word	0x08003f08

08000fe4 <read_ob_r_w_protection_status>:
uint16_t read_ob_r_w_protection_status()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef flashOBInitStruct;

  HAL_FLASH_OB_Unlock();
 8000fea:	f000 fd81 	bl	8001af0 <HAL_FLASH_OB_Unlock>
  HAL_FLASHEx_OBGetConfig(&flashOBInitStruct);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 ff57 	bl	8001ea4 <HAL_FLASHEx_OBGetConfig>
  HAL_FLASH_OB_Lock();
 8000ff6:	f000 fd97 	bl	8001b28 <HAL_FLASH_OB_Lock>

  return flashOBInitStruct.WRPSector;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	b29b      	uxth	r3, r3

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fb4e 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f822 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f8f8 	bl	8001208 <MX_GPIO_Init>
  MX_CRC_Init();
 8001018:	f000 f88e 	bl	8001138 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800101c:	f000 f8a0 	bl	8001160 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001020:	f000 f8c8 	bl	80011b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)  // When Reset Button Pressed
 8001024:	2101      	movs	r1, #1
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <main+0x44>)
 8001028:	f001 fa24 	bl	8002474 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <main+0x36>
{
     printMsg("BL Debug Mode:Button is Pressed and Going to BL Mode\r\n");
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <main+0x48>)
 8001034:	f000 f948 	bl	80012c8 <printMsg>

     Bootloader_UART_Read_Data();
 8001038:	f000 f968 	bl	800130c <Bootloader_UART_Read_Data>
 800103c:	e004      	b.n	8001048 <main+0x40>
}
else
{
	 printMsg("BL Debug Mode:Button is not Pressed.Executing user application\r\n");
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <main+0x4c>)
 8001040:	f000 f942 	bl	80012c8 <printMsg>
	 Bootloader_Jump_TO_User_Application();
 8001044:	f000 f9d0 	bl	80013e8 <Bootloader_Jump_TO_User_Application>
}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x40>
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000
 8001050:	080042ac 	.word	0x080042ac
 8001054:	080042e4 	.word	0x080042e4

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fae2 	bl	8003630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <SystemClock_Config+0xd8>)
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <SystemClock_Config+0xd8>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xd8>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4a25      	ldr	r2, [pc, #148]	; (8001134 <SystemClock_Config+0xdc>)
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xdc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xdc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	2310      	movs	r3, #16
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010cc:	23b4      	movs	r3, #180	; 0xb4
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fa4b 	bl	8002578 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e8:	f000 f9aa 	bl	8001440 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010ec:	f001 f9f4 	bl	80024d8 <HAL_PWREx_EnableOverDrive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010f6:	f000 f9a3 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001106:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2105      	movs	r1, #5
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fca5 	bl	8002a68 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001124:	f000 f98c 	bl	8001440 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	; 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_CRC_Init+0x20>)
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <MX_CRC_Init+0x24>)
 8001140:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_CRC_Init+0x20>)
 8001144:	f000 fc07 	bl	8001956 <HAL_CRC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800114e:	f000 f977 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f4 	.word	0x200001f4
 800115c:	40023000 	.word	0x40023000

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f001 fe58 	bl	8002e4c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f94d 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001fc 	.word	0x200001fc
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART3_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART3_UART_Init+0x4c>)
 80011ec:	f001 fe2e 	bl	8002e4c <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f923 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001b0 	.word	0x200001b0
 8001204:	40004800 	.word	0x40004800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_GPIO_Init+0xb4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_GPIO_Init+0xb4>)
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_GPIO_Init+0xb4>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_GPIO_Init+0xb4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_GPIO_Init+0xb8>)
 800127a:	f001 f913 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127e:	2301      	movs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_GPIO_Init+0xbc>)
 8001292:	f000 ff45 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001296:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_GPIO_Init+0xb8>)
 80012b0:	f000 ff36 	bl	8002120 <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020000 	.word	0x40020000

080012c8 <printMsg>:

/* USER CODE BEGIN 4 */
void printMsg(char *msg,...)
{
 80012c8:	b40f      	push	{r0, r1, r2, r3}
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b09a      	sub	sp, #104	; 0x68
 80012ce:	af00      	add	r7, sp, #0
   char comingMsg[100];

  va_list vaList;
  va_start(vaList,msg);
 80012d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012d4:	603b      	str	r3, [r7, #0]
  vsprintf(comingMsg,msg,vaList);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f9c7 	bl	8003670 <vsiprintf>
  HAL_UART_Transmit(DEBUG_UART,(uint8_t *)comingMsg,strlen(comingMsg),HAL_MAX_DELAY);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff83 	bl	80001f0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	1d39      	adds	r1, r7, #4
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <printMsg+0x40>)
 80012f6:	f001 fdf6 	bl	8002ee6 <HAL_UART_Transmit>
  va_end(vaList);
}
 80012fa:	bf00      	nop
 80012fc:	3768      	adds	r7, #104	; 0x68
 80012fe:	46bd      	mov	sp, r7
 8001300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001304:	b004      	add	sp, #16
 8001306:	4770      	bx	lr
 8001308:	200001b0 	.word	0x200001b0

0800130c <Bootloader_UART_Read_Data>:
void Bootloader_UART_Read_Data(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  //Take the command length
  uint8_t bl_rx_length = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]

  while(1)
  {
    memset(bootloader_rx_data,0,BL_RX_DATA_LENGTH); //Reset Bootloader RX DATA
 8001316:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800131a:	2100      	movs	r1, #0
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 800131e:	f002 f987 	bl	8003630 <memset>

    HAL_UART_Receive(DEBUG_UART,bootloader_rx_data,1,HAL_MAX_DELAY); //Receive Data Length
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	2201      	movs	r2, #1
 8001328:	492c      	ldr	r1, [pc, #176]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 800132a:	482d      	ldr	r0, [pc, #180]	; (80013e0 <Bootloader_UART_Read_Data+0xd4>)
 800132c:	f001 fe6c 	bl	8003008 <HAL_UART_Receive>

    bl_rx_length = bootloader_rx_data[0];
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	71fb      	strb	r3, [r7, #7]

    HAL_UART_Receive(DEBUG_UART,&bootloader_rx_data[1],bl_rx_length,HAL_MAX_DELAY); //Receive Command Array
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	b29a      	uxth	r2, r3
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	4929      	ldr	r1, [pc, #164]	; (80013e4 <Bootloader_UART_Read_Data+0xd8>)
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <Bootloader_UART_Read_Data+0xd4>)
 8001342:	f001 fe61 	bl	8003008 <HAL_UART_Receive>
    switch(bootloader_rx_data[1])
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	3b51      	subs	r3, #81	; 0x51
 800134c:	2b0b      	cmp	r3, #11
 800134e:	d843      	bhi.n	80013d8 <Bootloader_UART_Read_Data+0xcc>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <Bootloader_UART_Read_Data+0x4c>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001389 	.word	0x08001389
 800135c:	08001391 	.word	0x08001391
 8001360:	08001399 	.word	0x08001399
 8001364:	080013a1 	.word	0x080013a1
 8001368:	080013a9 	.word	0x080013a9
 800136c:	080013b1 	.word	0x080013b1
 8001370:	080013b9 	.word	0x080013b9
 8001374:	080013c1 	.word	0x080013c1
 8001378:	080013d9 	.word	0x080013d9
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013d9 	.word	0x080013d9
 8001384:	080013d1 	.word	0x080013d1
    {
    	case BL_GET_VER:
    	{
            bootloader_get_ver_cmd(bootloader_rx_data);
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 800138a:	f7ff f98d 	bl	80006a8 <bootloader_get_ver_cmd>
    		break;
 800138e:	e024      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_GET_HELP:
    	{
            bootloader_get_help_cmd(bootloader_rx_data);
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 8001392:	f7ff f9cd 	bl	8000730 <bootloader_get_help_cmd>
    		break;
 8001396:	e020      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_GET_CID:
    	{
    		bootloader_get_cid_cmd(bootloader_rx_data);
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 800139a:	f7ff fa09 	bl	80007b0 <bootloader_get_cid_cmd>
    		break;
 800139e:	e01c      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_GET_RDP_STATUS:
    	{
    		bootloader_get_rdp_cmd(bootloader_rx_data);
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013a2:	f7ff fa5d 	bl	8000860 <bootloader_get_rdp_cmd>
    		break;
 80013a6:	e018      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_GO_TO_ADDR:
    	{
            bootloader_go_to_addr_cmd(bootloader_rx_data);
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013aa:	f7ff fab3 	bl	8000914 <bootloader_go_to_addr_cmd>
    		break;
 80013ae:	e014      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_FLASH_ERASE:
    	{
            bootloader_flash_erase_cmd(bootloader_rx_data);
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013b2:	f7ff fb6f 	bl	8000a94 <bootloader_flash_erase_cmd>
    		break;
 80013b6:	e010      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_MEM_WRITE:
    	{
    		bootloader_mem_write_cmd(bootloader_rx_data);
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013ba:	f7ff fc19 	bl	8000bf0 <bootloader_mem_write_cmd>
    		break;
 80013be:	e00c      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_EN_RW_PROTECT:
    	{
            bootloader_en_rw_protect_cmd(bootloader_rx_data);
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013c2:	f7ff fcb5 	bl	8000d30 <bootloader_en_rw_protect_cmd>
    		break;
 80013c6:	e008      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_READ_SECTOR_P_STATUS:
    	{
            bl_read_sector_p_status_cmd(bootloader_rx_data);
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013ca:	f7ff fdc7 	bl	8000f5c <bl_read_sector_p_status_cmd>
    		break;
 80013ce:	e004      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}
    	case BL_DIS_R_W_PROTECT:
    	{
    		bootloader_dis_rw_protect_cmd(bootloader_rx_data);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <Bootloader_UART_Read_Data+0xd0>)
 80013d2:	f7ff fcf9 	bl	8000dc8 <bootloader_dis_rw_protect_cmd>
    		break;
 80013d6:	e000      	b.n	80013da <Bootloader_UART_Read_Data+0xce>
    	}

    	default:
    		break;
 80013d8:	bf00      	nop
    memset(bootloader_rx_data,0,BL_RX_DATA_LENGTH); //Reset Bootloader RX DATA
 80013da:	e79c      	b.n	8001316 <Bootloader_UART_Read_Data+0xa>
 80013dc:	200000a4 	.word	0x200000a4
 80013e0:	200001b0 	.word	0x200001b0
 80013e4:	200000a5 	.word	0x200000a5

080013e8 <Bootloader_Jump_TO_User_Application>:

  }

}
void Bootloader_Jump_TO_User_Application(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
   // 1-Create a function pointer to the reset handler
   void (*bootloader_app_reset_handler) (void);
   // 2-Send a message for jumping to user application
   printMsg("BL DEBUG MSG:Bootloader_Jump_To_User_App Called\r\n");
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <Bootloader_Jump_TO_User_Application+0x44>)
 80013f0:	f7ff ff6a 	bl	80012c8 <printMsg>
   // 3-Save the msp_value
   uint32_t msp_value = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <Bootloader_Jump_TO_User_Application+0x48>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
   printMsg("BL DEBUF MSG: MSP Value = %#x\r\n",msp_value);
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <Bootloader_Jump_TO_User_Application+0x4c>)
 80013fe:	f7ff ff63 	bl	80012c8 <printMsg>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f383 8808 	msr	MSP, r3
   __set_MSP(msp_value);
   // 4-Save the reset handler value
   uint32_t reset_value = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <Bootloader_Jump_TO_User_Application+0x50>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]
   printMsg("BL DEBUF MSG: Reset Value = %#x\r\n",reset_value);
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <Bootloader_Jump_TO_User_Application+0x54>)
 8001416:	f7ff ff57 	bl	80012c8 <printMsg>
   //5-Start a application from reset handler
   bootloader_app_reset_handler = (void*)reset_value;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	607b      	str	r3, [r7, #4]
   //6-Call the reset handler pointer and jump to user app
   bootloader_app_reset_handler();
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4798      	blx	r3



}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08004328 	.word	0x08004328
 8001430:	08008000 	.word	0x08008000
 8001434:	0800435c 	.word	0x0800435c
 8001438:	08008004 	.word	0x08008004
 800143c:	0800437c 	.word	0x0800437c

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001446:	e7fe      	b.n	8001446 <Error_Handler+0x6>

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_MspInit+0x4c>)
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x4c>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_MspInit+0x4c>)
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_MspInit+0x4c>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001486:	2007      	movs	r0, #7
 8001488:	f000 fa32 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_CRC_MspInit+0x3c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10d      	bne.n	80014c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_CRC_MspInit+0x40>)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_CRC_MspInit+0x40>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_CRC_MspInit+0x40>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023000 	.word	0x40023000
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_UART_MspInit+0xec>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12d      	bne.n	800155a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_UART_MspInit+0xf0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001536:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001548:	2307      	movs	r3, #7
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	481f      	ldr	r0, [pc, #124]	; (80015d0 <HAL_UART_MspInit+0xf4>)
 8001554:	f000 fde4 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001558:	e031      	b.n	80015be <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0xf8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d12c      	bne.n	80015be <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_UART_MspInit+0xf0>)
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_UART_MspInit+0xf0>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_UART_MspInit+0xf0>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800159c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ae:	2307      	movs	r3, #7
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <HAL_UART_MspInit+0xfc>)
 80015ba:	f000 fdb1 	bl	8002120 <HAL_GPIO_Init>
}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	; 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40011000 	.word	0x40011000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40004800 	.word	0x40004800
 80015d8:	40020800 	.word	0x40020800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f892 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x50>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x16>
		heap_end = &end;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <_sbrk+0x50>)
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <_sbrk+0x54>)
 8001644:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_sbrk+0x50>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <_sbrk+0x50>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	466a      	mov	r2, sp
 8001656:	4293      	cmp	r3, r2
 8001658:	d907      	bls.n	800166a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800165a:	f001 ffbf 	bl	80035dc <__errno>
 800165e:	4602      	mov	r2, r0
 8001660:	230c      	movs	r3, #12
 8001662:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	e006      	b.n	8001678 <_sbrk+0x48>
	}

	heap_end += incr;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <_sbrk+0x50>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a03      	ldr	r2, [pc, #12]	; (8001680 <_sbrk+0x50>)
 8001674:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000098 	.word	0x20000098
 8001684:	20000268 	.word	0x20000268

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 8001690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f90b 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff feb2 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f915 	bl	800193e <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f8eb 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000000c 	.word	0x2000000c
 8001748:	20000014 	.word	0x20000014
 800174c:	20000010 	.word	0x20000010

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000014 	.word	0x20000014
 8001774:	20000240 	.word	0x20000240

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000240 	.word	0x20000240

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	490d      	ldr	r1, [pc, #52]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	4909      	ldr	r1, [pc, #36]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	2201      	movs	r2, #1
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	401a      	ands	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188e:	2101      	movs	r1, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff90 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff49 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff5e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb0 	bl	80018ac <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e00e      	b.n	8001986 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	795b      	ldrb	r3, [r3, #5]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fd8d 	bl	8001498 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800198e:	b480      	push	{r7}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2202      	movs	r2, #2
 80019a2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	440a      	add	r2, r1
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3f0      	bcc.n	80019aa <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80019d6:	693b      	ldr	r3, [r7, #16]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_FLASH_Program+0xa0>)
 80019f8:	7e1b      	ldrb	r3, [r3, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_FLASH_Program+0x1e>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e03b      	b.n	8001a7a <HAL_FLASH_Program+0x96>
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_FLASH_Program+0xa0>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a0c:	f000 f89c 	bl	8001b48 <FLASH_WaitForLastOperation>
 8001a10:	4603      	mov	r3, r0
 8001a12:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12b      	bne.n	8001a72 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a20:	783b      	ldrb	r3, [r7, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	68b8      	ldr	r0, [r7, #8]
 8001a26:	f000 f943 	bl	8001cb0 <FLASH_Program_Byte>
 8001a2a:	e016      	b.n	8001a5a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a32:	883b      	ldrh	r3, [r7, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f000 f916 	bl	8001c68 <FLASH_Program_HalfWord>
 8001a3c:	e00d      	b.n	8001a5a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d105      	bne.n	8001a50 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	68b8      	ldr	r0, [r7, #8]
 8001a4a:	f000 f8eb 	bl	8001c24 <FLASH_Program_Word>
 8001a4e:	e004      	b.n	8001a5a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a54:	68b8      	ldr	r0, [r7, #8]
 8001a56:	f000 f8b7 	bl	8001bc8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a5e:	f000 f873 	bl	8001b48 <FLASH_WaitForLastOperation>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_FLASH_Program+0xa4>)
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_FLASH_Program+0xa4>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_FLASH_Program+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000244 	.word	0x20000244
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_FLASH_Unlock+0x38>)
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da0b      	bge.n	8001ab6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_FLASH_Unlock+0x38>)
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_FLASH_Unlock+0x3c>)
 8001aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_FLASH_Unlock+0x38>)
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_FLASH_Unlock+0x40>)
 8001aa8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da01      	bge.n	8001ab6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	45670123 	.word	0x45670123
 8001acc:	cdef89ab 	.word	0xcdef89ab

08001ad0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_FLASH_Lock+0x1c>)
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_FLASH_Lock+0x1c>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ade:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_FLASH_OB_Unlock+0x2c>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_FLASH_OB_Unlock+0x2c>)
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_FLASH_OB_Unlock+0x30>)
 8001b04:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_FLASH_OB_Unlock+0x2c>)
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_FLASH_OB_Unlock+0x34>)
 8001b0a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	08192a3b 	.word	0x08192a3b
 8001b24:	4c5d6e7f 	.word	0x4c5d6e7f

08001b28 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b2c:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_FLASH_OB_Lock+0x1c>)
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_FLASH_OB_Lock+0x1c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <FLASH_WaitForLastOperation+0x78>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b5a:	f7ff fe0d 	bl	8001778 <HAL_GetTick>
 8001b5e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b60:	e010      	b.n	8001b84 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d00c      	beq.n	8001b84 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <FLASH_WaitForLastOperation+0x38>
 8001b70:	f7ff fe02 	bl	8001778 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d901      	bls.n	8001b84 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e019      	b.n	8001bb8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <FLASH_WaitForLastOperation+0x7c>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e8      	bne.n	8001b62 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <FLASH_WaitForLastOperation+0x7c>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <FLASH_WaitForLastOperation+0x7c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <FLASH_WaitForLastOperation+0x7c>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001bae:	f000 f8a1 	bl	8001cf4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
  
}  
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000244 	.word	0x20000244
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001bc8:	b4f0      	push	{r4, r5, r6, r7}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <FLASH_Program_DoubleWord+0x58>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001bfe:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	461a      	mov	r2, r3
 8001c08:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001c0c:	0025      	movs	r5, r4
 8001c0e:	2600      	movs	r6, #0
 8001c10:	462b      	mov	r3, r5
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <FLASH_Program_Word+0x40>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_HalfWord+0x44>)
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	801a      	strh	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001cc8:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <FLASH_Program_Byte+0x40>)
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00

08001cf4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d0e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d12:	2210      	movs	r2, #16
 8001d14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d2c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d30:	2220      	movs	r2, #32
 8001d32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d68:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <FLASH_SetErrorCode+0xc8>)
 8001da6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <FLASH_SetErrorCode+0xc4>)
 8001daa:	2202      	movs	r2, #2
 8001dac:	60da      	str	r2, [r3, #12]
  }
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	20000244 	.word	0x20000244

08001dc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <HAL_FLASHEx_Erase+0xdc>)
 8001dd4:	7e1b      	ldrb	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_FLASHEx_Erase+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e05a      	b.n	8001e94 <HAL_FLASHEx_Erase+0xd4>
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_FLASHEx_Erase+0xdc>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff feae 	bl	8001b48 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d14a      	bne.n	8001e8c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d117      	bne.n	8001e36 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f86a 	bl	8001eec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e1c:	f7ff fe94 	bl	8001b48 <FLASH_WaitForLastOperation>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001e24:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_FLASHEx_Erase+0xe0>)
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_FLASHEx_Erase+0xe0>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6113      	str	r3, [r2, #16]
 8001e34:	e028      	b.n	8001e88 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	e01c      	b.n	8001e78 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	68b8      	ldr	r0, [r7, #8]
 8001e48:	f000 f88a 	bl	8001f60 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e50:	f7ff fe7a 	bl	8001b48 <FLASH_WaitForLastOperation>
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e58:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_FLASHEx_Erase+0xe0>)
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_FLASHEx_Erase+0xe0>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001e62:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	601a      	str	r2, [r3, #0]
          break;
 8001e70:	e00a      	b.n	8001e88 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	441a      	add	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8da      	bhi.n	8001e3e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e88:	f000 f904 	bl	8002094 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_FLASHEx_Erase+0xdc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	761a      	strb	r2, [r3, #24]

  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000244 	.word	0x20000244
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	220f      	movs	r2, #15
 8001eb0:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001eb2:	f000 f8b3 	bl	800201c <FLASH_OB_GetWRP>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001ebe:	f000 f8b9 	bl	8002034 <FLASH_OB_GetRDP>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001eca:	f000 f897 	bl	8001ffc <FLASH_OB_GetUser>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001ed6:	f000 f8cd 	bl	8002074 <FLASH_OB_GetBOR>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	615a      	str	r2, [r3, #20]
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <FLASH_MassErase+0x70>)
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <FLASH_MassErase+0x70>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f02:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d108      	bne.n	8001f1c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001f0a:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6113      	str	r3, [r2, #16]
 8001f1a:	e00f      	b.n	8001f3c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6113      	str	r3, [r2, #16]
 8001f2e:	e005      	b.n	8001f3c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <FLASH_MassErase+0x70>)
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	610b      	str	r3, [r1, #16]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	e010      	b.n	8001f9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d103      	bne.n	8001f8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e009      	b.n	8001f9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d103      	bne.n	8001f98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e002      	b.n	8001f9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0b      	cmp	r3, #11
 8001fa2:	d902      	bls.n	8001faa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fb6:	4910      	ldr	r1, [pc, #64]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001fce:	490a      	ldr	r1, [pc, #40]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001fe0:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <FLASH_Erase_Sector+0x98>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6113      	str	r3, [r2, #16]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <FLASH_OB_GetUser+0x1c>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f023 031f 	bic.w	r3, r3, #31
 800200a:	b2db      	uxtb	r3, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023c00 	.word	0x40023c00

0800201c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <FLASH_OB_GetWRP+0x14>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40023c16 	.word	0x40023c16

08002034 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800203a:	23aa      	movs	r3, #170	; 0xaa
 800203c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <FLASH_OB_GetRDP+0x3c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2bcc      	cmp	r3, #204	; 0xcc
 8002046:	d102      	bne.n	800204e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002048:	23cc      	movs	r3, #204	; 0xcc
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	e009      	b.n	8002062 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <FLASH_OB_GetRDP+0x3c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2baa      	cmp	r3, #170	; 0xaa
 8002056:	d102      	bne.n	800205e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002058:	23aa      	movs	r3, #170	; 0xaa
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	e001      	b.n	8002062 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800205e:	2355      	movs	r3, #85	; 0x55
 8002060:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002062:	79fb      	ldrb	r3, [r7, #7]
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40023c15 	.word	0x40023c15

08002074 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <FLASH_OB_GetBOR+0x1c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	b2db      	uxtb	r3, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023c14 	.word	0x40023c14

08002094 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <FLASH_FlushCaches+0x88>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d017      	beq.n	80020d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <FLASH_FlushCaches+0x88>)
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <FLASH_FlushCaches+0x88>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <FLASH_FlushCaches+0x88>)
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <FLASH_FlushCaches+0x88>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <FLASH_FlushCaches+0x88>)
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <FLASH_FlushCaches+0x88>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <FLASH_FlushCaches+0x88>)
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <FLASH_FlushCaches+0x88>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <FLASH_FlushCaches+0x88>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <FLASH_FlushCaches+0x88>)
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <FLASH_FlushCaches+0x88>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <FLASH_FlushCaches+0x88>)
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <FLASH_FlushCaches+0x88>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <FLASH_FlushCaches+0x88>)
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <FLASH_FlushCaches+0x88>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002102:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	4a05      	ldr	r2, [pc, #20]	; (800211c <FLASH_FlushCaches+0x88>)
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <FLASH_FlushCaches+0x88>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210e:	6013      	str	r3, [r2, #0]
  }
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e177      	b.n	800242c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8166 	bne.w	8002426 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80c0 	beq.w	8002426 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_GPIO_Init+0x320>)
 80022ac:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_GPIO_Init+0x320>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b62      	ldr	r3, [pc, #392]	; (8002440 <HAL_GPIO_Init+0x320>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a60      	ldr	r2, [pc, #384]	; (8002444 <HAL_GPIO_Init+0x324>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_GPIO_Init+0x328>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d037      	beq.n	800235e <HAL_GPIO_Init+0x23e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_GPIO_Init+0x32c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_GPIO_Init+0x23a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a55      	ldr	r2, [pc, #340]	; (8002450 <HAL_GPIO_Init+0x330>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <HAL_GPIO_Init+0x236>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a54      	ldr	r2, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x334>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x232>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a53      	ldr	r2, [pc, #332]	; (8002458 <HAL_GPIO_Init+0x338>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x22e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x33c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x22a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_GPIO_Init+0x340>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x226>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a50      	ldr	r2, [pc, #320]	; (8002464 <HAL_GPIO_Init+0x344>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x222>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x348>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x21e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_GPIO_Init+0x34c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x21a>
 8002336:	2309      	movs	r3, #9
 8002338:	e012      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800233a:	230a      	movs	r3, #10
 800233c:	e010      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800233e:	2308      	movs	r3, #8
 8002340:	e00e      	b.n	8002360 <HAL_GPIO_Init+0x240>
 8002342:	2307      	movs	r3, #7
 8002344:	e00c      	b.n	8002360 <HAL_GPIO_Init+0x240>
 8002346:	2306      	movs	r3, #6
 8002348:	e00a      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800234a:	2305      	movs	r3, #5
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800234e:	2304      	movs	r3, #4
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x240>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x240>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x240>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4934      	ldr	r1, [pc, #208]	; (8002444 <HAL_GPIO_Init+0x324>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_GPIO_Init+0x350>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a33      	ldr	r2, [pc, #204]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a28      	ldr	r2, [pc, #160]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_GPIO_Init+0x350>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <HAL_GPIO_Init+0x350>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f ae84 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	3724      	adds	r7, #36	; 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40021c00 	.word	0x40021c00
 8002468:	40022000 	.word	0x40022000
 800246c:	40022400 	.word	0x40022400
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_PWREx_EnableOverDrive+0x90>)
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_PWREx_EnableOverDrive+0x90>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_PWREx_EnableOverDrive+0x90>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_PWREx_EnableOverDrive+0x94>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff f938 	bl	8001778 <HAL_GetTick>
 8002508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800250a:	e009      	b.n	8002520 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800250c:	f7ff f934 	bl	8001778 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251a:	d901      	bls.n	8002520 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e01f      	b.n	8002560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d1ee      	bne.n	800250c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002534:	f7ff f920 	bl	8001778 <HAL_GetTick>
 8002538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800253a:	e009      	b.n	8002550 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800253c:	f7ff f91c 	bl	8001778 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254a:	d901      	bls.n	8002550 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e007      	b.n	8002560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800255c:	d1ee      	bne.n	800253c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40023800 	.word	0x40023800
 800256c:	420e0040 	.word	0x420e0040
 8002570:	40007000 	.word	0x40007000
 8002574:	420e0044 	.word	0x420e0044

08002578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e264      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d075      	beq.n	8002682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	4ba3      	ldr	r3, [pc, #652]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e23f      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x74>
 80025de:	4a91      	ldr	r2, [pc, #580]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4a8b      	ldr	r2, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	4b8a      	ldr	r3, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4a88      	ldr	r2, [pc, #544]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	4b87      	ldr	r3, [pc, #540]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 8002610:	4a84      	ldr	r2, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	4b84      	ldr	r3, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4a81      	ldr	r2, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	4b81      	ldr	r3, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff f8a2 	bl	8001778 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff f89e 	bl	8001778 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e204      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xc0>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff f88e 	bl	8001778 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f88a 	bl	8001778 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1f0      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1c4      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4956      	ldr	r1, [pc, #344]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_OscConfig+0x2b0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff f843 	bl	8001778 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff f83f 	bl	8001778 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1a5      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4943      	ldr	r1, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x2b0>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7ff f822 	bl	8001778 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7ff f81e 	bl	8001778 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e184      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d030      	beq.n	80027c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_RCC_OscConfig+0x2b4>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7ff f802 	bl	8001778 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fffe 	bl	8001778 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e164      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x200>
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x2b4>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe ffeb 	bl	8001778 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe ffe7 	bl	8001778 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e14d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a0 	beq.w	8002912 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10f      	bne.n	8002802 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d121      	bne.n	8002852 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7fe ffad 	bl	8001778 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	e011      	b.n	8002846 <HAL_RCC_OscConfig+0x2ce>
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	42470000 	.word	0x42470000
 800282c:	42470e80 	.word	0x42470e80
 8002830:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe ffa0 	bl	8001778 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e106      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b85      	ldr	r3, [pc, #532]	; (8002a5c <HAL_RCC_OscConfig+0x4e4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x2f0>
 800285a:	4a81      	ldr	r2, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800285c:	4b80      	ldr	r3, [pc, #512]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	e01c      	b.n	80028a2 <HAL_RCC_OscConfig+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b05      	cmp	r3, #5
 800286e:	d10c      	bne.n	800288a <HAL_RCC_OscConfig+0x312>
 8002870:	4a7b      	ldr	r2, [pc, #492]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002872:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4a78      	ldr	r2, [pc, #480]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	e00b      	b.n	80028a2 <HAL_RCC_OscConfig+0x32a>
 800288a:	4a75      	ldr	r2, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800288c:	4b74      	ldr	r3, [pc, #464]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002898:	4b71      	ldr	r3, [pc, #452]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d015      	beq.n	80028d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe ff65 	bl	8001778 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe ff61 	bl	8001778 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0c5      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ee      	beq.n	80028b2 <HAL_RCC_OscConfig+0x33a>
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe ff4f 	bl	8001778 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe ff4b 	bl	8001778 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0af      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ee      	bne.n	80028de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d105      	bne.n	8002912 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 809b 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d05c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d141      	bne.n	80029b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_OscConfig+0x4ec>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe ff1f 	bl	8001778 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe ff1b 	bl	8001778 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e081      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295c:	4940      	ldr	r1, [pc, #256]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x4ec>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fef4 	bl	8001778 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fef0 	bl	8001778 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e056      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x41c>
 80029b2:	e04e      	b.n	8002a52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fedd 	bl	8001778 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fed9 	bl	8001778 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03f      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x44a>
 80029e0:	e037      	b.n	8002a52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e032      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_RCC_OscConfig+0x4e8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d028      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d121      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d11a      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d111      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470060 	.word	0x42470060

08002a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0cc      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4a59      	ldr	r2, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4a53      	ldr	r2, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4950      	ldr	r1, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d044      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e067      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4937      	ldr	r1, [pc, #220]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fe0e 	bl	8001778 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fe fe0a 	bl	8001778 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e04f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4919      	ldr	r1, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	fa21 f303 	lsr.w	r3, r1, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fd6e 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	080043a0 	.word	0x080043a0
 8002c2c:	2000000c 	.word	0x2000000c
 8002c30:	20000010 	.word	0x20000010

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c38:	b08f      	sub	sp, #60	; 0x3c
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 80b2 	bne.w	8002dc6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c62:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002c66:	e0b1      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c6c:	e0ae      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c78:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d04e      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	f04f 0400 	mov.w	r4, #0
 8002c8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	ea01 0103 	and.w	r1, r1, r3
 8002c9a:	ea02 0204 	and.w	r2, r2, r4
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	0160      	lsls	r0, r4, #5
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24
 8002cae:	015b      	lsls	r3, r3, #5
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002cb6:	1a5b      	subs	r3, r3, r1
 8002cb8:	eb64 0402 	sbc.w	r4, r4, r2
 8002cbc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002cc0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002cc4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002cc8:	ebb8 0803 	subs.w	r8, r8, r3
 8002ccc:	eb69 0904 	sbc.w	r9, r9, r4
 8002cd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002ce8:	eb18 0801 	adds.w	r8, r8, r1
 8002cec:	eb49 0902 	adc.w	r9, r9, r2
 8002cf0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	f04f 0400 	mov.w	r4, #0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4623      	mov	r3, r4
 8002d16:	f7fd fac3 	bl	80002a0 <__aeabi_uldivmod>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d20:	e043      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	f04f 0400 	mov.w	r4, #0
 8002d2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	ea01 0103 	and.w	r1, r1, r3
 8002d38:	ea02 0204 	and.w	r2, r2, r4
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	0160      	lsls	r0, r4, #5
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002d54:	1a5b      	subs	r3, r3, r1
 8002d56:	eb64 0402 	sbc.w	r4, r4, r2
 8002d5a:	01a6      	lsls	r6, r4, #6
 8002d5c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002d60:	019d      	lsls	r5, r3, #6
 8002d62:	1aed      	subs	r5, r5, r3
 8002d64:	eb66 0604 	sbc.w	r6, r6, r4
 8002d68:	00f3      	lsls	r3, r6, #3
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	00eb      	lsls	r3, r5, #3
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002d7c:	186d      	adds	r5, r5, r1
 8002d7e:	eb46 0602 	adc.w	r6, r6, r2
 8002d82:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002d86:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002d8a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002d8e:	4655      	mov	r5, sl
 8002d90:	465e      	mov	r6, fp
 8002d92:	4628      	mov	r0, r5
 8002d94:	4631      	mov	r1, r6
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	f7fd fa7e 	bl	80002a0 <__aeabi_uldivmod>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	3301      	adds	r3, #1
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dc4:	e002      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	373c      	adds	r7, #60	; 0x3c
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000000c 	.word	0x2000000c

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080043b0 	.word	0x080043b0

08002e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e28:	f7ff ffdc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	080043b0 	.word	0x080043b0

08002e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e03f      	b.n	8002ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe fb32 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9c9 	bl	8003228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	6912      	ldr	r2, [r2, #16]
 8002ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6952      	ldr	r2, [r2, #20]
 8002eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	68d2      	ldr	r2, [r2, #12]
 8002ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08a      	sub	sp, #40	; 0x28
 8002eea:	af02      	add	r7, sp, #8
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d17b      	bne.n	8002ffe <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_UART_Transmit+0x2c>
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e074      	b.n	8003000 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_UART_Transmit+0x3e>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e06d      	b.n	8003000 <HAL_UART_Transmit+0x11a>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2221      	movs	r2, #33	; 0x21
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3a:	f7fe fc1d 	bl	8001778 <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d108      	bne.n	8002f68 <HAL_UART_Transmit+0x82>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e003      	b.n	8002f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f78:	e029      	b.n	8002fce <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f8e1 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e035      	b.n	8003000 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	8812      	ldrh	r2, [r2, #0]
 8002fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	3302      	adds	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e007      	b.n	8002fc0 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1d0      	bne.n	8002f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2140      	movs	r1, #64	; 0x40
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8b2 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e006      	b.n	8003000 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b20      	cmp	r3, #32
 8003026:	f040 808c 	bne.w	8003142 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_UART_Receive+0x2e>
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e084      	b.n	8003144 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_UART_Receive+0x40>
 8003044:	2302      	movs	r3, #2
 8003046:	e07d      	b.n	8003144 <HAL_UART_Receive+0x13c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2222      	movs	r2, #34	; 0x22
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003064:	f7fe fb88 	bl	8001778 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d108      	bne.n	8003092 <HAL_UART_Receive+0x8a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e003      	b.n	800309a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030a2:	e043      	b.n	800312c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2120      	movs	r1, #32
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f84c 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e042      	b.n	8003144 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e01f      	b.n	800311e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d007      	beq.n	80030f8 <HAL_UART_Receive+0xf0>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_UART_Receive+0xfe>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1b6      	bne.n	80030a4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e050      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d04c      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x30>
 800316c:	f7fe fb04 	bl	8001778 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad2      	subs	r2, r2, r3
 8003176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003178:	429a      	cmp	r2, r3
 800317a:	d941      	bls.n	8003200 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800319c:	637a      	str	r2, [r7, #52]	; 0x34
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e5      	bne.n	800317c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	613b      	str	r3, [r7, #16]
   return(result);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d0:	623a      	str	r2, [r7, #32]
 80031d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	69f9      	ldr	r1, [r7, #28]
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e5      	bne.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e00f      	b.n	8003220 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	401a      	ands	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	429a      	cmp	r2, r3
 800321c:	d09f      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3740      	adds	r7, #64	; 0x40
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	b091      	sub	sp, #68	; 0x44
 800322e:	af00      	add	r7, sp, #0
 8003230:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4313      	orrs	r3, r2
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 800326e:	f022 020c 	bic.w	r2, r2, #12
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4bba      	ldr	r3, [pc, #744]	; (800357c <UART_SetConfig+0x354>)
 8003294:	429a      	cmp	r2, r3
 8003296:	d004      	beq.n	80032a2 <UART_SetConfig+0x7a>
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4bb8      	ldr	r3, [pc, #736]	; (8003580 <UART_SetConfig+0x358>)
 800329e:	429a      	cmp	r2, r3
 80032a0:	d103      	bne.n	80032aa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a2:	f7ff fdbf 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 80032a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80032a8:	e002      	b.n	80032b0 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032aa:	f7ff fda7 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 80032ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	f040 80a7 	bne.w	800340a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	4619      	mov	r1, r3
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4614      	mov	r4, r2
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	eb44 0404 	adc.w	r4, r4, r4
 80032d4:	185b      	adds	r3, r3, r1
 80032d6:	eb44 0402 	adc.w	r4, r4, r2
 80032da:	00e0      	lsls	r0, r4, #3
 80032dc:	6178      	str	r0, [r7, #20]
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80032e4:	6178      	str	r0, [r7, #20]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032ee:	185d      	adds	r5, r3, r1
 80032f0:	eb44 0602 	adc.w	r6, r4, r2
 80032f4:	4628      	mov	r0, r5
 80032f6:	4631      	mov	r1, r6
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	18db      	adds	r3, r3, r3
 8003302:	eb44 0404 	adc.w	r4, r4, r4
 8003306:	461a      	mov	r2, r3
 8003308:	4623      	mov	r3, r4
 800330a:	f7fc ffc9 	bl	80002a0 <__aeabi_uldivmod>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4b9b      	ldr	r3, [pc, #620]	; (8003584 <UART_SetConfig+0x35c>)
 8003316:	fba3 2302 	umull	r2, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	011e      	lsls	r6, r3, #4
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	460b      	mov	r3, r1
 8003328:	4614      	mov	r4, r2
 800332a:	18db      	adds	r3, r3, r3
 800332c:	eb44 0404 	adc.w	r4, r4, r4
 8003330:	185b      	adds	r3, r3, r1
 8003332:	eb44 0402 	adc.w	r4, r4, r2
 8003336:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800333a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800333e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003342:	4653      	mov	r3, sl
 8003344:	465c      	mov	r4, fp
 8003346:	eb13 0a01 	adds.w	sl, r3, r1
 800334a:	eb44 0b02 	adc.w	fp, r4, r2
 800334e:	4650      	mov	r0, sl
 8003350:	4659      	mov	r1, fp
 8003352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f04f 0400 	mov.w	r4, #0
 800335a:	18db      	adds	r3, r3, r3
 800335c:	eb44 0404 	adc.w	r4, r4, r4
 8003360:	461a      	mov	r2, r3
 8003362:	4623      	mov	r3, r4
 8003364:	f7fc ff9c 	bl	80002a0 <__aeabi_uldivmod>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	461a      	mov	r2, r3
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <UART_SetConfig+0x35c>)
 8003370:	fba3 1302 	umull	r1, r3, r3, r2
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	2164      	movs	r1, #100	; 0x64
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	3332      	adds	r3, #50	; 0x32
 8003382:	4a80      	ldr	r2, [pc, #512]	; (8003584 <UART_SetConfig+0x35c>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003390:	441e      	add	r6, r3
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	4619      	mov	r1, r3
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	460b      	mov	r3, r1
 800339c:	4614      	mov	r4, r2
 800339e:	18db      	adds	r3, r3, r3
 80033a0:	eb44 0404 	adc.w	r4, r4, r4
 80033a4:	185b      	adds	r3, r3, r1
 80033a6:	eb44 0402 	adc.w	r4, r4, r2
 80033aa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80033ae:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80033b2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80033b6:	4643      	mov	r3, r8
 80033b8:	464c      	mov	r4, r9
 80033ba:	eb13 0801 	adds.w	r8, r3, r1
 80033be:	eb44 0902 	adc.w	r9, r4, r2
 80033c2:	4640      	mov	r0, r8
 80033c4:	4649      	mov	r1, r9
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	18db      	adds	r3, r3, r3
 80033d0:	eb44 0404 	adc.w	r4, r4, r4
 80033d4:	461a      	mov	r2, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	f7fc ff62 	bl	80002a0 <__aeabi_uldivmod>
 80033dc:	4603      	mov	r3, r0
 80033de:	460c      	mov	r4, r1
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b68      	ldr	r3, [pc, #416]	; (8003584 <UART_SetConfig+0x35c>)
 80033e4:	fba3 1302 	umull	r1, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	2164      	movs	r1, #100	; 0x64
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	3332      	adds	r3, #50	; 0x32
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <UART_SetConfig+0x35c>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	4433      	add	r3, r6
 8003404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003406:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003408:	e0b3      	b.n	8003572 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	4619      	mov	r1, r3
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	460b      	mov	r3, r1
 800341a:	4614      	mov	r4, r2
 800341c:	18db      	adds	r3, r3, r3
 800341e:	eb44 0404 	adc.w	r4, r4, r4
 8003422:	185b      	adds	r3, r3, r1
 8003424:	eb44 0402 	adc.w	r4, r4, r2
 8003428:	00e6      	lsls	r6, r4, #3
 800342a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800342e:	00dd      	lsls	r5, r3, #3
 8003430:	462b      	mov	r3, r5
 8003432:	4634      	mov	r4, r6
 8003434:	185d      	adds	r5, r3, r1
 8003436:	eb44 0602 	adc.w	r6, r4, r2
 800343a:	4628      	mov	r0, r5
 800343c:	4631      	mov	r1, r6
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f04f 0400 	mov.w	r4, #0
 8003446:	00a5      	lsls	r5, r4, #2
 8003448:	62fd      	str	r5, [r7, #44]	; 0x2c
 800344a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800344c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003450:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003452:	009c      	lsls	r4, r3, #2
 8003454:	62bc      	str	r4, [r7, #40]	; 0x28
 8003456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800345a:	f7fc ff21 	bl	80002a0 <__aeabi_uldivmod>
 800345e:	4603      	mov	r3, r0
 8003460:	460c      	mov	r4, r1
 8003462:	461a      	mov	r2, r3
 8003464:	4b47      	ldr	r3, [pc, #284]	; (8003584 <UART_SetConfig+0x35c>)
 8003466:	fba3 1302 	umull	r1, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011d      	lsls	r5, r3, #4
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	460b      	mov	r3, r1
 8003478:	4614      	mov	r4, r2
 800347a:	18db      	adds	r3, r3, r3
 800347c:	eb44 0404 	adc.w	r4, r4, r4
 8003480:	185b      	adds	r3, r3, r1
 8003482:	eb44 0402 	adc.w	r4, r4, r2
 8003486:	00e0      	lsls	r0, r4, #3
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	00d8      	lsls	r0, r3, #3
 8003494:	60b8      	str	r0, [r7, #8]
 8003496:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800349a:	eb13 0801 	adds.w	r8, r3, r1
 800349e:	eb44 0902 	adc.w	r9, r4, r2
 80034a2:	4640      	mov	r0, r8
 80034a4:	4649      	mov	r1, r9
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f04f 0400 	mov.w	r4, #0
 80034ae:	00a6      	lsls	r6, r4, #2
 80034b0:	627e      	str	r6, [r7, #36]	; 0x24
 80034b2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80034b4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80034b8:	627e      	str	r6, [r7, #36]	; 0x24
 80034ba:	009c      	lsls	r4, r3, #2
 80034bc:	623c      	str	r4, [r7, #32]
 80034be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034c2:	f7fc feed 	bl	80002a0 <__aeabi_uldivmod>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <UART_SetConfig+0x35c>)
 80034ce:	fba3 1302 	umull	r1, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2164      	movs	r1, #100	; 0x64
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <UART_SetConfig+0x35c>)
 80034e2:	fba2 1303 	umull	r1, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	441d      	add	r5, r3
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	4619      	mov	r1, r3
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4614      	mov	r4, r2
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	eb44 0404 	adc.w	r4, r4, r4
 8003500:	185b      	adds	r3, r3, r1
 8003502:	eb44 0402 	adc.w	r4, r4, r2
 8003506:	00e0      	lsls	r0, r4, #3
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	00d8      	lsls	r0, r3, #3
 8003514:	6038      	str	r0, [r7, #0]
 8003516:	e897 0018 	ldmia.w	r7, {r3, r4}
 800351a:	eb13 0801 	adds.w	r8, r3, r1
 800351e:	eb44 0902 	adc.w	r9, r4, r2
 8003522:	4640      	mov	r0, r8
 8003524:	4649      	mov	r1, r9
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	00a6      	lsls	r6, r4, #2
 8003530:	61fe      	str	r6, [r7, #28]
 8003532:	69fe      	ldr	r6, [r7, #28]
 8003534:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003538:	61fe      	str	r6, [r7, #28]
 800353a:	009c      	lsls	r4, r3, #2
 800353c:	61bc      	str	r4, [r7, #24]
 800353e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003542:	f7fc fead 	bl	80002a0 <__aeabi_uldivmod>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	461a      	mov	r2, r3
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <UART_SetConfig+0x35c>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <UART_SetConfig+0x35c>)
 8003562:	fba2 1303 	umull	r1, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	442b      	add	r3, r5
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]
}
 8003572:	bf00      	nop
 8003574:	3744      	adds	r7, #68	; 0x44
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357c:	40011000 	.word	0x40011000
 8003580:	40011400 	.word	0x40011400
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800358c:	480d      	ldr	r0, [pc, #52]	; (80035c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800358e:	490e      	ldr	r1, [pc, #56]	; (80035c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003590:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003594:	e002      	b.n	800359c <LoopCopyDataInit>

08003596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800359a:	3304      	adds	r3, #4

0800359c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800359c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800359e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a0:	d3f9      	bcc.n	8003596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035a4:	4c0b      	ldr	r4, [pc, #44]	; (80035d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a8:	e001      	b.n	80035ae <LoopFillZerobss>

080035aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ac:	3204      	adds	r2, #4

080035ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b0:	d3fb      	bcc.n	80035aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035b2:	f7fe f869 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b6:	f000 f817 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ba:	f7fd fd25 	bl	8001008 <main>
  bx  lr    
 80035be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80035c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80035cc:	080043fc 	.word	0x080043fc
  ldr r2, =_sbss
 80035d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80035d4:	20000268 	.word	0x20000268

080035d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d8:	e7fe      	b.n	80035d8 <ADC_IRQHandler>
	...

080035dc <__errno>:
 80035dc:	4b01      	ldr	r3, [pc, #4]	; (80035e4 <__errno+0x8>)
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000018 	.word	0x20000018

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4e0d      	ldr	r6, [pc, #52]	; (8003620 <__libc_init_array+0x38>)
 80035ec:	4c0d      	ldr	r4, [pc, #52]	; (8003624 <__libc_init_array+0x3c>)
 80035ee:	1ba4      	subs	r4, r4, r6
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	2500      	movs	r5, #0
 80035f4:	42a5      	cmp	r5, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	4e0b      	ldr	r6, [pc, #44]	; (8003628 <__libc_init_array+0x40>)
 80035fa:	4c0c      	ldr	r4, [pc, #48]	; (800362c <__libc_init_array+0x44>)
 80035fc:	f000 fc3c 	bl	8003e78 <_init>
 8003600:	1ba4      	subs	r4, r4, r6
 8003602:	10a4      	asrs	r4, r4, #2
 8003604:	2500      	movs	r5, #0
 8003606:	42a5      	cmp	r5, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003610:	4798      	blx	r3
 8003612:	3501      	adds	r5, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800361a:	4798      	blx	r3
 800361c:	3501      	adds	r5, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	080043f4 	.word	0x080043f4
 8003624:	080043f4 	.word	0x080043f4
 8003628:	080043f4 	.word	0x080043f4
 800362c:	080043f8 	.word	0x080043f8

08003630 <memset>:
 8003630:	4402      	add	r2, r0
 8003632:	4603      	mov	r3, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	d100      	bne.n	800363a <memset+0xa>
 8003638:	4770      	bx	lr
 800363a:	f803 1b01 	strb.w	r1, [r3], #1
 800363e:	e7f9      	b.n	8003634 <memset+0x4>

08003640 <_vsiprintf_r>:
 8003640:	b510      	push	{r4, lr}
 8003642:	b09a      	sub	sp, #104	; 0x68
 8003644:	f44f 7402 	mov.w	r4, #520	; 0x208
 8003648:	9100      	str	r1, [sp, #0]
 800364a:	9104      	str	r1, [sp, #16]
 800364c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003650:	9102      	str	r1, [sp, #8]
 8003652:	9105      	str	r1, [sp, #20]
 8003654:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003658:	f8ad 100e 	strh.w	r1, [sp, #14]
 800365c:	4669      	mov	r1, sp
 800365e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003662:	f000 f86b 	bl	800373c <_svfiprintf_r>
 8003666:	9b00      	ldr	r3, [sp, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	b01a      	add	sp, #104	; 0x68
 800366e:	bd10      	pop	{r4, pc}

08003670 <vsiprintf>:
 8003670:	4613      	mov	r3, r2
 8003672:	460a      	mov	r2, r1
 8003674:	4601      	mov	r1, r0
 8003676:	4802      	ldr	r0, [pc, #8]	; (8003680 <vsiprintf+0x10>)
 8003678:	6800      	ldr	r0, [r0, #0]
 800367a:	f7ff bfe1 	b.w	8003640 <_vsiprintf_r>
 800367e:	bf00      	nop
 8003680:	20000018 	.word	0x20000018

08003684 <__ssputs_r>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	688e      	ldr	r6, [r1, #8]
 800368a:	429e      	cmp	r6, r3
 800368c:	4682      	mov	sl, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4691      	mov	r9, r2
 8003692:	4698      	mov	r8, r3
 8003694:	d835      	bhi.n	8003702 <__ssputs_r+0x7e>
 8003696:	898a      	ldrh	r2, [r1, #12]
 8003698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800369c:	d031      	beq.n	8003702 <__ssputs_r+0x7e>
 800369e:	6825      	ldr	r5, [r4, #0]
 80036a0:	6909      	ldr	r1, [r1, #16]
 80036a2:	1a6f      	subs	r7, r5, r1
 80036a4:	6965      	ldr	r5, [r4, #20]
 80036a6:	2302      	movs	r3, #2
 80036a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80036b0:	f108 0301 	add.w	r3, r8, #1
 80036b4:	443b      	add	r3, r7
 80036b6:	429d      	cmp	r5, r3
 80036b8:	bf38      	it	cc
 80036ba:	461d      	movcc	r5, r3
 80036bc:	0553      	lsls	r3, r2, #21
 80036be:	d531      	bpl.n	8003724 <__ssputs_r+0xa0>
 80036c0:	4629      	mov	r1, r5
 80036c2:	f000 fb39 	bl	8003d38 <_malloc_r>
 80036c6:	4606      	mov	r6, r0
 80036c8:	b950      	cbnz	r0, 80036e0 <__ssputs_r+0x5c>
 80036ca:	230c      	movs	r3, #12
 80036cc:	f8ca 3000 	str.w	r3, [sl]
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d6:	81a3      	strh	r3, [r4, #12]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	463a      	mov	r2, r7
 80036e2:	6921      	ldr	r1, [r4, #16]
 80036e4:	f000 fab4 	bl	8003c50 <memcpy>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	6126      	str	r6, [r4, #16]
 80036f6:	6165      	str	r5, [r4, #20]
 80036f8:	443e      	add	r6, r7
 80036fa:	1bed      	subs	r5, r5, r7
 80036fc:	6026      	str	r6, [r4, #0]
 80036fe:	60a5      	str	r5, [r4, #8]
 8003700:	4646      	mov	r6, r8
 8003702:	4546      	cmp	r6, r8
 8003704:	bf28      	it	cs
 8003706:	4646      	movcs	r6, r8
 8003708:	4632      	mov	r2, r6
 800370a:	4649      	mov	r1, r9
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	f000 faaa 	bl	8003c66 <memmove>
 8003712:	68a3      	ldr	r3, [r4, #8]
 8003714:	1b9b      	subs	r3, r3, r6
 8003716:	60a3      	str	r3, [r4, #8]
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	441e      	add	r6, r3
 800371c:	6026      	str	r6, [r4, #0]
 800371e:	2000      	movs	r0, #0
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003724:	462a      	mov	r2, r5
 8003726:	f000 fb65 	bl	8003df4 <_realloc_r>
 800372a:	4606      	mov	r6, r0
 800372c:	2800      	cmp	r0, #0
 800372e:	d1e1      	bne.n	80036f4 <__ssputs_r+0x70>
 8003730:	6921      	ldr	r1, [r4, #16]
 8003732:	4650      	mov	r0, sl
 8003734:	f000 fab2 	bl	8003c9c <_free_r>
 8003738:	e7c7      	b.n	80036ca <__ssputs_r+0x46>
	...

0800373c <_svfiprintf_r>:
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003740:	b09d      	sub	sp, #116	; 0x74
 8003742:	4680      	mov	r8, r0
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	898b      	ldrh	r3, [r1, #12]
 8003748:	061c      	lsls	r4, r3, #24
 800374a:	460d      	mov	r5, r1
 800374c:	4616      	mov	r6, r2
 800374e:	d50f      	bpl.n	8003770 <_svfiprintf_r+0x34>
 8003750:	690b      	ldr	r3, [r1, #16]
 8003752:	b96b      	cbnz	r3, 8003770 <_svfiprintf_r+0x34>
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	f000 faef 	bl	8003d38 <_malloc_r>
 800375a:	6028      	str	r0, [r5, #0]
 800375c:	6128      	str	r0, [r5, #16]
 800375e:	b928      	cbnz	r0, 800376c <_svfiprintf_r+0x30>
 8003760:	230c      	movs	r3, #12
 8003762:	f8c8 3000 	str.w	r3, [r8]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	e0c5      	b.n	80038f8 <_svfiprintf_r+0x1bc>
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	616b      	str	r3, [r5, #20]
 8003770:	2300      	movs	r3, #0
 8003772:	9309      	str	r3, [sp, #36]	; 0x24
 8003774:	2320      	movs	r3, #32
 8003776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377a:	2330      	movs	r3, #48	; 0x30
 800377c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003780:	f04f 0b01 	mov.w	fp, #1
 8003784:	4637      	mov	r7, r6
 8003786:	463c      	mov	r4, r7
 8003788:	f814 3b01 	ldrb.w	r3, [r4], #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13c      	bne.n	800380a <_svfiprintf_r+0xce>
 8003790:	ebb7 0a06 	subs.w	sl, r7, r6
 8003794:	d00b      	beq.n	80037ae <_svfiprintf_r+0x72>
 8003796:	4653      	mov	r3, sl
 8003798:	4632      	mov	r2, r6
 800379a:	4629      	mov	r1, r5
 800379c:	4640      	mov	r0, r8
 800379e:	f7ff ff71 	bl	8003684 <__ssputs_r>
 80037a2:	3001      	adds	r0, #1
 80037a4:	f000 80a3 	beq.w	80038ee <_svfiprintf_r+0x1b2>
 80037a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037aa:	4453      	add	r3, sl
 80037ac:	9309      	str	r3, [sp, #36]	; 0x24
 80037ae:	783b      	ldrb	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 809c 	beq.w	80038ee <_svfiprintf_r+0x1b2>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	9307      	str	r3, [sp, #28]
 80037c0:	9205      	str	r2, [sp, #20]
 80037c2:	9306      	str	r3, [sp, #24]
 80037c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037c8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ca:	2205      	movs	r2, #5
 80037cc:	7821      	ldrb	r1, [r4, #0]
 80037ce:	4850      	ldr	r0, [pc, #320]	; (8003910 <_svfiprintf_r+0x1d4>)
 80037d0:	f7fc fd16 	bl	8000200 <memchr>
 80037d4:	1c67      	adds	r7, r4, #1
 80037d6:	9b04      	ldr	r3, [sp, #16]
 80037d8:	b9d8      	cbnz	r0, 8003812 <_svfiprintf_r+0xd6>
 80037da:	06d9      	lsls	r1, r3, #27
 80037dc:	bf44      	itt	mi
 80037de:	2220      	movmi	r2, #32
 80037e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037e4:	071a      	lsls	r2, r3, #28
 80037e6:	bf44      	itt	mi
 80037e8:	222b      	movmi	r2, #43	; 0x2b
 80037ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037ee:	7822      	ldrb	r2, [r4, #0]
 80037f0:	2a2a      	cmp	r2, #42	; 0x2a
 80037f2:	d016      	beq.n	8003822 <_svfiprintf_r+0xe6>
 80037f4:	9a07      	ldr	r2, [sp, #28]
 80037f6:	2100      	movs	r1, #0
 80037f8:	200a      	movs	r0, #10
 80037fa:	4627      	mov	r7, r4
 80037fc:	3401      	adds	r4, #1
 80037fe:	783b      	ldrb	r3, [r7, #0]
 8003800:	3b30      	subs	r3, #48	; 0x30
 8003802:	2b09      	cmp	r3, #9
 8003804:	d951      	bls.n	80038aa <_svfiprintf_r+0x16e>
 8003806:	b1c9      	cbz	r1, 800383c <_svfiprintf_r+0x100>
 8003808:	e011      	b.n	800382e <_svfiprintf_r+0xf2>
 800380a:	2b25      	cmp	r3, #37	; 0x25
 800380c:	d0c0      	beq.n	8003790 <_svfiprintf_r+0x54>
 800380e:	4627      	mov	r7, r4
 8003810:	e7b9      	b.n	8003786 <_svfiprintf_r+0x4a>
 8003812:	4a3f      	ldr	r2, [pc, #252]	; (8003910 <_svfiprintf_r+0x1d4>)
 8003814:	1a80      	subs	r0, r0, r2
 8003816:	fa0b f000 	lsl.w	r0, fp, r0
 800381a:	4318      	orrs	r0, r3
 800381c:	9004      	str	r0, [sp, #16]
 800381e:	463c      	mov	r4, r7
 8003820:	e7d3      	b.n	80037ca <_svfiprintf_r+0x8e>
 8003822:	9a03      	ldr	r2, [sp, #12]
 8003824:	1d11      	adds	r1, r2, #4
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	9103      	str	r1, [sp, #12]
 800382a:	2a00      	cmp	r2, #0
 800382c:	db01      	blt.n	8003832 <_svfiprintf_r+0xf6>
 800382e:	9207      	str	r2, [sp, #28]
 8003830:	e004      	b.n	800383c <_svfiprintf_r+0x100>
 8003832:	4252      	negs	r2, r2
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	9207      	str	r2, [sp, #28]
 800383a:	9304      	str	r3, [sp, #16]
 800383c:	783b      	ldrb	r3, [r7, #0]
 800383e:	2b2e      	cmp	r3, #46	; 0x2e
 8003840:	d10e      	bne.n	8003860 <_svfiprintf_r+0x124>
 8003842:	787b      	ldrb	r3, [r7, #1]
 8003844:	2b2a      	cmp	r3, #42	; 0x2a
 8003846:	f107 0101 	add.w	r1, r7, #1
 800384a:	d132      	bne.n	80038b2 <_svfiprintf_r+0x176>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	9203      	str	r2, [sp, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	bfb8      	it	lt
 8003858:	f04f 33ff 	movlt.w	r3, #4294967295
 800385c:	3702      	adds	r7, #2
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	4c2c      	ldr	r4, [pc, #176]	; (8003914 <_svfiprintf_r+0x1d8>)
 8003862:	7839      	ldrb	r1, [r7, #0]
 8003864:	2203      	movs	r2, #3
 8003866:	4620      	mov	r0, r4
 8003868:	f7fc fcca 	bl	8000200 <memchr>
 800386c:	b138      	cbz	r0, 800387e <_svfiprintf_r+0x142>
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	1b00      	subs	r0, r0, r4
 8003872:	fa03 f000 	lsl.w	r0, r3, r0
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	4303      	orrs	r3, r0
 800387a:	9304      	str	r3, [sp, #16]
 800387c:	3701      	adds	r7, #1
 800387e:	7839      	ldrb	r1, [r7, #0]
 8003880:	4825      	ldr	r0, [pc, #148]	; (8003918 <_svfiprintf_r+0x1dc>)
 8003882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003886:	2206      	movs	r2, #6
 8003888:	1c7e      	adds	r6, r7, #1
 800388a:	f7fc fcb9 	bl	8000200 <memchr>
 800388e:	2800      	cmp	r0, #0
 8003890:	d035      	beq.n	80038fe <_svfiprintf_r+0x1c2>
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <_svfiprintf_r+0x1e0>)
 8003894:	b9fb      	cbnz	r3, 80038d6 <_svfiprintf_r+0x19a>
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	3307      	adds	r3, #7
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	3308      	adds	r3, #8
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a4:	444b      	add	r3, r9
 80038a6:	9309      	str	r3, [sp, #36]	; 0x24
 80038a8:	e76c      	b.n	8003784 <_svfiprintf_r+0x48>
 80038aa:	fb00 3202 	mla	r2, r0, r2, r3
 80038ae:	2101      	movs	r1, #1
 80038b0:	e7a3      	b.n	80037fa <_svfiprintf_r+0xbe>
 80038b2:	2300      	movs	r3, #0
 80038b4:	9305      	str	r3, [sp, #20]
 80038b6:	4618      	mov	r0, r3
 80038b8:	240a      	movs	r4, #10
 80038ba:	460f      	mov	r7, r1
 80038bc:	3101      	adds	r1, #1
 80038be:	783a      	ldrb	r2, [r7, #0]
 80038c0:	3a30      	subs	r2, #48	; 0x30
 80038c2:	2a09      	cmp	r2, #9
 80038c4:	d903      	bls.n	80038ce <_svfiprintf_r+0x192>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ca      	beq.n	8003860 <_svfiprintf_r+0x124>
 80038ca:	9005      	str	r0, [sp, #20]
 80038cc:	e7c8      	b.n	8003860 <_svfiprintf_r+0x124>
 80038ce:	fb04 2000 	mla	r0, r4, r0, r2
 80038d2:	2301      	movs	r3, #1
 80038d4:	e7f1      	b.n	80038ba <_svfiprintf_r+0x17e>
 80038d6:	ab03      	add	r3, sp, #12
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	462a      	mov	r2, r5
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <_svfiprintf_r+0x1e4>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	4640      	mov	r0, r8
 80038e2:	f3af 8000 	nop.w
 80038e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038ea:	4681      	mov	r9, r0
 80038ec:	d1d9      	bne.n	80038a2 <_svfiprintf_r+0x166>
 80038ee:	89ab      	ldrh	r3, [r5, #12]
 80038f0:	065b      	lsls	r3, r3, #25
 80038f2:	f53f af38 	bmi.w	8003766 <_svfiprintf_r+0x2a>
 80038f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f8:	b01d      	add	sp, #116	; 0x74
 80038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fe:	ab03      	add	r3, sp, #12
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	462a      	mov	r2, r5
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <_svfiprintf_r+0x1e4>)
 8003906:	a904      	add	r1, sp, #16
 8003908:	4640      	mov	r0, r8
 800390a:	f000 f881 	bl	8003a10 <_printf_i>
 800390e:	e7ea      	b.n	80038e6 <_svfiprintf_r+0x1aa>
 8003910:	080043b8 	.word	0x080043b8
 8003914:	080043be 	.word	0x080043be
 8003918:	080043c2 	.word	0x080043c2
 800391c:	00000000 	.word	0x00000000
 8003920:	08003685 	.word	0x08003685

08003924 <_printf_common>:
 8003924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003928:	4691      	mov	r9, r2
 800392a:	461f      	mov	r7, r3
 800392c:	688a      	ldr	r2, [r1, #8]
 800392e:	690b      	ldr	r3, [r1, #16]
 8003930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003934:	4293      	cmp	r3, r2
 8003936:	bfb8      	it	lt
 8003938:	4613      	movlt	r3, r2
 800393a:	f8c9 3000 	str.w	r3, [r9]
 800393e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003942:	4606      	mov	r6, r0
 8003944:	460c      	mov	r4, r1
 8003946:	b112      	cbz	r2, 800394e <_printf_common+0x2a>
 8003948:	3301      	adds	r3, #1
 800394a:	f8c9 3000 	str.w	r3, [r9]
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	0699      	lsls	r1, r3, #26
 8003952:	bf42      	ittt	mi
 8003954:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003958:	3302      	addmi	r3, #2
 800395a:	f8c9 3000 	strmi.w	r3, [r9]
 800395e:	6825      	ldr	r5, [r4, #0]
 8003960:	f015 0506 	ands.w	r5, r5, #6
 8003964:	d107      	bne.n	8003976 <_printf_common+0x52>
 8003966:	f104 0a19 	add.w	sl, r4, #25
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	f8d9 2000 	ldr.w	r2, [r9]
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	429d      	cmp	r5, r3
 8003974:	db29      	blt.n	80039ca <_printf_common+0xa6>
 8003976:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	3300      	adds	r3, #0
 800397e:	bf18      	it	ne
 8003980:	2301      	movne	r3, #1
 8003982:	0692      	lsls	r2, r2, #26
 8003984:	d42e      	bmi.n	80039e4 <_printf_common+0xc0>
 8003986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800398a:	4639      	mov	r1, r7
 800398c:	4630      	mov	r0, r6
 800398e:	47c0      	blx	r8
 8003990:	3001      	adds	r0, #1
 8003992:	d021      	beq.n	80039d8 <_printf_common+0xb4>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	68e5      	ldr	r5, [r4, #12]
 8003998:	f8d9 2000 	ldr.w	r2, [r9]
 800399c:	f003 0306 	and.w	r3, r3, #6
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	bf08      	it	eq
 80039a4:	1aad      	subeq	r5, r5, r2
 80039a6:	68a3      	ldr	r3, [r4, #8]
 80039a8:	6922      	ldr	r2, [r4, #16]
 80039aa:	bf0c      	ite	eq
 80039ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b0:	2500      	movne	r5, #0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bfc4      	itt	gt
 80039b6:	1a9b      	subgt	r3, r3, r2
 80039b8:	18ed      	addgt	r5, r5, r3
 80039ba:	f04f 0900 	mov.w	r9, #0
 80039be:	341a      	adds	r4, #26
 80039c0:	454d      	cmp	r5, r9
 80039c2:	d11b      	bne.n	80039fc <_printf_common+0xd8>
 80039c4:	2000      	movs	r0, #0
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	2301      	movs	r3, #1
 80039cc:	4652      	mov	r2, sl
 80039ce:	4639      	mov	r1, r7
 80039d0:	4630      	mov	r0, r6
 80039d2:	47c0      	blx	r8
 80039d4:	3001      	adds	r0, #1
 80039d6:	d103      	bne.n	80039e0 <_printf_common+0xbc>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e0:	3501      	adds	r5, #1
 80039e2:	e7c2      	b.n	800396a <_printf_common+0x46>
 80039e4:	18e1      	adds	r1, r4, r3
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	2030      	movs	r0, #48	; 0x30
 80039ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ee:	4422      	add	r2, r4
 80039f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039f8:	3302      	adds	r3, #2
 80039fa:	e7c4      	b.n	8003986 <_printf_common+0x62>
 80039fc:	2301      	movs	r3, #1
 80039fe:	4622      	mov	r2, r4
 8003a00:	4639      	mov	r1, r7
 8003a02:	4630      	mov	r0, r6
 8003a04:	47c0      	blx	r8
 8003a06:	3001      	adds	r0, #1
 8003a08:	d0e6      	beq.n	80039d8 <_printf_common+0xb4>
 8003a0a:	f109 0901 	add.w	r9, r9, #1
 8003a0e:	e7d7      	b.n	80039c0 <_printf_common+0x9c>

08003a10 <_printf_i>:
 8003a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4617      	mov	r7, r2
 8003a16:	7e0a      	ldrb	r2, [r1, #24]
 8003a18:	b085      	sub	sp, #20
 8003a1a:	2a6e      	cmp	r2, #110	; 0x6e
 8003a1c:	4698      	mov	r8, r3
 8003a1e:	4606      	mov	r6, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a24:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a28:	f000 80bc 	beq.w	8003ba4 <_printf_i+0x194>
 8003a2c:	d81a      	bhi.n	8003a64 <_printf_i+0x54>
 8003a2e:	2a63      	cmp	r2, #99	; 0x63
 8003a30:	d02e      	beq.n	8003a90 <_printf_i+0x80>
 8003a32:	d80a      	bhi.n	8003a4a <_printf_i+0x3a>
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	f000 80c8 	beq.w	8003bca <_printf_i+0x1ba>
 8003a3a:	2a58      	cmp	r2, #88	; 0x58
 8003a3c:	f000 808a 	beq.w	8003b54 <_printf_i+0x144>
 8003a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a48:	e02a      	b.n	8003aa0 <_printf_i+0x90>
 8003a4a:	2a64      	cmp	r2, #100	; 0x64
 8003a4c:	d001      	beq.n	8003a52 <_printf_i+0x42>
 8003a4e:	2a69      	cmp	r2, #105	; 0x69
 8003a50:	d1f6      	bne.n	8003a40 <_printf_i+0x30>
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a5a:	d023      	beq.n	8003aa4 <_printf_i+0x94>
 8003a5c:	1d11      	adds	r1, r2, #4
 8003a5e:	6019      	str	r1, [r3, #0]
 8003a60:	6813      	ldr	r3, [r2, #0]
 8003a62:	e027      	b.n	8003ab4 <_printf_i+0xa4>
 8003a64:	2a73      	cmp	r2, #115	; 0x73
 8003a66:	f000 80b4 	beq.w	8003bd2 <_printf_i+0x1c2>
 8003a6a:	d808      	bhi.n	8003a7e <_printf_i+0x6e>
 8003a6c:	2a6f      	cmp	r2, #111	; 0x6f
 8003a6e:	d02a      	beq.n	8003ac6 <_printf_i+0xb6>
 8003a70:	2a70      	cmp	r2, #112	; 0x70
 8003a72:	d1e5      	bne.n	8003a40 <_printf_i+0x30>
 8003a74:	680a      	ldr	r2, [r1, #0]
 8003a76:	f042 0220 	orr.w	r2, r2, #32
 8003a7a:	600a      	str	r2, [r1, #0]
 8003a7c:	e003      	b.n	8003a86 <_printf_i+0x76>
 8003a7e:	2a75      	cmp	r2, #117	; 0x75
 8003a80:	d021      	beq.n	8003ac6 <_printf_i+0xb6>
 8003a82:	2a78      	cmp	r2, #120	; 0x78
 8003a84:	d1dc      	bne.n	8003a40 <_printf_i+0x30>
 8003a86:	2278      	movs	r2, #120	; 0x78
 8003a88:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a8c:	496e      	ldr	r1, [pc, #440]	; (8003c48 <_printf_i+0x238>)
 8003a8e:	e064      	b.n	8003b5a <_printf_i+0x14a>
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a96:	1d11      	adds	r1, r2, #4
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0a3      	b.n	8003bec <_printf_i+0x1dc>
 8003aa4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003aa8:	f102 0104 	add.w	r1, r2, #4
 8003aac:	6019      	str	r1, [r3, #0]
 8003aae:	d0d7      	beq.n	8003a60 <_printf_i+0x50>
 8003ab0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	da03      	bge.n	8003ac0 <_printf_i+0xb0>
 8003ab8:	222d      	movs	r2, #45	; 0x2d
 8003aba:	425b      	negs	r3, r3
 8003abc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ac0:	4962      	ldr	r1, [pc, #392]	; (8003c4c <_printf_i+0x23c>)
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	e017      	b.n	8003af6 <_printf_i+0xe6>
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003ace:	d003      	beq.n	8003ad8 <_printf_i+0xc8>
 8003ad0:	1d08      	adds	r0, r1, #4
 8003ad2:	6018      	str	r0, [r3, #0]
 8003ad4:	680b      	ldr	r3, [r1, #0]
 8003ad6:	e006      	b.n	8003ae6 <_printf_i+0xd6>
 8003ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003adc:	f101 0004 	add.w	r0, r1, #4
 8003ae0:	6018      	str	r0, [r3, #0]
 8003ae2:	d0f7      	beq.n	8003ad4 <_printf_i+0xc4>
 8003ae4:	880b      	ldrh	r3, [r1, #0]
 8003ae6:	4959      	ldr	r1, [pc, #356]	; (8003c4c <_printf_i+0x23c>)
 8003ae8:	2a6f      	cmp	r2, #111	; 0x6f
 8003aea:	bf14      	ite	ne
 8003aec:	220a      	movne	r2, #10
 8003aee:	2208      	moveq	r2, #8
 8003af0:	2000      	movs	r0, #0
 8003af2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003af6:	6865      	ldr	r5, [r4, #4]
 8003af8:	60a5      	str	r5, [r4, #8]
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	f2c0 809c 	blt.w	8003c38 <_printf_i+0x228>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	f020 0004 	bic.w	r0, r0, #4
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13f      	bne.n	8003b8c <_printf_i+0x17c>
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	f040 8095 	bne.w	8003c3c <_printf_i+0x22c>
 8003b12:	4675      	mov	r5, lr
 8003b14:	2a08      	cmp	r2, #8
 8003b16:	d10b      	bne.n	8003b30 <_printf_i+0x120>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	07da      	lsls	r2, r3, #31
 8003b1c:	d508      	bpl.n	8003b30 <_printf_i+0x120>
 8003b1e:	6923      	ldr	r3, [r4, #16]
 8003b20:	6862      	ldr	r2, [r4, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bfde      	ittt	le
 8003b26:	2330      	movle	r3, #48	; 0x30
 8003b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b30:	ebae 0305 	sub.w	r3, lr, r5
 8003b34:	6123      	str	r3, [r4, #16]
 8003b36:	f8cd 8000 	str.w	r8, [sp]
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	aa03      	add	r2, sp, #12
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4630      	mov	r0, r6
 8003b42:	f7ff feef 	bl	8003924 <_printf_common>
 8003b46:	3001      	adds	r0, #1
 8003b48:	d155      	bne.n	8003bf6 <_printf_i+0x1e6>
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	b005      	add	sp, #20
 8003b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b54:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b58:	493c      	ldr	r1, [pc, #240]	; (8003c4c <_printf_i+0x23c>)
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b62:	f100 0504 	add.w	r5, r0, #4
 8003b66:	601d      	str	r5, [r3, #0]
 8003b68:	d001      	beq.n	8003b6e <_printf_i+0x15e>
 8003b6a:	6803      	ldr	r3, [r0, #0]
 8003b6c:	e002      	b.n	8003b74 <_printf_i+0x164>
 8003b6e:	0655      	lsls	r5, r2, #25
 8003b70:	d5fb      	bpl.n	8003b6a <_printf_i+0x15a>
 8003b72:	8803      	ldrh	r3, [r0, #0]
 8003b74:	07d0      	lsls	r0, r2, #31
 8003b76:	bf44      	itt	mi
 8003b78:	f042 0220 	orrmi.w	r2, r2, #32
 8003b7c:	6022      	strmi	r2, [r4, #0]
 8003b7e:	b91b      	cbnz	r3, 8003b88 <_printf_i+0x178>
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	f022 0220 	bic.w	r2, r2, #32
 8003b86:	6022      	str	r2, [r4, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	e7b1      	b.n	8003af0 <_printf_i+0xe0>
 8003b8c:	4675      	mov	r5, lr
 8003b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b92:	fb02 3310 	mls	r3, r2, r0, r3
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1f5      	bne.n	8003b8e <_printf_i+0x17e>
 8003ba2:	e7b7      	b.n	8003b14 <_printf_i+0x104>
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	6949      	ldr	r1, [r1, #20]
 8003baa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bae:	d004      	beq.n	8003bba <_printf_i+0x1aa>
 8003bb0:	1d10      	adds	r0, r2, #4
 8003bb2:	6018      	str	r0, [r3, #0]
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	6019      	str	r1, [r3, #0]
 8003bb8:	e007      	b.n	8003bca <_printf_i+0x1ba>
 8003bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bbe:	f102 0004 	add.w	r0, r2, #4
 8003bc2:	6018      	str	r0, [r3, #0]
 8003bc4:	6813      	ldr	r3, [r2, #0]
 8003bc6:	d0f6      	beq.n	8003bb6 <_printf_i+0x1a6>
 8003bc8:	8019      	strh	r1, [r3, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	4675      	mov	r5, lr
 8003bd0:	e7b1      	b.n	8003b36 <_printf_i+0x126>
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	1d11      	adds	r1, r2, #4
 8003bd6:	6019      	str	r1, [r3, #0]
 8003bd8:	6815      	ldr	r5, [r2, #0]
 8003bda:	6862      	ldr	r2, [r4, #4]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4628      	mov	r0, r5
 8003be0:	f7fc fb0e 	bl	8000200 <memchr>
 8003be4:	b108      	cbz	r0, 8003bea <_printf_i+0x1da>
 8003be6:	1b40      	subs	r0, r0, r5
 8003be8:	6060      	str	r0, [r4, #4]
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	6123      	str	r3, [r4, #16]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf4:	e79f      	b.n	8003b36 <_printf_i+0x126>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4639      	mov	r1, r7
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	47c0      	blx	r8
 8003c00:	3001      	adds	r0, #1
 8003c02:	d0a2      	beq.n	8003b4a <_printf_i+0x13a>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	079b      	lsls	r3, r3, #30
 8003c08:	d507      	bpl.n	8003c1a <_printf_i+0x20a>
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	f104 0919 	add.w	r9, r4, #25
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9a03      	ldr	r2, [sp, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	429d      	cmp	r5, r3
 8003c18:	db05      	blt.n	8003c26 <_printf_i+0x216>
 8003c1a:	68e0      	ldr	r0, [r4, #12]
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	4298      	cmp	r0, r3
 8003c20:	bfb8      	it	lt
 8003c22:	4618      	movlt	r0, r3
 8003c24:	e793      	b.n	8003b4e <_printf_i+0x13e>
 8003c26:	2301      	movs	r3, #1
 8003c28:	464a      	mov	r2, r9
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	47c0      	blx	r8
 8003c30:	3001      	adds	r0, #1
 8003c32:	d08a      	beq.n	8003b4a <_printf_i+0x13a>
 8003c34:	3501      	adds	r5, #1
 8003c36:	e7eb      	b.n	8003c10 <_printf_i+0x200>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1a7      	bne.n	8003b8c <_printf_i+0x17c>
 8003c3c:	780b      	ldrb	r3, [r1, #0]
 8003c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c46:	e765      	b.n	8003b14 <_printf_i+0x104>
 8003c48:	080043da 	.word	0x080043da
 8003c4c:	080043c9 	.word	0x080043c9

08003c50 <memcpy>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	1e43      	subs	r3, r0, #1
 8003c54:	440a      	add	r2, r1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	d100      	bne.n	8003c5c <memcpy+0xc>
 8003c5a:	bd10      	pop	{r4, pc}
 8003c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c64:	e7f7      	b.n	8003c56 <memcpy+0x6>

08003c66 <memmove>:
 8003c66:	4288      	cmp	r0, r1
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	eb01 0302 	add.w	r3, r1, r2
 8003c6e:	d803      	bhi.n	8003c78 <memmove+0x12>
 8003c70:	1e42      	subs	r2, r0, #1
 8003c72:	4299      	cmp	r1, r3
 8003c74:	d10c      	bne.n	8003c90 <memmove+0x2a>
 8003c76:	bd10      	pop	{r4, pc}
 8003c78:	4298      	cmp	r0, r3
 8003c7a:	d2f9      	bcs.n	8003c70 <memmove+0xa>
 8003c7c:	1881      	adds	r1, r0, r2
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	42d3      	cmn	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memmove+0x20>
 8003c84:	bd10      	pop	{r4, pc}
 8003c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c8e:	e7f7      	b.n	8003c80 <memmove+0x1a>
 8003c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c98:	e7eb      	b.n	8003c72 <memmove+0xc>
	...

08003c9c <_free_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d045      	beq.n	8003d30 <_free_r+0x94>
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f0c      	subs	r4, r1, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	18e4      	addlt	r4, r4, r3
 8003cb0:	f000 f8d6 	bl	8003e60 <__malloc_lock>
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <_free_r+0x98>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	4610      	mov	r0, r2
 8003cba:	b933      	cbnz	r3, 8003cca <_free_r+0x2e>
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	6014      	str	r4, [r2, #0]
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc6:	f000 b8cc 	b.w	8003e62 <__malloc_unlock>
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	d90c      	bls.n	8003ce8 <_free_r+0x4c>
 8003cce:	6821      	ldr	r1, [r4, #0]
 8003cd0:	1862      	adds	r2, r4, r1
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	bf04      	itt	eq
 8003cd6:	681a      	ldreq	r2, [r3, #0]
 8003cd8:	685b      	ldreq	r3, [r3, #4]
 8003cda:	6063      	str	r3, [r4, #4]
 8003cdc:	bf04      	itt	eq
 8003cde:	1852      	addeq	r2, r2, r1
 8003ce0:	6022      	streq	r2, [r4, #0]
 8003ce2:	6004      	str	r4, [r0, #0]
 8003ce4:	e7ec      	b.n	8003cc0 <_free_r+0x24>
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	b10a      	cbz	r2, 8003cf0 <_free_r+0x54>
 8003cec:	42a2      	cmp	r2, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x4a>
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	1858      	adds	r0, r3, r1
 8003cf4:	42a0      	cmp	r0, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x74>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	1858      	adds	r0, r3, r1
 8003cfe:	4282      	cmp	r2, r0
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	d1dd      	bne.n	8003cc0 <_free_r+0x24>
 8003d04:	6810      	ldr	r0, [r2, #0]
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	e7d7      	b.n	8003cc0 <_free_r+0x24>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x7c>
 8003d12:	230c      	movs	r3, #12
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	e7d3      	b.n	8003cc0 <_free_r+0x24>
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	1821      	adds	r1, r4, r0
 8003d1c:	428a      	cmp	r2, r1
 8003d1e:	bf04      	itt	eq
 8003d20:	6811      	ldreq	r1, [r2, #0]
 8003d22:	6852      	ldreq	r2, [r2, #4]
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	bf04      	itt	eq
 8003d28:	1809      	addeq	r1, r1, r0
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	605c      	str	r4, [r3, #4]
 8003d2e:	e7c7      	b.n	8003cc0 <_free_r+0x24>
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	2000009c 	.word	0x2000009c

08003d38 <_malloc_r>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	1ccd      	adds	r5, r1, #3
 8003d3c:	f025 0503 	bic.w	r5, r5, #3
 8003d40:	3508      	adds	r5, #8
 8003d42:	2d0c      	cmp	r5, #12
 8003d44:	bf38      	it	cc
 8003d46:	250c      	movcc	r5, #12
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	db01      	blt.n	8003d52 <_malloc_r+0x1a>
 8003d4e:	42a9      	cmp	r1, r5
 8003d50:	d903      	bls.n	8003d5a <_malloc_r+0x22>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	2000      	movs	r0, #0
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	f000 f881 	bl	8003e60 <__malloc_lock>
 8003d5e:	4a23      	ldr	r2, [pc, #140]	; (8003dec <_malloc_r+0xb4>)
 8003d60:	6814      	ldr	r4, [r2, #0]
 8003d62:	4621      	mov	r1, r4
 8003d64:	b991      	cbnz	r1, 8003d8c <_malloc_r+0x54>
 8003d66:	4c22      	ldr	r4, [pc, #136]	; (8003df0 <_malloc_r+0xb8>)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	b91b      	cbnz	r3, 8003d74 <_malloc_r+0x3c>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 f867 	bl	8003e40 <_sbrk_r>
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	4629      	mov	r1, r5
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f862 	bl	8003e40 <_sbrk_r>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d126      	bne.n	8003dce <_malloc_r+0x96>
 8003d80:	230c      	movs	r3, #12
 8003d82:	6033      	str	r3, [r6, #0]
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 f86c 	bl	8003e62 <__malloc_unlock>
 8003d8a:	e7e4      	b.n	8003d56 <_malloc_r+0x1e>
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	1b5b      	subs	r3, r3, r5
 8003d90:	d41a      	bmi.n	8003dc8 <_malloc_r+0x90>
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d90f      	bls.n	8003db6 <_malloc_r+0x7e>
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	50cd      	str	r5, [r1, r3]
 8003d9a:	18cc      	adds	r4, r1, r3
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f860 	bl	8003e62 <__malloc_unlock>
 8003da2:	f104 000b 	add.w	r0, r4, #11
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	f020 0007 	bic.w	r0, r0, #7
 8003dac:	1ac3      	subs	r3, r0, r3
 8003dae:	d01b      	beq.n	8003de8 <_malloc_r+0xb0>
 8003db0:	425a      	negs	r2, r3
 8003db2:	50e2      	str	r2, [r4, r3]
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
 8003db6:	428c      	cmp	r4, r1
 8003db8:	bf0d      	iteet	eq
 8003dba:	6863      	ldreq	r3, [r4, #4]
 8003dbc:	684b      	ldrne	r3, [r1, #4]
 8003dbe:	6063      	strne	r3, [r4, #4]
 8003dc0:	6013      	streq	r3, [r2, #0]
 8003dc2:	bf18      	it	ne
 8003dc4:	460c      	movne	r4, r1
 8003dc6:	e7e9      	b.n	8003d9c <_malloc_r+0x64>
 8003dc8:	460c      	mov	r4, r1
 8003dca:	6849      	ldr	r1, [r1, #4]
 8003dcc:	e7ca      	b.n	8003d64 <_malloc_r+0x2c>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d005      	beq.n	8003de4 <_malloc_r+0xac>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f830 	bl	8003e40 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d0cd      	beq.n	8003d80 <_malloc_r+0x48>
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	e7d9      	b.n	8003d9c <_malloc_r+0x64>
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
 8003dea:	bf00      	nop
 8003dec:	2000009c 	.word	0x2000009c
 8003df0:	200000a0 	.word	0x200000a0

08003df4 <_realloc_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	4607      	mov	r7, r0
 8003df8:	4614      	mov	r4, r2
 8003dfa:	460e      	mov	r6, r1
 8003dfc:	b921      	cbnz	r1, 8003e08 <_realloc_r+0x14>
 8003dfe:	4611      	mov	r1, r2
 8003e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e04:	f7ff bf98 	b.w	8003d38 <_malloc_r>
 8003e08:	b922      	cbnz	r2, 8003e14 <_realloc_r+0x20>
 8003e0a:	f7ff ff47 	bl	8003c9c <_free_r>
 8003e0e:	4625      	mov	r5, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e14:	f000 f826 	bl	8003e64 <_malloc_usable_size_r>
 8003e18:	4284      	cmp	r4, r0
 8003e1a:	d90f      	bls.n	8003e3c <_realloc_r+0x48>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f7ff ff8a 	bl	8003d38 <_malloc_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0f2      	beq.n	8003e10 <_realloc_r+0x1c>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	f7ff ff0f 	bl	8003c50 <memcpy>
 8003e32:	4631      	mov	r1, r6
 8003e34:	4638      	mov	r0, r7
 8003e36:	f7ff ff31 	bl	8003c9c <_free_r>
 8003e3a:	e7e9      	b.n	8003e10 <_realloc_r+0x1c>
 8003e3c:	4635      	mov	r5, r6
 8003e3e:	e7e7      	b.n	8003e10 <_realloc_r+0x1c>

08003e40 <_sbrk_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4c06      	ldr	r4, [pc, #24]	; (8003e5c <_sbrk_r+0x1c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4605      	mov	r5, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f7fd fbf0 	bl	8001630 <_sbrk>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_sbrk_r+0x1a>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_sbrk_r+0x1a>
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20000264 	.word	0x20000264

08003e60 <__malloc_lock>:
 8003e60:	4770      	bx	lr

08003e62 <__malloc_unlock>:
 8003e62:	4770      	bx	lr

08003e64 <_malloc_usable_size_r>:
 8003e64:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e6e:	bfbc      	itt	lt
 8003e70:	580b      	ldrlt	r3, [r1, r0]
 8003e72:	18c0      	addlt	r0, r0, r3
 8003e74:	4770      	bx	lr
	...

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
