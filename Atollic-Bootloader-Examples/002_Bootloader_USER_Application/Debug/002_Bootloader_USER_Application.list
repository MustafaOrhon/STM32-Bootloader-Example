
002_Bootloader_USER_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000291c  080081b0  080081b0  000081b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800aacc  0800aacc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab48  0800ab48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab50  0800ab50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab54  0800ab54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800ab58  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
  8 .bss          000000b8  20000070  20000070  00010070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000128  20000128  00010070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009d7b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000015eb  00000000  00000000  00019e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000740  00000000  00000000  0001b408  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006b8  00000000  00000000  0001bb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003c49  00000000  00000000  0001c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002914  00000000  00000000  0001fe49  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002275d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f94  00000000  00000000  000227dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081b0 <__do_global_dtors_aux>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4c05      	ldr	r4, [pc, #20]	; (80081c8 <__do_global_dtors_aux+0x18>)
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	b933      	cbnz	r3, 80081c6 <__do_global_dtors_aux+0x16>
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__do_global_dtors_aux+0x1c>)
 80081ba:	b113      	cbz	r3, 80081c2 <__do_global_dtors_aux+0x12>
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <__do_global_dtors_aux+0x20>)
 80081be:	f3af 8000 	nop.w
 80081c2:	2301      	movs	r3, #1
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	20000070 	.word	0x20000070
 80081cc:	00000000 	.word	0x00000000
 80081d0:	0800aab4 	.word	0x0800aab4

080081d4 <frame_dummy>:
 80081d4:	b508      	push	{r3, lr}
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <frame_dummy+0x10>)
 80081d8:	b11b      	cbz	r3, 80081e2 <frame_dummy+0xe>
 80081da:	4903      	ldr	r1, [pc, #12]	; (80081e8 <frame_dummy+0x14>)
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <frame_dummy+0x18>)
 80081de:	f3af 8000 	nop.w
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	00000000 	.word	0x00000000
 80081e8:	20000074 	.word	0x20000074
 80081ec:	0800aab4 	.word	0x0800aab4

080081f0 <strlen>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1fb      	bne.n	80081f2 <strlen+0x2>
 80081fa:	1a18      	subs	r0, r3, r0
 80081fc:	3801      	subs	r0, #1
 80081fe:	4770      	bx	lr

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_uldivmod>:
 80082a0:	b953      	cbnz	r3, 80082b8 <__aeabi_uldivmod+0x18>
 80082a2:	b94a      	cbnz	r2, 80082b8 <__aeabi_uldivmod+0x18>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bf08      	it	eq
 80082a8:	2800      	cmpeq	r0, #0
 80082aa:	bf1c      	itt	ne
 80082ac:	f04f 31ff 	movne.w	r1, #4294967295
 80082b0:	f04f 30ff 	movne.w	r0, #4294967295
 80082b4:	f000 b97a 	b.w	80085ac <__aeabi_idiv0>
 80082b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082c0:	f000 f806 	bl	80082d0 <__udivmoddi4>
 80082c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr

080082d0 <__udivmoddi4>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	468c      	mov	ip, r1
 80082d6:	460d      	mov	r5, r1
 80082d8:	4604      	mov	r4, r0
 80082da:	9e08      	ldr	r6, [sp, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d151      	bne.n	8008384 <__udivmoddi4+0xb4>
 80082e0:	428a      	cmp	r2, r1
 80082e2:	4617      	mov	r7, r2
 80082e4:	d96d      	bls.n	80083c2 <__udivmoddi4+0xf2>
 80082e6:	fab2 fe82 	clz	lr, r2
 80082ea:	f1be 0f00 	cmp.w	lr, #0
 80082ee:	d00b      	beq.n	8008308 <__udivmoddi4+0x38>
 80082f0:	f1ce 0c20 	rsb	ip, lr, #32
 80082f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80082f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80082fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8008300:	ea4c 0c05 	orr.w	ip, ip, r5
 8008304:	fa00 f40e 	lsl.w	r4, r0, lr
 8008308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800830c:	0c25      	lsrs	r5, r4, #16
 800830e:	fbbc f8fa 	udiv	r8, ip, sl
 8008312:	fa1f f987 	uxth.w	r9, r7
 8008316:	fb0a cc18 	mls	ip, sl, r8, ip
 800831a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800831e:	fb08 f309 	mul.w	r3, r8, r9
 8008322:	42ab      	cmp	r3, r5
 8008324:	d90a      	bls.n	800833c <__udivmoddi4+0x6c>
 8008326:	19ed      	adds	r5, r5, r7
 8008328:	f108 32ff 	add.w	r2, r8, #4294967295
 800832c:	f080 8123 	bcs.w	8008576 <__udivmoddi4+0x2a6>
 8008330:	42ab      	cmp	r3, r5
 8008332:	f240 8120 	bls.w	8008576 <__udivmoddi4+0x2a6>
 8008336:	f1a8 0802 	sub.w	r8, r8, #2
 800833a:	443d      	add	r5, r7
 800833c:	1aed      	subs	r5, r5, r3
 800833e:	b2a4      	uxth	r4, r4
 8008340:	fbb5 f0fa 	udiv	r0, r5, sl
 8008344:	fb0a 5510 	mls	r5, sl, r0, r5
 8008348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800834c:	fb00 f909 	mul.w	r9, r0, r9
 8008350:	45a1      	cmp	r9, r4
 8008352:	d909      	bls.n	8008368 <__udivmoddi4+0x98>
 8008354:	19e4      	adds	r4, r4, r7
 8008356:	f100 33ff 	add.w	r3, r0, #4294967295
 800835a:	f080 810a 	bcs.w	8008572 <__udivmoddi4+0x2a2>
 800835e:	45a1      	cmp	r9, r4
 8008360:	f240 8107 	bls.w	8008572 <__udivmoddi4+0x2a2>
 8008364:	3802      	subs	r0, #2
 8008366:	443c      	add	r4, r7
 8008368:	eba4 0409 	sub.w	r4, r4, r9
 800836c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008370:	2100      	movs	r1, #0
 8008372:	2e00      	cmp	r6, #0
 8008374:	d061      	beq.n	800843a <__udivmoddi4+0x16a>
 8008376:	fa24 f40e 	lsr.w	r4, r4, lr
 800837a:	2300      	movs	r3, #0
 800837c:	6034      	str	r4, [r6, #0]
 800837e:	6073      	str	r3, [r6, #4]
 8008380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008384:	428b      	cmp	r3, r1
 8008386:	d907      	bls.n	8008398 <__udivmoddi4+0xc8>
 8008388:	2e00      	cmp	r6, #0
 800838a:	d054      	beq.n	8008436 <__udivmoddi4+0x166>
 800838c:	2100      	movs	r1, #0
 800838e:	e886 0021 	stmia.w	r6, {r0, r5}
 8008392:	4608      	mov	r0, r1
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	fab3 f183 	clz	r1, r3
 800839c:	2900      	cmp	r1, #0
 800839e:	f040 808e 	bne.w	80084be <__udivmoddi4+0x1ee>
 80083a2:	42ab      	cmp	r3, r5
 80083a4:	d302      	bcc.n	80083ac <__udivmoddi4+0xdc>
 80083a6:	4282      	cmp	r2, r0
 80083a8:	f200 80fa 	bhi.w	80085a0 <__udivmoddi4+0x2d0>
 80083ac:	1a84      	subs	r4, r0, r2
 80083ae:	eb65 0503 	sbc.w	r5, r5, r3
 80083b2:	2001      	movs	r0, #1
 80083b4:	46ac      	mov	ip, r5
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d03f      	beq.n	800843a <__udivmoddi4+0x16a>
 80083ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	b912      	cbnz	r2, 80083ca <__udivmoddi4+0xfa>
 80083c4:	2701      	movs	r7, #1
 80083c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80083ca:	fab7 fe87 	clz	lr, r7
 80083ce:	f1be 0f00 	cmp.w	lr, #0
 80083d2:	d134      	bne.n	800843e <__udivmoddi4+0x16e>
 80083d4:	1beb      	subs	r3, r5, r7
 80083d6:	0c3a      	lsrs	r2, r7, #16
 80083d8:	fa1f fc87 	uxth.w	ip, r7
 80083dc:	2101      	movs	r1, #1
 80083de:	fbb3 f8f2 	udiv	r8, r3, r2
 80083e2:	0c25      	lsrs	r5, r4, #16
 80083e4:	fb02 3318 	mls	r3, r2, r8, r3
 80083e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80083ec:	fb0c f308 	mul.w	r3, ip, r8
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	d907      	bls.n	8008404 <__udivmoddi4+0x134>
 80083f4:	19ed      	adds	r5, r5, r7
 80083f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80083fa:	d202      	bcs.n	8008402 <__udivmoddi4+0x132>
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	f200 80d1 	bhi.w	80085a4 <__udivmoddi4+0x2d4>
 8008402:	4680      	mov	r8, r0
 8008404:	1aed      	subs	r5, r5, r3
 8008406:	b2a3      	uxth	r3, r4
 8008408:	fbb5 f0f2 	udiv	r0, r5, r2
 800840c:	fb02 5510 	mls	r5, r2, r0, r5
 8008410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8008414:	fb0c fc00 	mul.w	ip, ip, r0
 8008418:	45a4      	cmp	ip, r4
 800841a:	d907      	bls.n	800842c <__udivmoddi4+0x15c>
 800841c:	19e4      	adds	r4, r4, r7
 800841e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008422:	d202      	bcs.n	800842a <__udivmoddi4+0x15a>
 8008424:	45a4      	cmp	ip, r4
 8008426:	f200 80b8 	bhi.w	800859a <__udivmoddi4+0x2ca>
 800842a:	4618      	mov	r0, r3
 800842c:	eba4 040c 	sub.w	r4, r4, ip
 8008430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008434:	e79d      	b.n	8008372 <__udivmoddi4+0xa2>
 8008436:	4631      	mov	r1, r6
 8008438:	4630      	mov	r0, r6
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	f1ce 0420 	rsb	r4, lr, #32
 8008442:	fa05 f30e 	lsl.w	r3, r5, lr
 8008446:	fa07 f70e 	lsl.w	r7, r7, lr
 800844a:	fa20 f804 	lsr.w	r8, r0, r4
 800844e:	0c3a      	lsrs	r2, r7, #16
 8008450:	fa25 f404 	lsr.w	r4, r5, r4
 8008454:	ea48 0803 	orr.w	r8, r8, r3
 8008458:	fbb4 f1f2 	udiv	r1, r4, r2
 800845c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8008460:	fb02 4411 	mls	r4, r2, r1, r4
 8008464:	fa1f fc87 	uxth.w	ip, r7
 8008468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800846c:	fb01 f30c 	mul.w	r3, r1, ip
 8008470:	42ab      	cmp	r3, r5
 8008472:	fa00 f40e 	lsl.w	r4, r0, lr
 8008476:	d909      	bls.n	800848c <__udivmoddi4+0x1bc>
 8008478:	19ed      	adds	r5, r5, r7
 800847a:	f101 30ff 	add.w	r0, r1, #4294967295
 800847e:	f080 808a 	bcs.w	8008596 <__udivmoddi4+0x2c6>
 8008482:	42ab      	cmp	r3, r5
 8008484:	f240 8087 	bls.w	8008596 <__udivmoddi4+0x2c6>
 8008488:	3902      	subs	r1, #2
 800848a:	443d      	add	r5, r7
 800848c:	1aeb      	subs	r3, r5, r3
 800848e:	fa1f f588 	uxth.w	r5, r8
 8008492:	fbb3 f0f2 	udiv	r0, r3, r2
 8008496:	fb02 3310 	mls	r3, r2, r0, r3
 800849a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800849e:	fb00 f30c 	mul.w	r3, r0, ip
 80084a2:	42ab      	cmp	r3, r5
 80084a4:	d907      	bls.n	80084b6 <__udivmoddi4+0x1e6>
 80084a6:	19ed      	adds	r5, r5, r7
 80084a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80084ac:	d26f      	bcs.n	800858e <__udivmoddi4+0x2be>
 80084ae:	42ab      	cmp	r3, r5
 80084b0:	d96d      	bls.n	800858e <__udivmoddi4+0x2be>
 80084b2:	3802      	subs	r0, #2
 80084b4:	443d      	add	r5, r7
 80084b6:	1aeb      	subs	r3, r5, r3
 80084b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80084bc:	e78f      	b.n	80083de <__udivmoddi4+0x10e>
 80084be:	f1c1 0720 	rsb	r7, r1, #32
 80084c2:	fa22 f807 	lsr.w	r8, r2, r7
 80084c6:	408b      	lsls	r3, r1
 80084c8:	fa05 f401 	lsl.w	r4, r5, r1
 80084cc:	ea48 0303 	orr.w	r3, r8, r3
 80084d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80084d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80084d8:	40fd      	lsrs	r5, r7
 80084da:	ea4e 0e04 	orr.w	lr, lr, r4
 80084de:	fbb5 f9fc 	udiv	r9, r5, ip
 80084e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80084e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80084ea:	fa1f f883 	uxth.w	r8, r3
 80084ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80084f2:	fb09 f408 	mul.w	r4, r9, r8
 80084f6:	42ac      	cmp	r4, r5
 80084f8:	fa02 f201 	lsl.w	r2, r2, r1
 80084fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8008500:	d908      	bls.n	8008514 <__udivmoddi4+0x244>
 8008502:	18ed      	adds	r5, r5, r3
 8008504:	f109 30ff 	add.w	r0, r9, #4294967295
 8008508:	d243      	bcs.n	8008592 <__udivmoddi4+0x2c2>
 800850a:	42ac      	cmp	r4, r5
 800850c:	d941      	bls.n	8008592 <__udivmoddi4+0x2c2>
 800850e:	f1a9 0902 	sub.w	r9, r9, #2
 8008512:	441d      	add	r5, r3
 8008514:	1b2d      	subs	r5, r5, r4
 8008516:	fa1f fe8e 	uxth.w	lr, lr
 800851a:	fbb5 f0fc 	udiv	r0, r5, ip
 800851e:	fb0c 5510 	mls	r5, ip, r0, r5
 8008522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8008526:	fb00 f808 	mul.w	r8, r0, r8
 800852a:	45a0      	cmp	r8, r4
 800852c:	d907      	bls.n	800853e <__udivmoddi4+0x26e>
 800852e:	18e4      	adds	r4, r4, r3
 8008530:	f100 35ff 	add.w	r5, r0, #4294967295
 8008534:	d229      	bcs.n	800858a <__udivmoddi4+0x2ba>
 8008536:	45a0      	cmp	r8, r4
 8008538:	d927      	bls.n	800858a <__udivmoddi4+0x2ba>
 800853a:	3802      	subs	r0, #2
 800853c:	441c      	add	r4, r3
 800853e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008542:	eba4 0408 	sub.w	r4, r4, r8
 8008546:	fba0 8902 	umull	r8, r9, r0, r2
 800854a:	454c      	cmp	r4, r9
 800854c:	46c6      	mov	lr, r8
 800854e:	464d      	mov	r5, r9
 8008550:	d315      	bcc.n	800857e <__udivmoddi4+0x2ae>
 8008552:	d012      	beq.n	800857a <__udivmoddi4+0x2aa>
 8008554:	b156      	cbz	r6, 800856c <__udivmoddi4+0x29c>
 8008556:	ebba 030e 	subs.w	r3, sl, lr
 800855a:	eb64 0405 	sbc.w	r4, r4, r5
 800855e:	fa04 f707 	lsl.w	r7, r4, r7
 8008562:	40cb      	lsrs	r3, r1
 8008564:	431f      	orrs	r7, r3
 8008566:	40cc      	lsrs	r4, r1
 8008568:	6037      	str	r7, [r6, #0]
 800856a:	6074      	str	r4, [r6, #4]
 800856c:	2100      	movs	r1, #0
 800856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008572:	4618      	mov	r0, r3
 8008574:	e6f8      	b.n	8008368 <__udivmoddi4+0x98>
 8008576:	4690      	mov	r8, r2
 8008578:	e6e0      	b.n	800833c <__udivmoddi4+0x6c>
 800857a:	45c2      	cmp	sl, r8
 800857c:	d2ea      	bcs.n	8008554 <__udivmoddi4+0x284>
 800857e:	ebb8 0e02 	subs.w	lr, r8, r2
 8008582:	eb69 0503 	sbc.w	r5, r9, r3
 8008586:	3801      	subs	r0, #1
 8008588:	e7e4      	b.n	8008554 <__udivmoddi4+0x284>
 800858a:	4628      	mov	r0, r5
 800858c:	e7d7      	b.n	800853e <__udivmoddi4+0x26e>
 800858e:	4640      	mov	r0, r8
 8008590:	e791      	b.n	80084b6 <__udivmoddi4+0x1e6>
 8008592:	4681      	mov	r9, r0
 8008594:	e7be      	b.n	8008514 <__udivmoddi4+0x244>
 8008596:	4601      	mov	r1, r0
 8008598:	e778      	b.n	800848c <__udivmoddi4+0x1bc>
 800859a:	3802      	subs	r0, #2
 800859c:	443c      	add	r4, r7
 800859e:	e745      	b.n	800842c <__udivmoddi4+0x15c>
 80085a0:	4608      	mov	r0, r1
 80085a2:	e708      	b.n	80083b6 <__udivmoddi4+0xe6>
 80085a4:	f1a8 0802 	sub.w	r8, r8, #2
 80085a8:	443d      	add	r5, r7
 80085aa:	e72b      	b.n	8008404 <__udivmoddi4+0x134>

080085ac <__aeabi_idiv0>:
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085b4:	f000 fa92 	bl	8008adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085b8:	f000 f810 	bl	80085dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085bc:	f000 f8d2 	bl	8008764 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80085c0:	f000 f87c 	bl	80086bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80085c4:	f000 f8a4 	bl	8008710 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printMsg("Hello from the Bootloader user Application\r\n");
 80085c8:	4803      	ldr	r0, [pc, #12]	; (80085d8 <main+0x28>)
 80085ca:	f000 f935 	bl	8008838 <printMsg>
	  HAL_Delay(500);
 80085ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085d2:	f000 faf5 	bl	8008bc0 <HAL_Delay>
	  printMsg("Hello from the Bootloader user Application\r\n");
 80085d6:	e7f7      	b.n	80085c8 <main+0x18>
 80085d8:	0800aacc 	.word	0x0800aacc

080085dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b094      	sub	sp, #80	; 0x50
 80085e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085e2:	f107 0320 	add.w	r3, r7, #32
 80085e6:	2230      	movs	r2, #48	; 0x30
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fe3e 	bl	800a26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008600:	2300      	movs	r3, #0
 8008602:	60bb      	str	r3, [r7, #8]
 8008604:	4a2b      	ldr	r2, [pc, #172]	; (80086b4 <SystemClock_Config+0xd8>)
 8008606:	4b2b      	ldr	r3, [pc, #172]	; (80086b4 <SystemClock_Config+0xd8>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860e:	6413      	str	r3, [r2, #64]	; 0x40
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <SystemClock_Config+0xd8>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800861c:	2300      	movs	r3, #0
 800861e:	607b      	str	r3, [r7, #4]
 8008620:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <SystemClock_Config+0xdc>)
 8008622:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <SystemClock_Config+0xdc>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <SystemClock_Config+0xdc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008634:	607b      	str	r3, [r7, #4]
 8008636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008638:	2302      	movs	r3, #2
 800863a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800863c:	2301      	movs	r3, #1
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008640:	2310      	movs	r3, #16
 8008642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008644:	2302      	movs	r3, #2
 8008646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800864c:	2308      	movs	r3, #8
 800864e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008650:	23b4      	movs	r3, #180	; 0xb4
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008654:	2302      	movs	r3, #2
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008658:	2307      	movs	r3, #7
 800865a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800865c:	f107 0320 	add.w	r3, r7, #32
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fe49 	bl	80092f8 <HAL_RCC_OscConfig>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800866c:	f000 f906 	bl	800887c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008670:	f000 fdf2 	bl	8009258 <HAL_PWREx_EnableOverDrive>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800867a:	f000 f8ff 	bl	800887c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800867e:	230f      	movs	r3, #15
 8008680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008682:	2302      	movs	r3, #2
 8008684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800868a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800868e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008696:	f107 030c 	add.w	r3, r7, #12
 800869a:	2105      	movs	r1, #5
 800869c:	4618      	mov	r0, r3
 800869e:	f001 f8a3 	bl	80097e8 <HAL_RCC_ClockConfig>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80086a8:	f000 f8e8 	bl	800887c <Error_Handler>
  }
}
 80086ac:	bf00      	nop
 80086ae:	3750      	adds	r7, #80	; 0x50
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40023800 	.word	0x40023800
 80086b8:	40007000 	.word	0x40007000

080086bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086c0:	4b11      	ldr	r3, [pc, #68]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086c2:	4a12      	ldr	r2, [pc, #72]	; (800870c <MX_USART1_UART_Init+0x50>)
 80086c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086c6:	4b10      	ldr	r3, [pc, #64]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086ce:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086dc:	2200      	movs	r2, #0
 80086de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086e2:	220c      	movs	r2, #12
 80086e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086e6:	4b08      	ldr	r3, [pc, #32]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086f2:	4805      	ldr	r0, [pc, #20]	; (8008708 <MX_USART1_UART_Init+0x4c>)
 80086f4:	f001 fa6a 	bl	8009bcc <HAL_UART_Init>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80086fe:	f000 f8bd 	bl	800887c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008702:	bf00      	nop
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	200000dc 	.word	0x200000dc
 800870c:	40011000 	.word	0x40011000

08008710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008714:	4b11      	ldr	r3, [pc, #68]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008716:	4a12      	ldr	r2, [pc, #72]	; (8008760 <MX_USART3_UART_Init+0x50>)
 8008718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800871a:	4b10      	ldr	r3, [pc, #64]	; (800875c <MX_USART3_UART_Init+0x4c>)
 800871c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <MX_USART3_UART_Init+0x4c>)
 800872a:	2200      	movs	r2, #0
 800872c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008734:	4b09      	ldr	r3, [pc, #36]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008736:	220c      	movs	r2, #12
 8008738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <MX_USART3_UART_Init+0x4c>)
 800873c:	2200      	movs	r2, #0
 800873e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008742:	2200      	movs	r2, #0
 8008744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008746:	4805      	ldr	r0, [pc, #20]	; (800875c <MX_USART3_UART_Init+0x4c>)
 8008748:	f001 fa40 	bl	8009bcc <HAL_UART_Init>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008752:	f000 f893 	bl	800887c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000098 	.word	0x20000098
 8008760:	40004800 	.word	0x40004800

08008764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	609a      	str	r2, [r3, #8]
 8008776:	60da      	str	r2, [r3, #12]
 8008778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	4a2b      	ldr	r2, [pc, #172]	; (800882c <MX_GPIO_Init+0xc8>)
 8008780:	4b2a      	ldr	r3, [pc, #168]	; (800882c <MX_GPIO_Init+0xc8>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	6313      	str	r3, [r2, #48]	; 0x30
 800878a:	4b28      	ldr	r3, [pc, #160]	; (800882c <MX_GPIO_Init+0xc8>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	60bb      	str	r3, [r7, #8]
 8008794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008796:	2300      	movs	r3, #0
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	4a24      	ldr	r2, [pc, #144]	; (800882c <MX_GPIO_Init+0xc8>)
 800879c:	4b23      	ldr	r3, [pc, #140]	; (800882c <MX_GPIO_Init+0xc8>)
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	f043 0304 	orr.w	r3, r3, #4
 80087a4:	6313      	str	r3, [r2, #48]	; 0x30
 80087a6:	4b21      	ldr	r3, [pc, #132]	; (800882c <MX_GPIO_Init+0xc8>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80087b2:	2300      	movs	r3, #0
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4a1d      	ldr	r2, [pc, #116]	; (800882c <MX_GPIO_Init+0xc8>)
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <MX_GPIO_Init+0xc8>)
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c0:	6313      	str	r3, [r2, #48]	; 0x30
 80087c2:	4b1a      	ldr	r3, [pc, #104]	; (800882c <MX_GPIO_Init+0xc8>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80087ce:	2200      	movs	r2, #0
 80087d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80087d4:	4816      	ldr	r0, [pc, #88]	; (8008830 <MX_GPIO_Init+0xcc>)
 80087d6:	f000 fce7 	bl	80091a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80087da:	2301      	movs	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80087e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80087e4:	2302      	movs	r3, #2
 80087e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	4619      	mov	r1, r3
 80087ee:	4811      	ldr	r0, [pc, #68]	; (8008834 <MX_GPIO_Init+0xd0>)
 80087f0:	f000 fb18 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80087f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80087f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087fa:	2301      	movs	r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008802:	2300      	movs	r3, #0
 8008804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	4619      	mov	r1, r3
 800880c:	4808      	ldr	r0, [pc, #32]	; (8008830 <MX_GPIO_Init+0xcc>)
 800880e:	f000 fb09 	bl	8008e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008812:	2200      	movs	r2, #0
 8008814:	2100      	movs	r1, #0
 8008816:	2006      	movs	r0, #6
 8008818:	f000 facd 	bl	8008db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800881c:	2006      	movs	r0, #6
 800881e:	f000 fae6 	bl	8008dee <HAL_NVIC_EnableIRQ>

}
 8008822:	bf00      	nop
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	40023800 	.word	0x40023800
 8008830:	40021800 	.word	0x40021800
 8008834:	40020000 	.word	0x40020000

08008838 <printMsg>:

/* USER CODE BEGIN 4 */
void printMsg(char *msg,...)
{
 8008838:	b40f      	push	{r0, r1, r2, r3}
 800883a:	b580      	push	{r7, lr}
 800883c:	b09a      	sub	sp, #104	; 0x68
 800883e:	af00      	add	r7, sp, #0
   char comingMsg[100];

  va_list vaList;
  va_start(vaList,msg);
 8008840:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008844:	603b      	str	r3, [r7, #0]
  vsprintf(comingMsg,msg,vaList);
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800884c:	4618      	mov	r0, r3
 800884e:	f001 fd2d 	bl	800a2ac <vsiprintf>
  HAL_UART_Transmit(DEBUG_UART,(uint8_t *)comingMsg,strlen(comingMsg),HAL_MAX_DELAY);
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fccb 	bl	80081f0 <strlen>
 800885a:	4603      	mov	r3, r0
 800885c:	b29a      	uxth	r2, r3
 800885e:	1d39      	adds	r1, r7, #4
 8008860:	f04f 33ff 	mov.w	r3, #4294967295
 8008864:	4804      	ldr	r0, [pc, #16]	; (8008878 <printMsg+0x40>)
 8008866:	f001 f9fe 	bl	8009c66 <HAL_UART_Transmit>
  va_end(vaList);
}
 800886a:	bf00      	nop
 800886c:	3768      	adds	r7, #104	; 0x68
 800886e:	46bd      	mov	sp, r7
 8008870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008874:	b004      	add	sp, #16
 8008876:	4770      	bx	lr
 8008878:	20000098 	.word	0x20000098

0800887c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008880:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008882:	e7fe      	b.n	8008882 <Error_Handler+0x6>

08008884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <HAL_MspInit+0x4c>)
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <HAL_MspInit+0x4c>)
 8008892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008898:	6453      	str	r3, [r2, #68]	; 0x44
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <HAL_MspInit+0x4c>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088a6:	2300      	movs	r3, #0
 80088a8:	603b      	str	r3, [r7, #0]
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <HAL_MspInit+0x4c>)
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <HAL_MspInit+0x4c>)
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b4:	6413      	str	r3, [r2, #64]	; 0x40
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <HAL_MspInit+0x4c>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80088c2:	2007      	movs	r0, #7
 80088c4:	f000 fa6c 	bl	8008da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40023800 	.word	0x40023800

080088d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088dc:	f107 031c 	add.w	r3, r7, #28
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	605a      	str	r2, [r3, #4]
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a33      	ldr	r2, [pc, #204]	; (80089c0 <HAL_UART_MspInit+0xec>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d12d      	bne.n	8008952 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80088f6:	2300      	movs	r3, #0
 80088f8:	61bb      	str	r3, [r7, #24]
 80088fa:	4a32      	ldr	r2, [pc, #200]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 80088fc:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 80088fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008900:	f043 0310 	orr.w	r3, r3, #16
 8008904:	6453      	str	r3, [r2, #68]	; 0x44
 8008906:	4b2f      	ldr	r3, [pc, #188]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	61bb      	str	r3, [r7, #24]
 8008910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	4a2b      	ldr	r2, [pc, #172]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008918:	4b2a      	ldr	r3, [pc, #168]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	6313      	str	r3, [r2, #48]	; 0x30
 8008922:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800892e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008934:	2302      	movs	r3, #2
 8008936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008938:	2300      	movs	r3, #0
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800893c:	2303      	movs	r3, #3
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008940:	2307      	movs	r3, #7
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008944:	f107 031c 	add.w	r3, r7, #28
 8008948:	4619      	mov	r1, r3
 800894a:	481f      	ldr	r0, [pc, #124]	; (80089c8 <HAL_UART_MspInit+0xf4>)
 800894c:	f000 fa6a 	bl	8008e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008950:	e031      	b.n	80089b6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <HAL_UART_MspInit+0xf8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d12c      	bne.n	80089b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	4a18      	ldr	r2, [pc, #96]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008962:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800896a:	6413      	str	r3, [r2, #64]	; 0x40
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	4a11      	ldr	r2, [pc, #68]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f043 0304 	orr.w	r3, r3, #4
 8008986:	6313      	str	r3, [r2, #48]	; 0x30
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <HAL_UART_MspInit+0xf0>)
 800898a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008994:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800899a:	2302      	movs	r3, #2
 800899c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a2:	2303      	movs	r3, #3
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089a6:	2307      	movs	r3, #7
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089aa:	f107 031c 	add.w	r3, r7, #28
 80089ae:	4619      	mov	r1, r3
 80089b0:	4807      	ldr	r0, [pc, #28]	; (80089d0 <HAL_UART_MspInit+0xfc>)
 80089b2:	f000 fa37 	bl	8008e24 <HAL_GPIO_Init>
}
 80089b6:	bf00      	nop
 80089b8:	3730      	adds	r7, #48	; 0x30
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40011000 	.word	0x40011000
 80089c4:	40023800 	.word	0x40023800
 80089c8:	40020000 	.word	0x40020000
 80089cc:	40004800 	.word	0x40004800
 80089d0:	40020800 	.word	0x40020800

080089d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089d8:	e7fe      	b.n	80089d8 <NMI_Handler+0x4>

080089da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089da:	b480      	push	{r7}
 80089dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089de:	e7fe      	b.n	80089de <HardFault_Handler+0x4>

080089e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089e4:	e7fe      	b.n	80089e4 <MemManage_Handler+0x4>

080089e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089e6:	b480      	push	{r7}
 80089e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089ea:	e7fe      	b.n	80089ea <BusFault_Handler+0x4>

080089ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80089f0:	e7fe      	b.n	80089f0 <UsageFault_Handler+0x4>

080089f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089f2:	b480      	push	{r7}
 80089f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089f6:	bf00      	nop
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a04:	bf00      	nop
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a12:	bf00      	nop
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a20:	f000 f8ae 	bl	8008b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a24:	bf00      	nop
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_SET) == GPIO_PIN_SET) // Testing Interrupt
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	4808      	ldr	r0, [pc, #32]	; (8008a50 <EXTI0_IRQHandler+0x28>)
 8008a30:	f000 fba2 	bl	8009178 <HAL_GPIO_ReadPin>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d104      	bne.n	8008a44 <EXTI0_IRQHandler+0x1c>
  {
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13|GPIO_PIN_14);
 8008a3a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8008a3e:	4805      	ldr	r0, [pc, #20]	; (8008a54 <EXTI0_IRQHandler+0x2c>)
 8008a40:	f000 fbcb 	bl	80091da <HAL_GPIO_TogglePin>

  }


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008a44:	2001      	movs	r0, #1
 8008a46:	f000 fbe3 	bl	8009210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008a4a:	bf00      	nop
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40020000 	.word	0x40020000
 8008a54:	40021800 	.word	0x40021800

08008a58 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008a60:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <_sbrk+0x50>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d102      	bne.n	8008a6e <_sbrk+0x16>
		heap_end = &end;
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <_sbrk+0x50>)
 8008a6a:	4a10      	ldr	r2, [pc, #64]	; (8008aac <_sbrk+0x54>)
 8008a6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <_sbrk+0x50>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <_sbrk+0x50>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	466a      	mov	r2, sp
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d907      	bls.n	8008a92 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008a82:	f001 fbc9 	bl	800a218 <__errno>
 8008a86:	4602      	mov	r2, r0
 8008a88:	230c      	movs	r3, #12
 8008a8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a90:	e006      	b.n	8008aa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <_sbrk+0x50>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	4a03      	ldr	r2, [pc, #12]	; (8008aa8 <_sbrk+0x50>)
 8008a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	2000008c 	.word	0x2000008c
 8008aac:	20000128 	.word	0x20000128

08008ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ab4:	4a07      	ldr	r2, [pc, #28]	; (8008ad4 <SystemInit+0x24>)
 8008ab6:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <SystemInit+0x24>)
 8008ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <SystemInit+0x24>)
 8008ac6:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <SystemInit+0x28>)
 8008ac8:	609a      	str	r2, [r3, #8]

}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	e000ed00 	.word	0xe000ed00
 8008ad8:	08008000 	.word	0x08008000

08008adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ae0:	4a0e      	ldr	r2, [pc, #56]	; (8008b1c <HAL_Init+0x40>)
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <HAL_Init+0x40>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008aec:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <HAL_Init+0x40>)
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <HAL_Init+0x40>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008af8:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <HAL_Init+0x40>)
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <HAL_Init+0x40>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b04:	2003      	movs	r0, #3
 8008b06:	f000 f94b 	bl	8008da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	f000 f808 	bl	8008b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b10:	f7ff feb8 	bl	8008884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40023c00 	.word	0x40023c00

08008b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b28:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <HAL_InitTick+0x54>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <HAL_InitTick+0x58>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	4619      	mov	r1, r3
 8008b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f963 	bl	8008e0a <HAL_SYSTICK_Config>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e00e      	b.n	8008b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b0f      	cmp	r3, #15
 8008b52:	d80a      	bhi.n	8008b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b54:	2200      	movs	r2, #0
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	f000 f92b 	bl	8008db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b60:	4a06      	ldr	r2, [pc, #24]	; (8008b7c <HAL_InitTick+0x5c>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e000      	b.n	8008b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000000 	.word	0x20000000
 8008b78:	20000008 	.word	0x20000008
 8008b7c:	20000004 	.word	0x20000004

08008b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <HAL_IncTick+0x20>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <HAL_IncTick+0x24>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4413      	add	r3, r2
 8008b90:	4a04      	ldr	r2, [pc, #16]	; (8008ba4 <HAL_IncTick+0x24>)
 8008b92:	6013      	str	r3, [r2, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000008 	.word	0x20000008
 8008ba4:	20000120 	.word	0x20000120

08008ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  return uwTick;
 8008bac:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <HAL_GetTick+0x14>)
 8008bae:	681b      	ldr	r3, [r3, #0]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000120 	.word	0x20000120

08008bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008bc8:	f7ff ffee 	bl	8008ba8 <HAL_GetTick>
 8008bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d005      	beq.n	8008be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <HAL_Delay+0x40>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4413      	add	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008be6:	bf00      	nop
 8008be8:	f7ff ffde 	bl	8008ba8 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	1ad2      	subs	r2, r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d3f7      	bcc.n	8008be8 <HAL_Delay+0x28>
  {
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000008 	.word	0x20000008

08008c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <__NVIC_SetPriorityGrouping+0x44>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c20:	4013      	ands	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c36:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <__NVIC_SetPriorityGrouping+0x44>)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	60d3      	str	r3, [r2, #12]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	e000ed00 	.word	0xe000ed00

08008c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <__NVIC_GetPriorityGrouping+0x18>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	f003 0307 	and.w	r3, r3, #7
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	e000ed00 	.word	0xe000ed00

08008c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	db0b      	blt.n	8008c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c7a:	4909      	ldr	r1, [pc, #36]	; (8008ca0 <__NVIC_EnableIRQ+0x38>)
 8008c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	79fa      	ldrb	r2, [r7, #7]
 8008c84:	f002 021f 	and.w	r2, r2, #31
 8008c88:	2001      	movs	r0, #1
 8008c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	e000e100 	.word	0xe000e100

08008ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	db0a      	blt.n	8008cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cb8:	490d      	ldr	r1, [pc, #52]	; (8008cf0 <__NVIC_SetPriority+0x4c>)
 8008cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	b2d2      	uxtb	r2, r2
 8008cc2:	0112      	lsls	r2, r2, #4
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ccc:	e00a      	b.n	8008ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <__NVIC_SetPriority+0x50>)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	f003 030f 	and.w	r3, r3, #15
 8008cd6:	3b04      	subs	r3, #4
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	0112      	lsls	r2, r2, #4
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	761a      	strb	r2, [r3, #24]
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	e000e100 	.word	0xe000e100
 8008cf4:	e000ed00 	.word	0xe000ed00

08008cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f1c3 0307 	rsb	r3, r3, #7
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	bf28      	it	cs
 8008d16:	2304      	movcs	r3, #4
 8008d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2b06      	cmp	r3, #6
 8008d20:	d902      	bls.n	8008d28 <NVIC_EncodePriority+0x30>
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	3b03      	subs	r3, #3
 8008d26:	e000      	b.n	8008d2a <NVIC_EncodePriority+0x32>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	1e5a      	subs	r2, r3, #1
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	401a      	ands	r2, r3
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d3e:	2101      	movs	r1, #1
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	fa01 f303 	lsl.w	r3, r1, r3
 8008d46:	1e59      	subs	r1, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d4c:	4313      	orrs	r3, r2
         );
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3724      	adds	r7, #36	; 0x24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d6c:	d301      	bcc.n	8008d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e00f      	b.n	8008d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <SysTick_Config+0x40>)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d7a:	210f      	movs	r1, #15
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	f7ff ff90 	bl	8008ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <SysTick_Config+0x40>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d8a:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <SysTick_Config+0x40>)
 8008d8c:	2207      	movs	r2, #7
 8008d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	e000e010 	.word	0xe000e010

08008da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff2b 	bl	8008c04 <__NVIC_SetPriorityGrouping>
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008dc8:	f7ff ff40 	bl	8008c4c <__NVIC_GetPriorityGrouping>
 8008dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f7ff ff90 	bl	8008cf8 <NVIC_EncodePriority>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff ff5f 	bl	8008ca4 <__NVIC_SetPriority>
}
 8008de6:	bf00      	nop
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	4603      	mov	r3, r0
 8008df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff ff33 	bl	8008c68 <__NVIC_EnableIRQ>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff ffa2 	bl	8008d5c <SysTick_Config>
 8008e18:	4603      	mov	r3, r0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b089      	sub	sp, #36	; 0x24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	e177      	b.n	8009130 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008e40:	2201      	movs	r2, #1
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	4013      	ands	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	f040 8166 	bne.w	800912a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d005      	beq.n	8008e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d130      	bne.n	8008ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	2203      	movs	r2, #3
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	43db      	mvns	r3, r3
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008eac:	2201      	movs	r2, #1
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 0201 	and.w	r2, r3, #1
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f003 0303 	and.w	r3, r3, #3
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d017      	beq.n	8008f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	2203      	movs	r2, #3
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d123      	bne.n	8008f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	08da      	lsrs	r2, r3, #3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3208      	adds	r2, #8
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	220f      	movs	r2, #15
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	4013      	ands	r3, r2
 8008f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	08da      	lsrs	r2, r3, #3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3208      	adds	r2, #8
 8008f62:	69b9      	ldr	r1, [r7, #24]
 8008f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	2203      	movs	r2, #3
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f003 0203 	and.w	r2, r3, #3
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80c0 	beq.w	800912a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	4a65      	ldr	r2, [pc, #404]	; (8009144 <HAL_GPIO_Init+0x320>)
 8008fb0:	4b64      	ldr	r3, [pc, #400]	; (8009144 <HAL_GPIO_Init+0x320>)
 8008fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008fba:	4b62      	ldr	r3, [pc, #392]	; (8009144 <HAL_GPIO_Init+0x320>)
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008fc6:	4a60      	ldr	r2, [pc, #384]	; (8009148 <HAL_GPIO_Init+0x324>)
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	089b      	lsrs	r3, r3, #2
 8008fcc:	3302      	adds	r3, #2
 8008fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	220f      	movs	r2, #15
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	43db      	mvns	r3, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a57      	ldr	r2, [pc, #348]	; (800914c <HAL_GPIO_Init+0x328>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d037      	beq.n	8009062 <HAL_GPIO_Init+0x23e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a56      	ldr	r2, [pc, #344]	; (8009150 <HAL_GPIO_Init+0x32c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d031      	beq.n	800905e <HAL_GPIO_Init+0x23a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a55      	ldr	r2, [pc, #340]	; (8009154 <HAL_GPIO_Init+0x330>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d02b      	beq.n	800905a <HAL_GPIO_Init+0x236>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a54      	ldr	r2, [pc, #336]	; (8009158 <HAL_GPIO_Init+0x334>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d025      	beq.n	8009056 <HAL_GPIO_Init+0x232>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a53      	ldr	r2, [pc, #332]	; (800915c <HAL_GPIO_Init+0x338>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d01f      	beq.n	8009052 <HAL_GPIO_Init+0x22e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a52      	ldr	r2, [pc, #328]	; (8009160 <HAL_GPIO_Init+0x33c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d019      	beq.n	800904e <HAL_GPIO_Init+0x22a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a51      	ldr	r2, [pc, #324]	; (8009164 <HAL_GPIO_Init+0x340>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <HAL_GPIO_Init+0x226>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a50      	ldr	r2, [pc, #320]	; (8009168 <HAL_GPIO_Init+0x344>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00d      	beq.n	8009046 <HAL_GPIO_Init+0x222>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a4f      	ldr	r2, [pc, #316]	; (800916c <HAL_GPIO_Init+0x348>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d007      	beq.n	8009042 <HAL_GPIO_Init+0x21e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a4e      	ldr	r2, [pc, #312]	; (8009170 <HAL_GPIO_Init+0x34c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d101      	bne.n	800903e <HAL_GPIO_Init+0x21a>
 800903a:	2309      	movs	r3, #9
 800903c:	e012      	b.n	8009064 <HAL_GPIO_Init+0x240>
 800903e:	230a      	movs	r3, #10
 8009040:	e010      	b.n	8009064 <HAL_GPIO_Init+0x240>
 8009042:	2308      	movs	r3, #8
 8009044:	e00e      	b.n	8009064 <HAL_GPIO_Init+0x240>
 8009046:	2307      	movs	r3, #7
 8009048:	e00c      	b.n	8009064 <HAL_GPIO_Init+0x240>
 800904a:	2306      	movs	r3, #6
 800904c:	e00a      	b.n	8009064 <HAL_GPIO_Init+0x240>
 800904e:	2305      	movs	r3, #5
 8009050:	e008      	b.n	8009064 <HAL_GPIO_Init+0x240>
 8009052:	2304      	movs	r3, #4
 8009054:	e006      	b.n	8009064 <HAL_GPIO_Init+0x240>
 8009056:	2303      	movs	r3, #3
 8009058:	e004      	b.n	8009064 <HAL_GPIO_Init+0x240>
 800905a:	2302      	movs	r3, #2
 800905c:	e002      	b.n	8009064 <HAL_GPIO_Init+0x240>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <HAL_GPIO_Init+0x240>
 8009062:	2300      	movs	r3, #0
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	f002 0203 	and.w	r2, r2, #3
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	4093      	lsls	r3, r2
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	4313      	orrs	r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009074:	4934      	ldr	r1, [pc, #208]	; (8009148 <HAL_GPIO_Init+0x324>)
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	089b      	lsrs	r3, r3, #2
 800907a:	3302      	adds	r3, #2
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009082:	4b3c      	ldr	r3, [pc, #240]	; (8009174 <HAL_GPIO_Init+0x350>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	43db      	mvns	r3, r3
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	4013      	ands	r3, r2
 8009090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80090a6:	4a33      	ldr	r2, [pc, #204]	; (8009174 <HAL_GPIO_Init+0x350>)
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80090ac:	4b31      	ldr	r3, [pc, #196]	; (8009174 <HAL_GPIO_Init+0x350>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	43db      	mvns	r3, r3
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	4013      	ands	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80090d0:	4a28      	ldr	r2, [pc, #160]	; (8009174 <HAL_GPIO_Init+0x350>)
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80090d6:	4b27      	ldr	r3, [pc, #156]	; (8009174 <HAL_GPIO_Init+0x350>)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	43db      	mvns	r3, r3
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	4013      	ands	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80090fa:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <HAL_GPIO_Init+0x350>)
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009100:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <HAL_GPIO_Init+0x350>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	43db      	mvns	r3, r3
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	4013      	ands	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <HAL_GPIO_Init+0x350>)
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	3301      	adds	r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b0f      	cmp	r3, #15
 8009134:	f67f ae84 	bls.w	8008e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009138:	bf00      	nop
 800913a:	3724      	adds	r7, #36	; 0x24
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	40023800 	.word	0x40023800
 8009148:	40013800 	.word	0x40013800
 800914c:	40020000 	.word	0x40020000
 8009150:	40020400 	.word	0x40020400
 8009154:	40020800 	.word	0x40020800
 8009158:	40020c00 	.word	0x40020c00
 800915c:	40021000 	.word	0x40021000
 8009160:	40021400 	.word	0x40021400
 8009164:	40021800 	.word	0x40021800
 8009168:	40021c00 	.word	0x40021c00
 800916c:	40022000 	.word	0x40022000
 8009170:	40022400 	.word	0x40022400
 8009174:	40013c00 	.word	0x40013c00

08009178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	887b      	ldrh	r3, [r7, #2]
 800918a:	4013      	ands	r3, r2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009190:	2301      	movs	r3, #1
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	e001      	b.n	800919a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	807b      	strh	r3, [r7, #2]
 80091b4:	4613      	mov	r3, r2
 80091b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80091b8:	787b      	ldrb	r3, [r7, #1]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091be:	887a      	ldrh	r2, [r7, #2]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80091c4:	e003      	b.n	80091ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	041a      	lsls	r2, r3, #16
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	619a      	str	r2, [r3, #24]
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091ec:	887a      	ldrh	r2, [r7, #2]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4013      	ands	r3, r2
 80091f2:	041a      	lsls	r2, r3, #16
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	43d9      	mvns	r1, r3
 80091f8:	887b      	ldrh	r3, [r7, #2]
 80091fa:	400b      	ands	r3, r1
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	619a      	str	r2, [r3, #24]
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800921a:	4b08      	ldr	r3, [pc, #32]	; (800923c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800921c:	695a      	ldr	r2, [r3, #20]
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	4013      	ands	r3, r2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009226:	4a05      	ldr	r2, [pc, #20]	; (800923c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f806 	bl	8009240 <HAL_GPIO_EXTI_Callback>
  }
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	40013c00 	.word	0x40013c00

08009240 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009262:	2300      	movs	r3, #0
 8009264:	603b      	str	r3, [r7, #0]
 8009266:	4a20      	ldr	r2, [pc, #128]	; (80092e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009268:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009270:	6413      	str	r3, [r2, #64]	; 0x40
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800927e:	4b1b      	ldr	r3, [pc, #108]	; (80092ec <HAL_PWREx_EnableOverDrive+0x94>)
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009284:	f7ff fc90 	bl	8008ba8 <HAL_GetTick>
 8009288:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800928a:	e009      	b.n	80092a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800928c:	f7ff fc8c 	bl	8008ba8 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800929a:	d901      	bls.n	80092a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e01f      	b.n	80092e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092a0:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ac:	d1ee      	bne.n	800928c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092b4:	f7ff fc78 	bl	8008ba8 <HAL_GetTick>
 80092b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80092ba:	e009      	b.n	80092d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80092bc:	f7ff fc74 	bl	8008ba8 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092ca:	d901      	bls.n	80092d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e007      	b.n	80092e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092dc:	d1ee      	bne.n	80092bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40023800 	.word	0x40023800
 80092ec:	420e0040 	.word	0x420e0040
 80092f0:	40007000 	.word	0x40007000
 80092f4:	420e0044 	.word	0x420e0044

080092f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e264      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d075      	beq.n	8009402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009316:	4ba3      	ldr	r3, [pc, #652]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 030c 	and.w	r3, r3, #12
 800931e:	2b04      	cmp	r3, #4
 8009320:	d00c      	beq.n	800933c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009322:	4ba0      	ldr	r3, [pc, #640]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800932a:	2b08      	cmp	r3, #8
 800932c:	d112      	bne.n	8009354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800932e:	4b9d      	ldr	r3, [pc, #628]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800933a:	d10b      	bne.n	8009354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800933c:	4b99      	ldr	r3, [pc, #612]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d05b      	beq.n	8009400 <HAL_RCC_OscConfig+0x108>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d157      	bne.n	8009400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e23f      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935c:	d106      	bne.n	800936c <HAL_RCC_OscConfig+0x74>
 800935e:	4a91      	ldr	r2, [pc, #580]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009360:	4b90      	ldr	r3, [pc, #576]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	e01d      	b.n	80093a8 <HAL_RCC_OscConfig+0xb0>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009374:	d10c      	bne.n	8009390 <HAL_RCC_OscConfig+0x98>
 8009376:	4a8b      	ldr	r2, [pc, #556]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009378:	4b8a      	ldr	r3, [pc, #552]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	4a88      	ldr	r2, [pc, #544]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009384:	4b87      	ldr	r3, [pc, #540]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	e00b      	b.n	80093a8 <HAL_RCC_OscConfig+0xb0>
 8009390:	4a84      	ldr	r2, [pc, #528]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009392:	4b84      	ldr	r3, [pc, #528]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4a81      	ldr	r2, [pc, #516]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800939e:	4b81      	ldr	r3, [pc, #516]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d013      	beq.n	80093d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b0:	f7ff fbfa 	bl	8008ba8 <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093b8:	f7ff fbf6 	bl	8008ba8 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b64      	cmp	r3, #100	; 0x64
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e204      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093ca:	4b76      	ldr	r3, [pc, #472]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f0      	beq.n	80093b8 <HAL_RCC_OscConfig+0xc0>
 80093d6:	e014      	b.n	8009402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d8:	f7ff fbe6 	bl	8008ba8 <HAL_GetTick>
 80093dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093de:	e008      	b.n	80093f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093e0:	f7ff fbe2 	bl	8008ba8 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b64      	cmp	r3, #100	; 0x64
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e1f0      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093f2:	4b6c      	ldr	r3, [pc, #432]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f0      	bne.n	80093e0 <HAL_RCC_OscConfig+0xe8>
 80093fe:	e000      	b.n	8009402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d063      	beq.n	80094d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800940e:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f003 030c 	and.w	r3, r3, #12
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00b      	beq.n	8009432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800941a:	4b62      	ldr	r3, [pc, #392]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009422:	2b08      	cmp	r3, #8
 8009424:	d11c      	bne.n	8009460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009426:	4b5f      	ldr	r3, [pc, #380]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d116      	bne.n	8009460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009432:	4b5c      	ldr	r3, [pc, #368]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <HAL_RCC_OscConfig+0x152>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d001      	beq.n	800944a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e1c4      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944a:	4956      	ldr	r1, [pc, #344]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800944c:	4b55      	ldr	r3, [pc, #340]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	4313      	orrs	r3, r2
 800945c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800945e:	e03a      	b.n	80094d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d020      	beq.n	80094aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009468:	4b4f      	ldr	r3, [pc, #316]	; (80095a8 <HAL_RCC_OscConfig+0x2b0>)
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946e:	f7ff fb9b 	bl	8008ba8 <HAL_GetTick>
 8009472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009474:	e008      	b.n	8009488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009476:	f7ff fb97 	bl	8008ba8 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e1a5      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009488:	4b46      	ldr	r3, [pc, #280]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0f0      	beq.n	8009476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009494:	4943      	ldr	r1, [pc, #268]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009496:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	600b      	str	r3, [r1, #0]
 80094a8:	e015      	b.n	80094d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094aa:	4b3f      	ldr	r3, [pc, #252]	; (80095a8 <HAL_RCC_OscConfig+0x2b0>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b0:	f7ff fb7a 	bl	8008ba8 <HAL_GetTick>
 80094b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094b6:	e008      	b.n	80094ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094b8:	f7ff fb76 	bl	8008ba8 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e184      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ca:	4b36      	ldr	r3, [pc, #216]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1f0      	bne.n	80094b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d030      	beq.n	8009544 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d016      	beq.n	8009518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ea:	4b30      	ldr	r3, [pc, #192]	; (80095ac <HAL_RCC_OscConfig+0x2b4>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f0:	f7ff fb5a 	bl	8008ba8 <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094f8:	f7ff fb56 	bl	8008ba8 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b02      	cmp	r3, #2
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e164      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800950a:	4b26      	ldr	r3, [pc, #152]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800950c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f0      	beq.n	80094f8 <HAL_RCC_OscConfig+0x200>
 8009516:	e015      	b.n	8009544 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <HAL_RCC_OscConfig+0x2b4>)
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800951e:	f7ff fb43 	bl	8008ba8 <HAL_GetTick>
 8009522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009524:	e008      	b.n	8009538 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009526:	f7ff fb3f 	bl	8008ba8 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b02      	cmp	r3, #2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e14d      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800953a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1f0      	bne.n	8009526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80a0 	beq.w	8009692 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009552:	2300      	movs	r3, #0
 8009554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10f      	bne.n	8009582 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009562:	2300      	movs	r3, #0
 8009564:	60bb      	str	r3, [r7, #8]
 8009566:	4a0f      	ldr	r2, [pc, #60]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009570:	6413      	str	r3, [r2, #64]	; 0x40
 8009572:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <HAL_RCC_OscConfig+0x2ac>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009582:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <HAL_RCC_OscConfig+0x2b8>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958a:	2b00      	cmp	r3, #0
 800958c:	d121      	bne.n	80095d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800958e:	4a08      	ldr	r2, [pc, #32]	; (80095b0 <HAL_RCC_OscConfig+0x2b8>)
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_RCC_OscConfig+0x2b8>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800959a:	f7ff fb05 	bl	8008ba8 <HAL_GetTick>
 800959e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095a0:	e011      	b.n	80095c6 <HAL_RCC_OscConfig+0x2ce>
 80095a2:	bf00      	nop
 80095a4:	40023800 	.word	0x40023800
 80095a8:	42470000 	.word	0x42470000
 80095ac:	42470e80 	.word	0x42470e80
 80095b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095b4:	f7ff faf8 	bl	8008ba8 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e106      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c6:	4b85      	ldr	r3, [pc, #532]	; (80097dc <HAL_RCC_OscConfig+0x4e4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f0      	beq.n	80095b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d106      	bne.n	80095e8 <HAL_RCC_OscConfig+0x2f0>
 80095da:	4a81      	ldr	r2, [pc, #516]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80095dc:	4b80      	ldr	r3, [pc, #512]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80095de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	6713      	str	r3, [r2, #112]	; 0x70
 80095e6:	e01c      	b.n	8009622 <HAL_RCC_OscConfig+0x32a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b05      	cmp	r3, #5
 80095ee:	d10c      	bne.n	800960a <HAL_RCC_OscConfig+0x312>
 80095f0:	4a7b      	ldr	r2, [pc, #492]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80095f2:	4b7b      	ldr	r3, [pc, #492]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80095f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f6:	f043 0304 	orr.w	r3, r3, #4
 80095fa:	6713      	str	r3, [r2, #112]	; 0x70
 80095fc:	4a78      	ldr	r2, [pc, #480]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80095fe:	4b78      	ldr	r3, [pc, #480]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	6713      	str	r3, [r2, #112]	; 0x70
 8009608:	e00b      	b.n	8009622 <HAL_RCC_OscConfig+0x32a>
 800960a:	4a75      	ldr	r2, [pc, #468]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800960c:	4b74      	ldr	r3, [pc, #464]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800960e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	6713      	str	r3, [r2, #112]	; 0x70
 8009616:	4a72      	ldr	r2, [pc, #456]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009618:	4b71      	ldr	r3, [pc, #452]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800961a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961c:	f023 0304 	bic.w	r3, r3, #4
 8009620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d015      	beq.n	8009656 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800962a:	f7ff fabd 	bl	8008ba8 <HAL_GetTick>
 800962e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009630:	e00a      	b.n	8009648 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009632:	f7ff fab9 	bl	8008ba8 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009640:	4293      	cmp	r3, r2
 8009642:	d901      	bls.n	8009648 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e0c5      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009648:	4b65      	ldr	r3, [pc, #404]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800964a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964c:	f003 0302 	and.w	r3, r3, #2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0ee      	beq.n	8009632 <HAL_RCC_OscConfig+0x33a>
 8009654:	e014      	b.n	8009680 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009656:	f7ff faa7 	bl	8008ba8 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800965c:	e00a      	b.n	8009674 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800965e:	f7ff faa3 	bl	8008ba8 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	f241 3288 	movw	r2, #5000	; 0x1388
 800966c:	4293      	cmp	r3, r2
 800966e:	d901      	bls.n	8009674 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e0af      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009674:	4b5a      	ldr	r3, [pc, #360]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1ee      	bne.n	800965e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d105      	bne.n	8009692 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009686:	4a56      	ldr	r2, [pc, #344]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009688:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 809b 	beq.w	80097d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800969c:	4b50      	ldr	r3, [pc, #320]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 030c 	and.w	r3, r3, #12
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d05c      	beq.n	8009762 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d141      	bne.n	8009734 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096b0:	4b4c      	ldr	r3, [pc, #304]	; (80097e4 <HAL_RCC_OscConfig+0x4ec>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b6:	f7ff fa77 	bl	8008ba8 <HAL_GetTick>
 80096ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096bc:	e008      	b.n	80096d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096be:	f7ff fa73 	bl	8008ba8 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d901      	bls.n	80096d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e081      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096d0:	4b43      	ldr	r3, [pc, #268]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1f0      	bne.n	80096be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096dc:	4940      	ldr	r1, [pc, #256]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	019b      	lsls	r3, r3, #6
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	3b01      	subs	r3, #1
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	061b      	lsls	r3, r3, #24
 8009702:	4313      	orrs	r3, r2
 8009704:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009706:	4b37      	ldr	r3, [pc, #220]	; (80097e4 <HAL_RCC_OscConfig+0x4ec>)
 8009708:	2201      	movs	r2, #1
 800970a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970c:	f7ff fa4c 	bl	8008ba8 <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009714:	f7ff fa48 	bl	8008ba8 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e056      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009726:	4b2e      	ldr	r3, [pc, #184]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0f0      	beq.n	8009714 <HAL_RCC_OscConfig+0x41c>
 8009732:	e04e      	b.n	80097d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009734:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <HAL_RCC_OscConfig+0x4ec>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800973a:	f7ff fa35 	bl	8008ba8 <HAL_GetTick>
 800973e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009740:	e008      	b.n	8009754 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009742:	f7ff fa31 	bl	8008ba8 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d901      	bls.n	8009754 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e03f      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009754:	4b22      	ldr	r3, [pc, #136]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1f0      	bne.n	8009742 <HAL_RCC_OscConfig+0x44a>
 8009760:	e037      	b.n	80097d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e032      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800976e:	4b1c      	ldr	r3, [pc, #112]	; (80097e0 <HAL_RCC_OscConfig+0x4e8>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d028      	beq.n	80097ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009786:	429a      	cmp	r2, r3
 8009788:	d121      	bne.n	80097ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009794:	429a      	cmp	r2, r3
 8009796:	d11a      	bne.n	80097ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800979e:	4013      	ands	r3, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d111      	bne.n	80097ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b4:	085b      	lsrs	r3, r3, #1
 80097b6:	3b01      	subs	r3, #1
 80097b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d107      	bne.n	80097ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d001      	beq.n	80097d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	40007000 	.word	0x40007000
 80097e0:	40023800 	.word	0x40023800
 80097e4:	42470060 	.word	0x42470060

080097e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0cc      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80097fc:	4b68      	ldr	r3, [pc, #416]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 020f 	and.w	r2, r3, #15
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d20c      	bcs.n	8009824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980a:	4b65      	ldr	r3, [pc, #404]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009812:	4b63      	ldr	r3, [pc, #396]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 020f 	and.w	r2, r3, #15
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d001      	beq.n	8009824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e0b8      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d020      	beq.n	8009872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800983c:	4a59      	ldr	r2, [pc, #356]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 800983e:	4b59      	ldr	r3, [pc, #356]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009854:	4a53      	ldr	r2, [pc, #332]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009856:	4b53      	ldr	r3, [pc, #332]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800985e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009860:	4950      	ldr	r1, [pc, #320]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009862:	4b50      	ldr	r3, [pc, #320]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4313      	orrs	r3, r2
 8009870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d044      	beq.n	8009908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d107      	bne.n	8009896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009886:	4b47      	ldr	r3, [pc, #284]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d119      	bne.n	80098c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e07f      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d003      	beq.n	80098a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d107      	bne.n	80098b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098a6:	4b3f      	ldr	r3, [pc, #252]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d109      	bne.n	80098c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e06f      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098b6:	4b3b      	ldr	r3, [pc, #236]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e067      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098c6:	4937      	ldr	r1, [pc, #220]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 80098c8:	4b36      	ldr	r3, [pc, #216]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f023 0203 	bic.w	r2, r3, #3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098d8:	f7ff f966 	bl	8008ba8 <HAL_GetTick>
 80098dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098de:	e00a      	b.n	80098f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098e0:	f7ff f962 	bl	8008ba8 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e04f      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098f6:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f003 020c 	and.w	r2, r3, #12
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	429a      	cmp	r2, r3
 8009906:	d1eb      	bne.n	80098e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009908:	4b25      	ldr	r3, [pc, #148]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d90c      	bls.n	8009930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009916:	4b22      	ldr	r3, [pc, #136]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800991e:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 020f 	and.w	r2, r3, #15
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d001      	beq.n	8009930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e032      	b.n	8009996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d008      	beq.n	800994e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800993c:	4919      	ldr	r1, [pc, #100]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 800993e:	4b19      	ldr	r3, [pc, #100]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800995a:	4912      	ldr	r1, [pc, #72]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	4313      	orrs	r3, r2
 800996c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800996e:	f000 f821 	bl	80099b4 <HAL_RCC_GetSysClockFreq>
 8009972:	4601      	mov	r1, r0
 8009974:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	091b      	lsrs	r3, r3, #4
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009980:	5cd3      	ldrb	r3, [r2, r3]
 8009982:	fa21 f303 	lsr.w	r3, r1, r3
 8009986:	4a09      	ldr	r2, [pc, #36]	; (80099ac <HAL_RCC_ClockConfig+0x1c4>)
 8009988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800998a:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <HAL_RCC_ClockConfig+0x1c8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff f8c6 	bl	8008b20 <HAL_InitTick>

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40023c00 	.word	0x40023c00
 80099a4:	40023800 	.word	0x40023800
 80099a8:	0800aafc 	.word	0x0800aafc
 80099ac:	20000000 	.word	0x20000000
 80099b0:	20000004 	.word	0x20000004

080099b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	b08f      	sub	sp, #60	; 0x3c
 80099ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
 80099c4:	2300      	movs	r3, #0
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099cc:	4b62      	ldr	r3, [pc, #392]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f003 030c 	and.w	r3, r3, #12
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d007      	beq.n	80099e8 <HAL_RCC_GetSysClockFreq+0x34>
 80099d8:	2b08      	cmp	r3, #8
 80099da:	d008      	beq.n	80099ee <HAL_RCC_GetSysClockFreq+0x3a>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 80b2 	bne.w	8009b46 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80099e2:	4b5e      	ldr	r3, [pc, #376]	; (8009b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80099e4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80099e6:	e0b1      	b.n	8009b4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80099e8:	4b5d      	ldr	r3, [pc, #372]	; (8009b60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80099ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80099ec:	e0ae      	b.n	8009b4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099ee:	4b5a      	ldr	r3, [pc, #360]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80099f8:	4b57      	ldr	r3, [pc, #348]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d04e      	beq.n	8009aa2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a04:	4b54      	ldr	r3, [pc, #336]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	099b      	lsrs	r3, r3, #6
 8009a0a:	f04f 0400 	mov.w	r4, #0
 8009a0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	ea01 0103 	and.w	r1, r1, r3
 8009a1a:	ea02 0204 	and.w	r2, r2, r4
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4614      	mov	r4, r2
 8009a22:	0160      	lsls	r0, r4, #5
 8009a24:	6278      	str	r0, [r7, #36]	; 0x24
 8009a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a28:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8009a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8009a2e:	015b      	lsls	r3, r3, #5
 8009a30:	623b      	str	r3, [r7, #32]
 8009a32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009a36:	1a5b      	subs	r3, r3, r1
 8009a38:	eb64 0402 	sbc.w	r4, r4, r2
 8009a3c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8009a40:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8009a44:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8009a48:	ebb8 0803 	subs.w	r8, r8, r3
 8009a4c:	eb69 0904 	sbc.w	r9, r9, r4
 8009a50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a54:	61fb      	str	r3, [r7, #28]
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009a62:	61bb      	str	r3, [r7, #24]
 8009a64:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009a68:	eb18 0801 	adds.w	r8, r8, r1
 8009a6c:	eb49 0902 	adc.w	r9, r9, r2
 8009a70:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	f04f 0400 	mov.w	r4, #0
 8009a92:	461a      	mov	r2, r3
 8009a94:	4623      	mov	r3, r4
 8009a96:	f7fe fc03 	bl	80082a0 <__aeabi_uldivmod>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa0:	e043      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009aa2:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	099b      	lsrs	r3, r3, #6
 8009aa8:	f04f 0400 	mov.w	r4, #0
 8009aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	ea01 0103 	and.w	r1, r1, r3
 8009ab8:	ea02 0204 	and.w	r2, r2, r4
 8009abc:	460b      	mov	r3, r1
 8009abe:	4614      	mov	r4, r2
 8009ac0:	0160      	lsls	r0, r4, #5
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	015b      	lsls	r3, r3, #5
 8009ace:	60bb      	str	r3, [r7, #8]
 8009ad0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009ad4:	1a5b      	subs	r3, r3, r1
 8009ad6:	eb64 0402 	sbc.w	r4, r4, r2
 8009ada:	01a6      	lsls	r6, r4, #6
 8009adc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8009ae0:	019d      	lsls	r5, r3, #6
 8009ae2:	1aed      	subs	r5, r5, r3
 8009ae4:	eb66 0604 	sbc.w	r6, r6, r4
 8009ae8:	00f3      	lsls	r3, r6, #3
 8009aea:	607b      	str	r3, [r7, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	00eb      	lsls	r3, r5, #3
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8009afc:	186d      	adds	r5, r5, r1
 8009afe:	eb46 0602 	adc.w	r6, r6, r2
 8009b02:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8009b06:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8009b0a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8009b0e:	4655      	mov	r5, sl
 8009b10:	465e      	mov	r6, fp
 8009b12:	4628      	mov	r0, r5
 8009b14:	4631      	mov	r1, r6
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	f04f 0400 	mov.w	r4, #0
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4623      	mov	r3, r4
 8009b20:	f7fe fbbe 	bl	80082a0 <__aeabi_uldivmod>
 8009b24:	4603      	mov	r3, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	0c1b      	lsrs	r3, r3, #16
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	3301      	adds	r3, #1
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8009b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009b44:	e002      	b.n	8009b4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009b48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	373c      	adds	r7, #60	; 0x3c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	00f42400 	.word	0x00f42400
 8009b60:	007a1200 	.word	0x007a1200

08009b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b68:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000000 	.word	0x20000000

08009b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b80:	f7ff fff0 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009b84:	4601      	mov	r1, r0
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	0a9b      	lsrs	r3, r3, #10
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	4a03      	ldr	r2, [pc, #12]	; (8009ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b92:	5cd3      	ldrb	r3, [r2, r3]
 8009b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	40023800 	.word	0x40023800
 8009ba0:	0800ab0c 	.word	0x0800ab0c

08009ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ba8:	f7ff ffdc 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bac:	4601      	mov	r1, r0
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	0b5b      	lsrs	r3, r3, #13
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	4a03      	ldr	r2, [pc, #12]	; (8009bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bba:	5cd3      	ldrb	r3, [r2, r3]
 8009bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40023800 	.word	0x40023800
 8009bc8:	0800ab0c 	.word	0x0800ab0c

08009bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e03f      	b.n	8009c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fe fe6e 	bl	80088d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2224      	movs	r2, #36	; 0x24
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	68d2      	ldr	r2, [r2, #12]
 8009c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f927 	bl	8009e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	6912      	ldr	r2, [r2, #16]
 8009c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6812      	ldr	r2, [r2, #0]
 8009c2e:	6952      	ldr	r2, [r2, #20]
 8009c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	68d2      	ldr	r2, [r2, #12]
 8009c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b08a      	sub	sp, #40	; 0x28
 8009c6a:	af02      	add	r7, sp, #8
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	603b      	str	r3, [r7, #0]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d17b      	bne.n	8009d7e <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <HAL_UART_Transmit+0x2c>
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e074      	b.n	8009d80 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d101      	bne.n	8009ca4 <HAL_UART_Transmit+0x3e>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e06d      	b.n	8009d80 <HAL_UART_Transmit+0x11a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2221      	movs	r2, #33	; 0x21
 8009cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cba:	f7fe ff75 	bl	8008ba8 <HAL_GetTick>
 8009cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	88fa      	ldrh	r2, [r7, #6]
 8009cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	88fa      	ldrh	r2, [r7, #6]
 8009cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd4:	d108      	bne.n	8009ce8 <HAL_UART_Transmit+0x82>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	61bb      	str	r3, [r7, #24]
 8009ce6:	e003      	b.n	8009cf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cec:	2300      	movs	r3, #0
 8009cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cf8:	e029      	b.n	8009d4e <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2200      	movs	r2, #0
 8009d02:	2180      	movs	r1, #128	; 0x80
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f83f 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e035      	b.n	8009d80 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	8812      	ldrh	r2, [r2, #0]
 8009d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e007      	b.n	8009d40 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	7812      	ldrb	r2, [r2, #0]
 8009d38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1d0      	bne.n	8009cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2140      	movs	r1, #64	; 0x40
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 f810 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e006      	b.n	8009d80 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e000      	b.n	8009d80 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009d7e:	2302      	movs	r3, #2
  }
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b090      	sub	sp, #64	; 0x40
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d98:	e050      	b.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d04c      	beq.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009da8:	f7fe fefe 	bl	8008ba8 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d941      	bls.n	8009e3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8009dda:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e5      	bne.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3314      	adds	r3, #20
 8009df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f023 0301 	bic.w	r3, r3, #1
 8009e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0c:	623a      	str	r2, [r7, #32]
 8009e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	69f9      	ldr	r1, [r7, #28]
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e5      	bne.n	8009dec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e00f      	b.n	8009e5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	401a      	ands	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	bf0c      	ite	eq
 8009e4c:	2301      	moveq	r3, #1
 8009e4e:	2300      	movne	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d09f      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3740      	adds	r7, #64	; 0x40
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	b091      	sub	sp, #68	; 0x44
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	6819      	ldr	r1, [r3, #0]
 8009e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8009eaa:	f022 020c 	bic.w	r2, r2, #12
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	6819      	ldr	r1, [r3, #0]
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4bba      	ldr	r3, [pc, #744]	; (800a1b8 <UART_SetConfig+0x354>)
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d004      	beq.n	8009ede <UART_SetConfig+0x7a>
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	4bb8      	ldr	r3, [pc, #736]	; (800a1bc <UART_SetConfig+0x358>)
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d103      	bne.n	8009ee6 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ede:	f7ff fe61 	bl	8009ba4 <HAL_RCC_GetPCLK2Freq>
 8009ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009ee4:	e002      	b.n	8009eec <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ee6:	f7ff fe49 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 8009eea:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef4:	f040 80a7 	bne.w	800a046 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	62ba      	str	r2, [r7, #40]	; 0x28
 8009efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f00:	4619      	mov	r1, r3
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	18db      	adds	r3, r3, r3
 8009f0c:	eb44 0404 	adc.w	r4, r4, r4
 8009f10:	185b      	adds	r3, r3, r1
 8009f12:	eb44 0402 	adc.w	r4, r4, r2
 8009f16:	00e0      	lsls	r0, r4, #3
 8009f18:	6178      	str	r0, [r7, #20]
 8009f1a:	6978      	ldr	r0, [r7, #20]
 8009f1c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8009f20:	6178      	str	r0, [r7, #20]
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009f2a:	185d      	adds	r5, r3, r1
 8009f2c:	eb44 0602 	adc.w	r6, r4, r2
 8009f30:	4628      	mov	r0, r5
 8009f32:	4631      	mov	r1, r6
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f04f 0400 	mov.w	r4, #0
 8009f3c:	18db      	adds	r3, r3, r3
 8009f3e:	eb44 0404 	adc.w	r4, r4, r4
 8009f42:	461a      	mov	r2, r3
 8009f44:	4623      	mov	r3, r4
 8009f46:	f7fe f9ab 	bl	80082a0 <__aeabi_uldivmod>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4b9b      	ldr	r3, [pc, #620]	; (800a1c0 <UART_SetConfig+0x35c>)
 8009f52:	fba3 2302 	umull	r2, r3, r3, r2
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	011e      	lsls	r6, r3, #4
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f04f 0200 	mov.w	r2, #0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4614      	mov	r4, r2
 8009f66:	18db      	adds	r3, r3, r3
 8009f68:	eb44 0404 	adc.w	r4, r4, r4
 8009f6c:	185b      	adds	r3, r3, r1
 8009f6e:	eb44 0402 	adc.w	r4, r4, r2
 8009f72:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8009f76:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8009f7a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8009f7e:	4653      	mov	r3, sl
 8009f80:	465c      	mov	r4, fp
 8009f82:	eb13 0a01 	adds.w	sl, r3, r1
 8009f86:	eb44 0b02 	adc.w	fp, r4, r2
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f04f 0400 	mov.w	r4, #0
 8009f96:	18db      	adds	r3, r3, r3
 8009f98:	eb44 0404 	adc.w	r4, r4, r4
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4623      	mov	r3, r4
 8009fa0:	f7fe f97e 	bl	80082a0 <__aeabi_uldivmod>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4b85      	ldr	r3, [pc, #532]	; (800a1c0 <UART_SetConfig+0x35c>)
 8009fac:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	2164      	movs	r1, #100	; 0x64
 8009fb4:	fb01 f303 	mul.w	r3, r1, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	3332      	adds	r3, #50	; 0x32
 8009fbe:	4a80      	ldr	r2, [pc, #512]	; (800a1c0 <UART_SetConfig+0x35c>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009fcc:	441e      	add	r6, r3
 8009fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4614      	mov	r4, r2
 8009fda:	18db      	adds	r3, r3, r3
 8009fdc:	eb44 0404 	adc.w	r4, r4, r4
 8009fe0:	185b      	adds	r3, r3, r1
 8009fe2:	eb44 0402 	adc.w	r4, r4, r2
 8009fe6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8009fea:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8009fee:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8009ff2:	4643      	mov	r3, r8
 8009ff4:	464c      	mov	r4, r9
 8009ff6:	eb13 0801 	adds.w	r8, r3, r1
 8009ffa:	eb44 0902 	adc.w	r9, r4, r2
 8009ffe:	4640      	mov	r0, r8
 800a000:	4649      	mov	r1, r9
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f04f 0400 	mov.w	r4, #0
 800a00a:	18db      	adds	r3, r3, r3
 800a00c:	eb44 0404 	adc.w	r4, r4, r4
 800a010:	461a      	mov	r2, r3
 800a012:	4623      	mov	r3, r4
 800a014:	f7fe f944 	bl	80082a0 <__aeabi_uldivmod>
 800a018:	4603      	mov	r3, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b68      	ldr	r3, [pc, #416]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a020:	fba3 1302 	umull	r1, r3, r3, r2
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	2164      	movs	r1, #100	; 0x64
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	3332      	adds	r3, #50	; 0x32
 800a032:	4a63      	ldr	r2, [pc, #396]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a034:	fba2 2303 	umull	r2, r3, r2, r3
 800a038:	095b      	lsrs	r3, r3, #5
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	4433      	add	r3, r6
 800a040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a042:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a044:	e0b3      	b.n	800a1ae <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04e:	4619      	mov	r1, r3
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	460b      	mov	r3, r1
 800a056:	4614      	mov	r4, r2
 800a058:	18db      	adds	r3, r3, r3
 800a05a:	eb44 0404 	adc.w	r4, r4, r4
 800a05e:	185b      	adds	r3, r3, r1
 800a060:	eb44 0402 	adc.w	r4, r4, r2
 800a064:	00e6      	lsls	r6, r4, #3
 800a066:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800a06a:	00dd      	lsls	r5, r3, #3
 800a06c:	462b      	mov	r3, r5
 800a06e:	4634      	mov	r4, r6
 800a070:	185d      	adds	r5, r3, r1
 800a072:	eb44 0602 	adc.w	r6, r4, r2
 800a076:	4628      	mov	r0, r5
 800a078:	4631      	mov	r1, r6
 800a07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f04f 0400 	mov.w	r4, #0
 800a082:	00a5      	lsls	r5, r4, #2
 800a084:	62fd      	str	r5, [r7, #44]	; 0x2c
 800a086:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a088:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800a08c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800a08e:	009c      	lsls	r4, r3, #2
 800a090:	62bc      	str	r4, [r7, #40]	; 0x28
 800a092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a096:	f7fe f903 	bl	80082a0 <__aeabi_uldivmod>
 800a09a:	4603      	mov	r3, r0
 800a09c:	460c      	mov	r4, r1
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4b47      	ldr	r3, [pc, #284]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a0a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	011d      	lsls	r5, r3, #4
 800a0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	18db      	adds	r3, r3, r3
 800a0b8:	eb44 0404 	adc.w	r4, r4, r4
 800a0bc:	185b      	adds	r3, r3, r1
 800a0be:	eb44 0402 	adc.w	r4, r4, r2
 800a0c2:	00e0      	lsls	r0, r4, #3
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	00d8      	lsls	r0, r3, #3
 800a0d0:	60b8      	str	r0, [r7, #8]
 800a0d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a0d6:	eb13 0801 	adds.w	r8, r3, r1
 800a0da:	eb44 0902 	adc.w	r9, r4, r2
 800a0de:	4640      	mov	r0, r8
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f04f 0400 	mov.w	r4, #0
 800a0ea:	00a6      	lsls	r6, r4, #2
 800a0ec:	627e      	str	r6, [r7, #36]	; 0x24
 800a0ee:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800a0f0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800a0f4:	627e      	str	r6, [r7, #36]	; 0x24
 800a0f6:	009c      	lsls	r4, r3, #2
 800a0f8:	623c      	str	r4, [r7, #32]
 800a0fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0fe:	f7fe f8cf 	bl	80082a0 <__aeabi_uldivmod>
 800a102:	4603      	mov	r3, r0
 800a104:	460c      	mov	r4, r1
 800a106:	461a      	mov	r2, r3
 800a108:	4b2d      	ldr	r3, [pc, #180]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a10a:	fba3 1302 	umull	r1, r3, r3, r2
 800a10e:	095b      	lsrs	r3, r3, #5
 800a110:	2164      	movs	r1, #100	; 0x64
 800a112:	fb01 f303 	mul.w	r3, r1, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	3332      	adds	r3, #50	; 0x32
 800a11c:	4a28      	ldr	r2, [pc, #160]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a11e:	fba2 1303 	umull	r1, r3, r2, r3
 800a122:	095b      	lsrs	r3, r3, #5
 800a124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a128:	441d      	add	r5, r3
 800a12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12c:	4619      	mov	r1, r3
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	460b      	mov	r3, r1
 800a134:	4614      	mov	r4, r2
 800a136:	18db      	adds	r3, r3, r3
 800a138:	eb44 0404 	adc.w	r4, r4, r4
 800a13c:	185b      	adds	r3, r3, r1
 800a13e:	eb44 0402 	adc.w	r4, r4, r2
 800a142:	00e0      	lsls	r0, r4, #3
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	00d8      	lsls	r0, r3, #3
 800a150:	6038      	str	r0, [r7, #0]
 800a152:	e897 0018 	ldmia.w	r7, {r3, r4}
 800a156:	eb13 0801 	adds.w	r8, r3, r1
 800a15a:	eb44 0902 	adc.w	r9, r4, r2
 800a15e:	4640      	mov	r0, r8
 800a160:	4649      	mov	r1, r9
 800a162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f04f 0400 	mov.w	r4, #0
 800a16a:	00a6      	lsls	r6, r4, #2
 800a16c:	61fe      	str	r6, [r7, #28]
 800a16e:	69fe      	ldr	r6, [r7, #28]
 800a170:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800a174:	61fe      	str	r6, [r7, #28]
 800a176:	009c      	lsls	r4, r3, #2
 800a178:	61bc      	str	r4, [r7, #24]
 800a17a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a17e:	f7fe f88f 	bl	80082a0 <__aeabi_uldivmod>
 800a182:	4603      	mov	r3, r0
 800a184:	460c      	mov	r4, r1
 800a186:	461a      	mov	r2, r3
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a18a:	fba3 1302 	umull	r1, r3, r3, r2
 800a18e:	095b      	lsrs	r3, r3, #5
 800a190:	2164      	movs	r1, #100	; 0x64
 800a192:	fb01 f303 	mul.w	r3, r1, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	011b      	lsls	r3, r3, #4
 800a19a:	3332      	adds	r3, #50	; 0x32
 800a19c:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <UART_SetConfig+0x35c>)
 800a19e:	fba2 1303 	umull	r1, r3, r2, r3
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	442b      	add	r3, r5
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	6093      	str	r3, [r2, #8]
}
 800a1ae:	bf00      	nop
 800a1b0:	3744      	adds	r7, #68	; 0x44
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b8:	40011000 	.word	0x40011000
 800a1bc:	40011400 	.word	0x40011400
 800a1c0:	51eb851f 	.word	0x51eb851f

0800a1c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a1c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a1fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a1c8:	480d      	ldr	r0, [pc, #52]	; (800a200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a1ca:	490e      	ldr	r1, [pc, #56]	; (800a204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a1cc:	4a0e      	ldr	r2, [pc, #56]	; (800a208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a1ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1d0:	e002      	b.n	800a1d8 <LoopCopyDataInit>

0800a1d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a1d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a1d6:	3304      	adds	r3, #4

0800a1d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a1d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a1da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a1dc:	d3f9      	bcc.n	800a1d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a1de:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a1e0:	4c0b      	ldr	r4, [pc, #44]	; (800a210 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a1e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a1e4:	e001      	b.n	800a1ea <LoopFillZerobss>

0800a1e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a1e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a1e8:	3204      	adds	r2, #4

0800a1ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a1ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a1ec:	d3fb      	bcc.n	800a1e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a1ee:	f7fe fc5f 	bl	8008ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1f2:	f000 f817 	bl	800a224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1f6:	f7fe f9db 	bl	80085b0 <main>
  bx  lr    
 800a1fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a1fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800a200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a204:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800a208:	0800ab58 	.word	0x0800ab58
  ldr r2, =_sbss
 800a20c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800a210:	20000128 	.word	0x20000128

0800a214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a214:	e7fe      	b.n	800a214 <ADC_IRQHandler>
	...

0800a218 <__errno>:
 800a218:	4b01      	ldr	r3, [pc, #4]	; (800a220 <__errno+0x8>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	2000000c 	.word	0x2000000c

0800a224 <__libc_init_array>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0d      	ldr	r6, [pc, #52]	; (800a25c <__libc_init_array+0x38>)
 800a228:	4c0d      	ldr	r4, [pc, #52]	; (800a260 <__libc_init_array+0x3c>)
 800a22a:	1ba4      	subs	r4, r4, r6
 800a22c:	10a4      	asrs	r4, r4, #2
 800a22e:	2500      	movs	r5, #0
 800a230:	42a5      	cmp	r5, r4
 800a232:	d109      	bne.n	800a248 <__libc_init_array+0x24>
 800a234:	4e0b      	ldr	r6, [pc, #44]	; (800a264 <__libc_init_array+0x40>)
 800a236:	4c0c      	ldr	r4, [pc, #48]	; (800a268 <__libc_init_array+0x44>)
 800a238:	f000 fc3c 	bl	800aab4 <_init>
 800a23c:	1ba4      	subs	r4, r4, r6
 800a23e:	10a4      	asrs	r4, r4, #2
 800a240:	2500      	movs	r5, #0
 800a242:	42a5      	cmp	r5, r4
 800a244:	d105      	bne.n	800a252 <__libc_init_array+0x2e>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24c:	4798      	blx	r3
 800a24e:	3501      	adds	r5, #1
 800a250:	e7ee      	b.n	800a230 <__libc_init_array+0xc>
 800a252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a256:	4798      	blx	r3
 800a258:	3501      	adds	r5, #1
 800a25a:	e7f2      	b.n	800a242 <__libc_init_array+0x1e>
 800a25c:	0800ab50 	.word	0x0800ab50
 800a260:	0800ab50 	.word	0x0800ab50
 800a264:	0800ab50 	.word	0x0800ab50
 800a268:	0800ab54 	.word	0x0800ab54

0800a26c <memset>:
 800a26c:	4402      	add	r2, r0
 800a26e:	4603      	mov	r3, r0
 800a270:	4293      	cmp	r3, r2
 800a272:	d100      	bne.n	800a276 <memset+0xa>
 800a274:	4770      	bx	lr
 800a276:	f803 1b01 	strb.w	r1, [r3], #1
 800a27a:	e7f9      	b.n	800a270 <memset+0x4>

0800a27c <_vsiprintf_r>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	b09a      	sub	sp, #104	; 0x68
 800a280:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a284:	9100      	str	r1, [sp, #0]
 800a286:	9104      	str	r1, [sp, #16]
 800a288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a28c:	9102      	str	r1, [sp, #8]
 800a28e:	9105      	str	r1, [sp, #20]
 800a290:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a294:	f8ad 100e 	strh.w	r1, [sp, #14]
 800a298:	4669      	mov	r1, sp
 800a29a:	f8ad 400c 	strh.w	r4, [sp, #12]
 800a29e:	f000 f86b 	bl	800a378 <_svfiprintf_r>
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	b01a      	add	sp, #104	; 0x68
 800a2aa:	bd10      	pop	{r4, pc}

0800a2ac <vsiprintf>:
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	4601      	mov	r1, r0
 800a2b2:	4802      	ldr	r0, [pc, #8]	; (800a2bc <vsiprintf+0x10>)
 800a2b4:	6800      	ldr	r0, [r0, #0]
 800a2b6:	f7ff bfe1 	b.w	800a27c <_vsiprintf_r>
 800a2ba:	bf00      	nop
 800a2bc:	2000000c 	.word	0x2000000c

0800a2c0 <__ssputs_r>:
 800a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	688e      	ldr	r6, [r1, #8]
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4691      	mov	r9, r2
 800a2ce:	4698      	mov	r8, r3
 800a2d0:	d835      	bhi.n	800a33e <__ssputs_r+0x7e>
 800a2d2:	898a      	ldrh	r2, [r1, #12]
 800a2d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2d8:	d031      	beq.n	800a33e <__ssputs_r+0x7e>
 800a2da:	6825      	ldr	r5, [r4, #0]
 800a2dc:	6909      	ldr	r1, [r1, #16]
 800a2de:	1a6f      	subs	r7, r5, r1
 800a2e0:	6965      	ldr	r5, [r4, #20]
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a2ec:	f108 0301 	add.w	r3, r8, #1
 800a2f0:	443b      	add	r3, r7
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	bf38      	it	cc
 800a2f6:	461d      	movcc	r5, r3
 800a2f8:	0553      	lsls	r3, r2, #21
 800a2fa:	d531      	bpl.n	800a360 <__ssputs_r+0xa0>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f000 fb39 	bl	800a974 <_malloc_r>
 800a302:	4606      	mov	r6, r0
 800a304:	b950      	cbnz	r0, 800a31c <__ssputs_r+0x5c>
 800a306:	230c      	movs	r3, #12
 800a308:	f8ca 3000 	str.w	r3, [sl]
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31c:	463a      	mov	r2, r7
 800a31e:	6921      	ldr	r1, [r4, #16]
 800a320:	f000 fab4 	bl	800a88c <memcpy>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	6126      	str	r6, [r4, #16]
 800a332:	6165      	str	r5, [r4, #20]
 800a334:	443e      	add	r6, r7
 800a336:	1bed      	subs	r5, r5, r7
 800a338:	6026      	str	r6, [r4, #0]
 800a33a:	60a5      	str	r5, [r4, #8]
 800a33c:	4646      	mov	r6, r8
 800a33e:	4546      	cmp	r6, r8
 800a340:	bf28      	it	cs
 800a342:	4646      	movcs	r6, r8
 800a344:	4632      	mov	r2, r6
 800a346:	4649      	mov	r1, r9
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	f000 faaa 	bl	800a8a2 <memmove>
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	441e      	add	r6, r3
 800a358:	6026      	str	r6, [r4, #0]
 800a35a:	2000      	movs	r0, #0
 800a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a360:	462a      	mov	r2, r5
 800a362:	f000 fb65 	bl	800aa30 <_realloc_r>
 800a366:	4606      	mov	r6, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	d1e1      	bne.n	800a330 <__ssputs_r+0x70>
 800a36c:	6921      	ldr	r1, [r4, #16]
 800a36e:	4650      	mov	r0, sl
 800a370:	f000 fab2 	bl	800a8d8 <_free_r>
 800a374:	e7c7      	b.n	800a306 <__ssputs_r+0x46>
	...

0800a378 <_svfiprintf_r>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	b09d      	sub	sp, #116	; 0x74
 800a37e:	4680      	mov	r8, r0
 800a380:	9303      	str	r3, [sp, #12]
 800a382:	898b      	ldrh	r3, [r1, #12]
 800a384:	061c      	lsls	r4, r3, #24
 800a386:	460d      	mov	r5, r1
 800a388:	4616      	mov	r6, r2
 800a38a:	d50f      	bpl.n	800a3ac <_svfiprintf_r+0x34>
 800a38c:	690b      	ldr	r3, [r1, #16]
 800a38e:	b96b      	cbnz	r3, 800a3ac <_svfiprintf_r+0x34>
 800a390:	2140      	movs	r1, #64	; 0x40
 800a392:	f000 faef 	bl	800a974 <_malloc_r>
 800a396:	6028      	str	r0, [r5, #0]
 800a398:	6128      	str	r0, [r5, #16]
 800a39a:	b928      	cbnz	r0, 800a3a8 <_svfiprintf_r+0x30>
 800a39c:	230c      	movs	r3, #12
 800a39e:	f8c8 3000 	str.w	r3, [r8]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e0c5      	b.n	800a534 <_svfiprintf_r+0x1bc>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	616b      	str	r3, [r5, #20]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b6:	2330      	movs	r3, #48	; 0x30
 800a3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3bc:	f04f 0b01 	mov.w	fp, #1
 800a3c0:	4637      	mov	r7, r6
 800a3c2:	463c      	mov	r4, r7
 800a3c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d13c      	bne.n	800a446 <_svfiprintf_r+0xce>
 800a3cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a3d0:	d00b      	beq.n	800a3ea <_svfiprintf_r+0x72>
 800a3d2:	4653      	mov	r3, sl
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4640      	mov	r0, r8
 800a3da:	f7ff ff71 	bl	800a2c0 <__ssputs_r>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f000 80a3 	beq.w	800a52a <_svfiprintf_r+0x1b2>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	4453      	add	r3, sl
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	783b      	ldrb	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 809c 	beq.w	800a52a <_svfiprintf_r+0x1b2>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	9205      	str	r2, [sp, #20]
 800a3fe:	9306      	str	r3, [sp, #24]
 800a400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a404:	931a      	str	r3, [sp, #104]	; 0x68
 800a406:	2205      	movs	r2, #5
 800a408:	7821      	ldrb	r1, [r4, #0]
 800a40a:	4850      	ldr	r0, [pc, #320]	; (800a54c <_svfiprintf_r+0x1d4>)
 800a40c:	f7fd fef8 	bl	8008200 <memchr>
 800a410:	1c67      	adds	r7, r4, #1
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	b9d8      	cbnz	r0, 800a44e <_svfiprintf_r+0xd6>
 800a416:	06d9      	lsls	r1, r3, #27
 800a418:	bf44      	itt	mi
 800a41a:	2220      	movmi	r2, #32
 800a41c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a420:	071a      	lsls	r2, r3, #28
 800a422:	bf44      	itt	mi
 800a424:	222b      	movmi	r2, #43	; 0x2b
 800a426:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a42a:	7822      	ldrb	r2, [r4, #0]
 800a42c:	2a2a      	cmp	r2, #42	; 0x2a
 800a42e:	d016      	beq.n	800a45e <_svfiprintf_r+0xe6>
 800a430:	9a07      	ldr	r2, [sp, #28]
 800a432:	2100      	movs	r1, #0
 800a434:	200a      	movs	r0, #10
 800a436:	4627      	mov	r7, r4
 800a438:	3401      	adds	r4, #1
 800a43a:	783b      	ldrb	r3, [r7, #0]
 800a43c:	3b30      	subs	r3, #48	; 0x30
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d951      	bls.n	800a4e6 <_svfiprintf_r+0x16e>
 800a442:	b1c9      	cbz	r1, 800a478 <_svfiprintf_r+0x100>
 800a444:	e011      	b.n	800a46a <_svfiprintf_r+0xf2>
 800a446:	2b25      	cmp	r3, #37	; 0x25
 800a448:	d0c0      	beq.n	800a3cc <_svfiprintf_r+0x54>
 800a44a:	4627      	mov	r7, r4
 800a44c:	e7b9      	b.n	800a3c2 <_svfiprintf_r+0x4a>
 800a44e:	4a3f      	ldr	r2, [pc, #252]	; (800a54c <_svfiprintf_r+0x1d4>)
 800a450:	1a80      	subs	r0, r0, r2
 800a452:	fa0b f000 	lsl.w	r0, fp, r0
 800a456:	4318      	orrs	r0, r3
 800a458:	9004      	str	r0, [sp, #16]
 800a45a:	463c      	mov	r4, r7
 800a45c:	e7d3      	b.n	800a406 <_svfiprintf_r+0x8e>
 800a45e:	9a03      	ldr	r2, [sp, #12]
 800a460:	1d11      	adds	r1, r2, #4
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	9103      	str	r1, [sp, #12]
 800a466:	2a00      	cmp	r2, #0
 800a468:	db01      	blt.n	800a46e <_svfiprintf_r+0xf6>
 800a46a:	9207      	str	r2, [sp, #28]
 800a46c:	e004      	b.n	800a478 <_svfiprintf_r+0x100>
 800a46e:	4252      	negs	r2, r2
 800a470:	f043 0302 	orr.w	r3, r3, #2
 800a474:	9207      	str	r2, [sp, #28]
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	783b      	ldrb	r3, [r7, #0]
 800a47a:	2b2e      	cmp	r3, #46	; 0x2e
 800a47c:	d10e      	bne.n	800a49c <_svfiprintf_r+0x124>
 800a47e:	787b      	ldrb	r3, [r7, #1]
 800a480:	2b2a      	cmp	r3, #42	; 0x2a
 800a482:	f107 0101 	add.w	r1, r7, #1
 800a486:	d132      	bne.n	800a4ee <_svfiprintf_r+0x176>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	9203      	str	r2, [sp, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	bfb8      	it	lt
 800a494:	f04f 33ff 	movlt.w	r3, #4294967295
 800a498:	3702      	adds	r7, #2
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	4c2c      	ldr	r4, [pc, #176]	; (800a550 <_svfiprintf_r+0x1d8>)
 800a49e:	7839      	ldrb	r1, [r7, #0]
 800a4a0:	2203      	movs	r2, #3
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7fd feac 	bl	8008200 <memchr>
 800a4a8:	b138      	cbz	r0, 800a4ba <_svfiprintf_r+0x142>
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	1b00      	subs	r0, r0, r4
 800a4ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b2:	9b04      	ldr	r3, [sp, #16]
 800a4b4:	4303      	orrs	r3, r0
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	3701      	adds	r7, #1
 800a4ba:	7839      	ldrb	r1, [r7, #0]
 800a4bc:	4825      	ldr	r0, [pc, #148]	; (800a554 <_svfiprintf_r+0x1dc>)
 800a4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c2:	2206      	movs	r2, #6
 800a4c4:	1c7e      	adds	r6, r7, #1
 800a4c6:	f7fd fe9b 	bl	8008200 <memchr>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d035      	beq.n	800a53a <_svfiprintf_r+0x1c2>
 800a4ce:	4b22      	ldr	r3, [pc, #136]	; (800a558 <_svfiprintf_r+0x1e0>)
 800a4d0:	b9fb      	cbnz	r3, 800a512 <_svfiprintf_r+0x19a>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	3308      	adds	r3, #8
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	444b      	add	r3, r9
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	e76c      	b.n	800a3c0 <_svfiprintf_r+0x48>
 800a4e6:	fb00 3202 	mla	r2, r0, r2, r3
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	e7a3      	b.n	800a436 <_svfiprintf_r+0xbe>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9305      	str	r3, [sp, #20]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	240a      	movs	r4, #10
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	783a      	ldrb	r2, [r7, #0]
 800a4fc:	3a30      	subs	r2, #48	; 0x30
 800a4fe:	2a09      	cmp	r2, #9
 800a500:	d903      	bls.n	800a50a <_svfiprintf_r+0x192>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0ca      	beq.n	800a49c <_svfiprintf_r+0x124>
 800a506:	9005      	str	r0, [sp, #20]
 800a508:	e7c8      	b.n	800a49c <_svfiprintf_r+0x124>
 800a50a:	fb04 2000 	mla	r0, r4, r0, r2
 800a50e:	2301      	movs	r3, #1
 800a510:	e7f1      	b.n	800a4f6 <_svfiprintf_r+0x17e>
 800a512:	ab03      	add	r3, sp, #12
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	462a      	mov	r2, r5
 800a518:	4b10      	ldr	r3, [pc, #64]	; (800a55c <_svfiprintf_r+0x1e4>)
 800a51a:	a904      	add	r1, sp, #16
 800a51c:	4640      	mov	r0, r8
 800a51e:	f3af 8000 	nop.w
 800a522:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a526:	4681      	mov	r9, r0
 800a528:	d1d9      	bne.n	800a4de <_svfiprintf_r+0x166>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	065b      	lsls	r3, r3, #25
 800a52e:	f53f af38 	bmi.w	800a3a2 <_svfiprintf_r+0x2a>
 800a532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a534:	b01d      	add	sp, #116	; 0x74
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	ab03      	add	r3, sp, #12
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	462a      	mov	r2, r5
 800a540:	4b06      	ldr	r3, [pc, #24]	; (800a55c <_svfiprintf_r+0x1e4>)
 800a542:	a904      	add	r1, sp, #16
 800a544:	4640      	mov	r0, r8
 800a546:	f000 f881 	bl	800a64c <_printf_i>
 800a54a:	e7ea      	b.n	800a522 <_svfiprintf_r+0x1aa>
 800a54c:	0800ab14 	.word	0x0800ab14
 800a550:	0800ab1a 	.word	0x0800ab1a
 800a554:	0800ab1e 	.word	0x0800ab1e
 800a558:	00000000 	.word	0x00000000
 800a55c:	0800a2c1 	.word	0x0800a2c1

0800a560 <_printf_common>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	4691      	mov	r9, r2
 800a566:	461f      	mov	r7, r3
 800a568:	688a      	ldr	r2, [r1, #8]
 800a56a:	690b      	ldr	r3, [r1, #16]
 800a56c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a570:	4293      	cmp	r3, r2
 800a572:	bfb8      	it	lt
 800a574:	4613      	movlt	r3, r2
 800a576:	f8c9 3000 	str.w	r3, [r9]
 800a57a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a57e:	4606      	mov	r6, r0
 800a580:	460c      	mov	r4, r1
 800a582:	b112      	cbz	r2, 800a58a <_printf_common+0x2a>
 800a584:	3301      	adds	r3, #1
 800a586:	f8c9 3000 	str.w	r3, [r9]
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	0699      	lsls	r1, r3, #26
 800a58e:	bf42      	ittt	mi
 800a590:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a594:	3302      	addmi	r3, #2
 800a596:	f8c9 3000 	strmi.w	r3, [r9]
 800a59a:	6825      	ldr	r5, [r4, #0]
 800a59c:	f015 0506 	ands.w	r5, r5, #6
 800a5a0:	d107      	bne.n	800a5b2 <_printf_common+0x52>
 800a5a2:	f104 0a19 	add.w	sl, r4, #25
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	f8d9 2000 	ldr.w	r2, [r9]
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	db29      	blt.n	800a606 <_printf_common+0xa6>
 800a5b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	3300      	adds	r3, #0
 800a5ba:	bf18      	it	ne
 800a5bc:	2301      	movne	r3, #1
 800a5be:	0692      	lsls	r2, r2, #26
 800a5c0:	d42e      	bmi.n	800a620 <_printf_common+0xc0>
 800a5c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	47c0      	blx	r8
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d021      	beq.n	800a614 <_printf_common+0xb4>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	68e5      	ldr	r5, [r4, #12]
 800a5d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a5d8:	f003 0306 	and.w	r3, r3, #6
 800a5dc:	2b04      	cmp	r3, #4
 800a5de:	bf08      	it	eq
 800a5e0:	1aad      	subeq	r5, r5, r2
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	6922      	ldr	r2, [r4, #16]
 800a5e6:	bf0c      	ite	eq
 800a5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5ec:	2500      	movne	r5, #0
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	bfc4      	itt	gt
 800a5f2:	1a9b      	subgt	r3, r3, r2
 800a5f4:	18ed      	addgt	r5, r5, r3
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	341a      	adds	r4, #26
 800a5fc:	454d      	cmp	r5, r9
 800a5fe:	d11b      	bne.n	800a638 <_printf_common+0xd8>
 800a600:	2000      	movs	r0, #0
 800a602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a606:	2301      	movs	r3, #1
 800a608:	4652      	mov	r2, sl
 800a60a:	4639      	mov	r1, r7
 800a60c:	4630      	mov	r0, r6
 800a60e:	47c0      	blx	r8
 800a610:	3001      	adds	r0, #1
 800a612:	d103      	bne.n	800a61c <_printf_common+0xbc>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	3501      	adds	r5, #1
 800a61e:	e7c2      	b.n	800a5a6 <_printf_common+0x46>
 800a620:	18e1      	adds	r1, r4, r3
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	2030      	movs	r0, #48	; 0x30
 800a626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a62a:	4422      	add	r2, r4
 800a62c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a634:	3302      	adds	r3, #2
 800a636:	e7c4      	b.n	800a5c2 <_printf_common+0x62>
 800a638:	2301      	movs	r3, #1
 800a63a:	4622      	mov	r2, r4
 800a63c:	4639      	mov	r1, r7
 800a63e:	4630      	mov	r0, r6
 800a640:	47c0      	blx	r8
 800a642:	3001      	adds	r0, #1
 800a644:	d0e6      	beq.n	800a614 <_printf_common+0xb4>
 800a646:	f109 0901 	add.w	r9, r9, #1
 800a64a:	e7d7      	b.n	800a5fc <_printf_common+0x9c>

0800a64c <_printf_i>:
 800a64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a650:	4617      	mov	r7, r2
 800a652:	7e0a      	ldrb	r2, [r1, #24]
 800a654:	b085      	sub	sp, #20
 800a656:	2a6e      	cmp	r2, #110	; 0x6e
 800a658:	4698      	mov	r8, r3
 800a65a:	4606      	mov	r6, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a660:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a664:	f000 80bc 	beq.w	800a7e0 <_printf_i+0x194>
 800a668:	d81a      	bhi.n	800a6a0 <_printf_i+0x54>
 800a66a:	2a63      	cmp	r2, #99	; 0x63
 800a66c:	d02e      	beq.n	800a6cc <_printf_i+0x80>
 800a66e:	d80a      	bhi.n	800a686 <_printf_i+0x3a>
 800a670:	2a00      	cmp	r2, #0
 800a672:	f000 80c8 	beq.w	800a806 <_printf_i+0x1ba>
 800a676:	2a58      	cmp	r2, #88	; 0x58
 800a678:	f000 808a 	beq.w	800a790 <_printf_i+0x144>
 800a67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a680:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a684:	e02a      	b.n	800a6dc <_printf_i+0x90>
 800a686:	2a64      	cmp	r2, #100	; 0x64
 800a688:	d001      	beq.n	800a68e <_printf_i+0x42>
 800a68a:	2a69      	cmp	r2, #105	; 0x69
 800a68c:	d1f6      	bne.n	800a67c <_printf_i+0x30>
 800a68e:	6821      	ldr	r1, [r4, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a696:	d023      	beq.n	800a6e0 <_printf_i+0x94>
 800a698:	1d11      	adds	r1, r2, #4
 800a69a:	6019      	str	r1, [r3, #0]
 800a69c:	6813      	ldr	r3, [r2, #0]
 800a69e:	e027      	b.n	800a6f0 <_printf_i+0xa4>
 800a6a0:	2a73      	cmp	r2, #115	; 0x73
 800a6a2:	f000 80b4 	beq.w	800a80e <_printf_i+0x1c2>
 800a6a6:	d808      	bhi.n	800a6ba <_printf_i+0x6e>
 800a6a8:	2a6f      	cmp	r2, #111	; 0x6f
 800a6aa:	d02a      	beq.n	800a702 <_printf_i+0xb6>
 800a6ac:	2a70      	cmp	r2, #112	; 0x70
 800a6ae:	d1e5      	bne.n	800a67c <_printf_i+0x30>
 800a6b0:	680a      	ldr	r2, [r1, #0]
 800a6b2:	f042 0220 	orr.w	r2, r2, #32
 800a6b6:	600a      	str	r2, [r1, #0]
 800a6b8:	e003      	b.n	800a6c2 <_printf_i+0x76>
 800a6ba:	2a75      	cmp	r2, #117	; 0x75
 800a6bc:	d021      	beq.n	800a702 <_printf_i+0xb6>
 800a6be:	2a78      	cmp	r2, #120	; 0x78
 800a6c0:	d1dc      	bne.n	800a67c <_printf_i+0x30>
 800a6c2:	2278      	movs	r2, #120	; 0x78
 800a6c4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a6c8:	496e      	ldr	r1, [pc, #440]	; (800a884 <_printf_i+0x238>)
 800a6ca:	e064      	b.n	800a796 <_printf_i+0x14a>
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a6d2:	1d11      	adds	r1, r2, #4
 800a6d4:	6019      	str	r1, [r3, #0]
 800a6d6:	6813      	ldr	r3, [r2, #0]
 800a6d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e0a3      	b.n	800a828 <_printf_i+0x1dc>
 800a6e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a6e4:	f102 0104 	add.w	r1, r2, #4
 800a6e8:	6019      	str	r1, [r3, #0]
 800a6ea:	d0d7      	beq.n	800a69c <_printf_i+0x50>
 800a6ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da03      	bge.n	800a6fc <_printf_i+0xb0>
 800a6f4:	222d      	movs	r2, #45	; 0x2d
 800a6f6:	425b      	negs	r3, r3
 800a6f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a6fc:	4962      	ldr	r1, [pc, #392]	; (800a888 <_printf_i+0x23c>)
 800a6fe:	220a      	movs	r2, #10
 800a700:	e017      	b.n	800a732 <_printf_i+0xe6>
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	6819      	ldr	r1, [r3, #0]
 800a706:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a70a:	d003      	beq.n	800a714 <_printf_i+0xc8>
 800a70c:	1d08      	adds	r0, r1, #4
 800a70e:	6018      	str	r0, [r3, #0]
 800a710:	680b      	ldr	r3, [r1, #0]
 800a712:	e006      	b.n	800a722 <_printf_i+0xd6>
 800a714:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a718:	f101 0004 	add.w	r0, r1, #4
 800a71c:	6018      	str	r0, [r3, #0]
 800a71e:	d0f7      	beq.n	800a710 <_printf_i+0xc4>
 800a720:	880b      	ldrh	r3, [r1, #0]
 800a722:	4959      	ldr	r1, [pc, #356]	; (800a888 <_printf_i+0x23c>)
 800a724:	2a6f      	cmp	r2, #111	; 0x6f
 800a726:	bf14      	ite	ne
 800a728:	220a      	movne	r2, #10
 800a72a:	2208      	moveq	r2, #8
 800a72c:	2000      	movs	r0, #0
 800a72e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a732:	6865      	ldr	r5, [r4, #4]
 800a734:	60a5      	str	r5, [r4, #8]
 800a736:	2d00      	cmp	r5, #0
 800a738:	f2c0 809c 	blt.w	800a874 <_printf_i+0x228>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	f020 0004 	bic.w	r0, r0, #4
 800a742:	6020      	str	r0, [r4, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d13f      	bne.n	800a7c8 <_printf_i+0x17c>
 800a748:	2d00      	cmp	r5, #0
 800a74a:	f040 8095 	bne.w	800a878 <_printf_i+0x22c>
 800a74e:	4675      	mov	r5, lr
 800a750:	2a08      	cmp	r2, #8
 800a752:	d10b      	bne.n	800a76c <_printf_i+0x120>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	07da      	lsls	r2, r3, #31
 800a758:	d508      	bpl.n	800a76c <_printf_i+0x120>
 800a75a:	6923      	ldr	r3, [r4, #16]
 800a75c:	6862      	ldr	r2, [r4, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	bfde      	ittt	le
 800a762:	2330      	movle	r3, #48	; 0x30
 800a764:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a76c:	ebae 0305 	sub.w	r3, lr, r5
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	f8cd 8000 	str.w	r8, [sp]
 800a776:	463b      	mov	r3, r7
 800a778:	aa03      	add	r2, sp, #12
 800a77a:	4621      	mov	r1, r4
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff feef 	bl	800a560 <_printf_common>
 800a782:	3001      	adds	r0, #1
 800a784:	d155      	bne.n	800a832 <_printf_i+0x1e6>
 800a786:	f04f 30ff 	mov.w	r0, #4294967295
 800a78a:	b005      	add	sp, #20
 800a78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a790:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a794:	493c      	ldr	r1, [pc, #240]	; (800a888 <_printf_i+0x23c>)
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a79e:	f100 0504 	add.w	r5, r0, #4
 800a7a2:	601d      	str	r5, [r3, #0]
 800a7a4:	d001      	beq.n	800a7aa <_printf_i+0x15e>
 800a7a6:	6803      	ldr	r3, [r0, #0]
 800a7a8:	e002      	b.n	800a7b0 <_printf_i+0x164>
 800a7aa:	0655      	lsls	r5, r2, #25
 800a7ac:	d5fb      	bpl.n	800a7a6 <_printf_i+0x15a>
 800a7ae:	8803      	ldrh	r3, [r0, #0]
 800a7b0:	07d0      	lsls	r0, r2, #31
 800a7b2:	bf44      	itt	mi
 800a7b4:	f042 0220 	orrmi.w	r2, r2, #32
 800a7b8:	6022      	strmi	r2, [r4, #0]
 800a7ba:	b91b      	cbnz	r3, 800a7c4 <_printf_i+0x178>
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	f022 0220 	bic.w	r2, r2, #32
 800a7c2:	6022      	str	r2, [r4, #0]
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	e7b1      	b.n	800a72c <_printf_i+0xe0>
 800a7c8:	4675      	mov	r5, lr
 800a7ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7ce:	fb02 3310 	mls	r3, r2, r0, r3
 800a7d2:	5ccb      	ldrb	r3, [r1, r3]
 800a7d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d1f5      	bne.n	800a7ca <_printf_i+0x17e>
 800a7de:	e7b7      	b.n	800a750 <_printf_i+0x104>
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	6949      	ldr	r1, [r1, #20]
 800a7e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a7ea:	d004      	beq.n	800a7f6 <_printf_i+0x1aa>
 800a7ec:	1d10      	adds	r0, r2, #4
 800a7ee:	6018      	str	r0, [r3, #0]
 800a7f0:	6813      	ldr	r3, [r2, #0]
 800a7f2:	6019      	str	r1, [r3, #0]
 800a7f4:	e007      	b.n	800a806 <_printf_i+0x1ba>
 800a7f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7fa:	f102 0004 	add.w	r0, r2, #4
 800a7fe:	6018      	str	r0, [r3, #0]
 800a800:	6813      	ldr	r3, [r2, #0]
 800a802:	d0f6      	beq.n	800a7f2 <_printf_i+0x1a6>
 800a804:	8019      	strh	r1, [r3, #0]
 800a806:	2300      	movs	r3, #0
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	4675      	mov	r5, lr
 800a80c:	e7b1      	b.n	800a772 <_printf_i+0x126>
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	1d11      	adds	r1, r2, #4
 800a812:	6019      	str	r1, [r3, #0]
 800a814:	6815      	ldr	r5, [r2, #0]
 800a816:	6862      	ldr	r2, [r4, #4]
 800a818:	2100      	movs	r1, #0
 800a81a:	4628      	mov	r0, r5
 800a81c:	f7fd fcf0 	bl	8008200 <memchr>
 800a820:	b108      	cbz	r0, 800a826 <_printf_i+0x1da>
 800a822:	1b40      	subs	r0, r0, r5
 800a824:	6060      	str	r0, [r4, #4]
 800a826:	6863      	ldr	r3, [r4, #4]
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	2300      	movs	r3, #0
 800a82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a830:	e79f      	b.n	800a772 <_printf_i+0x126>
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	462a      	mov	r2, r5
 800a836:	4639      	mov	r1, r7
 800a838:	4630      	mov	r0, r6
 800a83a:	47c0      	blx	r8
 800a83c:	3001      	adds	r0, #1
 800a83e:	d0a2      	beq.n	800a786 <_printf_i+0x13a>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	079b      	lsls	r3, r3, #30
 800a844:	d507      	bpl.n	800a856 <_printf_i+0x20a>
 800a846:	2500      	movs	r5, #0
 800a848:	f104 0919 	add.w	r9, r4, #25
 800a84c:	68e3      	ldr	r3, [r4, #12]
 800a84e:	9a03      	ldr	r2, [sp, #12]
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	429d      	cmp	r5, r3
 800a854:	db05      	blt.n	800a862 <_printf_i+0x216>
 800a856:	68e0      	ldr	r0, [r4, #12]
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	4298      	cmp	r0, r3
 800a85c:	bfb8      	it	lt
 800a85e:	4618      	movlt	r0, r3
 800a860:	e793      	b.n	800a78a <_printf_i+0x13e>
 800a862:	2301      	movs	r3, #1
 800a864:	464a      	mov	r2, r9
 800a866:	4639      	mov	r1, r7
 800a868:	4630      	mov	r0, r6
 800a86a:	47c0      	blx	r8
 800a86c:	3001      	adds	r0, #1
 800a86e:	d08a      	beq.n	800a786 <_printf_i+0x13a>
 800a870:	3501      	adds	r5, #1
 800a872:	e7eb      	b.n	800a84c <_printf_i+0x200>
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1a7      	bne.n	800a7c8 <_printf_i+0x17c>
 800a878:	780b      	ldrb	r3, [r1, #0]
 800a87a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a87e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a882:	e765      	b.n	800a750 <_printf_i+0x104>
 800a884:	0800ab36 	.word	0x0800ab36
 800a888:	0800ab25 	.word	0x0800ab25

0800a88c <memcpy>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	1e43      	subs	r3, r0, #1
 800a890:	440a      	add	r2, r1
 800a892:	4291      	cmp	r1, r2
 800a894:	d100      	bne.n	800a898 <memcpy+0xc>
 800a896:	bd10      	pop	{r4, pc}
 800a898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a0:	e7f7      	b.n	800a892 <memcpy+0x6>

0800a8a2 <memmove>:
 800a8a2:	4288      	cmp	r0, r1
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	eb01 0302 	add.w	r3, r1, r2
 800a8aa:	d803      	bhi.n	800a8b4 <memmove+0x12>
 800a8ac:	1e42      	subs	r2, r0, #1
 800a8ae:	4299      	cmp	r1, r3
 800a8b0:	d10c      	bne.n	800a8cc <memmove+0x2a>
 800a8b2:	bd10      	pop	{r4, pc}
 800a8b4:	4298      	cmp	r0, r3
 800a8b6:	d2f9      	bcs.n	800a8ac <memmove+0xa>
 800a8b8:	1881      	adds	r1, r0, r2
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	42d3      	cmn	r3, r2
 800a8be:	d100      	bne.n	800a8c2 <memmove+0x20>
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a8ca:	e7f7      	b.n	800a8bc <memmove+0x1a>
 800a8cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a8d4:	e7eb      	b.n	800a8ae <memmove+0xc>
	...

0800a8d8 <_free_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4605      	mov	r5, r0
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d045      	beq.n	800a96c <_free_r+0x94>
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f0c      	subs	r4, r1, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfb8      	it	lt
 800a8ea:	18e4      	addlt	r4, r4, r3
 800a8ec:	f000 f8d6 	bl	800aa9c <__malloc_lock>
 800a8f0:	4a1f      	ldr	r2, [pc, #124]	; (800a970 <_free_r+0x98>)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	b933      	cbnz	r3, 800a906 <_free_r+0x2e>
 800a8f8:	6063      	str	r3, [r4, #4]
 800a8fa:	6014      	str	r4, [r2, #0]
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a902:	f000 b8cc 	b.w	800aa9e <__malloc_unlock>
 800a906:	42a3      	cmp	r3, r4
 800a908:	d90c      	bls.n	800a924 <_free_r+0x4c>
 800a90a:	6821      	ldr	r1, [r4, #0]
 800a90c:	1862      	adds	r2, r4, r1
 800a90e:	4293      	cmp	r3, r2
 800a910:	bf04      	itt	eq
 800a912:	681a      	ldreq	r2, [r3, #0]
 800a914:	685b      	ldreq	r3, [r3, #4]
 800a916:	6063      	str	r3, [r4, #4]
 800a918:	bf04      	itt	eq
 800a91a:	1852      	addeq	r2, r2, r1
 800a91c:	6022      	streq	r2, [r4, #0]
 800a91e:	6004      	str	r4, [r0, #0]
 800a920:	e7ec      	b.n	800a8fc <_free_r+0x24>
 800a922:	4613      	mov	r3, r2
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	b10a      	cbz	r2, 800a92c <_free_r+0x54>
 800a928:	42a2      	cmp	r2, r4
 800a92a:	d9fa      	bls.n	800a922 <_free_r+0x4a>
 800a92c:	6819      	ldr	r1, [r3, #0]
 800a92e:	1858      	adds	r0, r3, r1
 800a930:	42a0      	cmp	r0, r4
 800a932:	d10b      	bne.n	800a94c <_free_r+0x74>
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	4401      	add	r1, r0
 800a938:	1858      	adds	r0, r3, r1
 800a93a:	4282      	cmp	r2, r0
 800a93c:	6019      	str	r1, [r3, #0]
 800a93e:	d1dd      	bne.n	800a8fc <_free_r+0x24>
 800a940:	6810      	ldr	r0, [r2, #0]
 800a942:	6852      	ldr	r2, [r2, #4]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	4401      	add	r1, r0
 800a948:	6019      	str	r1, [r3, #0]
 800a94a:	e7d7      	b.n	800a8fc <_free_r+0x24>
 800a94c:	d902      	bls.n	800a954 <_free_r+0x7c>
 800a94e:	230c      	movs	r3, #12
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	e7d3      	b.n	800a8fc <_free_r+0x24>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	1821      	adds	r1, r4, r0
 800a958:	428a      	cmp	r2, r1
 800a95a:	bf04      	itt	eq
 800a95c:	6811      	ldreq	r1, [r2, #0]
 800a95e:	6852      	ldreq	r2, [r2, #4]
 800a960:	6062      	str	r2, [r4, #4]
 800a962:	bf04      	itt	eq
 800a964:	1809      	addeq	r1, r1, r0
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	605c      	str	r4, [r3, #4]
 800a96a:	e7c7      	b.n	800a8fc <_free_r+0x24>
 800a96c:	bd38      	pop	{r3, r4, r5, pc}
 800a96e:	bf00      	nop
 800a970:	20000090 	.word	0x20000090

0800a974 <_malloc_r>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	1ccd      	adds	r5, r1, #3
 800a978:	f025 0503 	bic.w	r5, r5, #3
 800a97c:	3508      	adds	r5, #8
 800a97e:	2d0c      	cmp	r5, #12
 800a980:	bf38      	it	cc
 800a982:	250c      	movcc	r5, #12
 800a984:	2d00      	cmp	r5, #0
 800a986:	4606      	mov	r6, r0
 800a988:	db01      	blt.n	800a98e <_malloc_r+0x1a>
 800a98a:	42a9      	cmp	r1, r5
 800a98c:	d903      	bls.n	800a996 <_malloc_r+0x22>
 800a98e:	230c      	movs	r3, #12
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	2000      	movs	r0, #0
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	f000 f881 	bl	800aa9c <__malloc_lock>
 800a99a:	4a23      	ldr	r2, [pc, #140]	; (800aa28 <_malloc_r+0xb4>)
 800a99c:	6814      	ldr	r4, [r2, #0]
 800a99e:	4621      	mov	r1, r4
 800a9a0:	b991      	cbnz	r1, 800a9c8 <_malloc_r+0x54>
 800a9a2:	4c22      	ldr	r4, [pc, #136]	; (800aa2c <_malloc_r+0xb8>)
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	b91b      	cbnz	r3, 800a9b0 <_malloc_r+0x3c>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 f867 	bl	800aa7c <_sbrk_r>
 800a9ae:	6020      	str	r0, [r4, #0]
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 f862 	bl	800aa7c <_sbrk_r>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d126      	bne.n	800aa0a <_malloc_r+0x96>
 800a9bc:	230c      	movs	r3, #12
 800a9be:	6033      	str	r3, [r6, #0]
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 f86c 	bl	800aa9e <__malloc_unlock>
 800a9c6:	e7e4      	b.n	800a992 <_malloc_r+0x1e>
 800a9c8:	680b      	ldr	r3, [r1, #0]
 800a9ca:	1b5b      	subs	r3, r3, r5
 800a9cc:	d41a      	bmi.n	800aa04 <_malloc_r+0x90>
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d90f      	bls.n	800a9f2 <_malloc_r+0x7e>
 800a9d2:	600b      	str	r3, [r1, #0]
 800a9d4:	50cd      	str	r5, [r1, r3]
 800a9d6:	18cc      	adds	r4, r1, r3
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 f860 	bl	800aa9e <__malloc_unlock>
 800a9de:	f104 000b 	add.w	r0, r4, #11
 800a9e2:	1d23      	adds	r3, r4, #4
 800a9e4:	f020 0007 	bic.w	r0, r0, #7
 800a9e8:	1ac3      	subs	r3, r0, r3
 800a9ea:	d01b      	beq.n	800aa24 <_malloc_r+0xb0>
 800a9ec:	425a      	negs	r2, r3
 800a9ee:	50e2      	str	r2, [r4, r3]
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	428c      	cmp	r4, r1
 800a9f4:	bf0d      	iteet	eq
 800a9f6:	6863      	ldreq	r3, [r4, #4]
 800a9f8:	684b      	ldrne	r3, [r1, #4]
 800a9fa:	6063      	strne	r3, [r4, #4]
 800a9fc:	6013      	streq	r3, [r2, #0]
 800a9fe:	bf18      	it	ne
 800aa00:	460c      	movne	r4, r1
 800aa02:	e7e9      	b.n	800a9d8 <_malloc_r+0x64>
 800aa04:	460c      	mov	r4, r1
 800aa06:	6849      	ldr	r1, [r1, #4]
 800aa08:	e7ca      	b.n	800a9a0 <_malloc_r+0x2c>
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d005      	beq.n	800aa20 <_malloc_r+0xac>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f830 	bl	800aa7c <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d0cd      	beq.n	800a9bc <_malloc_r+0x48>
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	e7d9      	b.n	800a9d8 <_malloc_r+0x64>
 800aa24:	bd70      	pop	{r4, r5, r6, pc}
 800aa26:	bf00      	nop
 800aa28:	20000090 	.word	0x20000090
 800aa2c:	20000094 	.word	0x20000094

0800aa30 <_realloc_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	4607      	mov	r7, r0
 800aa34:	4614      	mov	r4, r2
 800aa36:	460e      	mov	r6, r1
 800aa38:	b921      	cbnz	r1, 800aa44 <_realloc_r+0x14>
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa40:	f7ff bf98 	b.w	800a974 <_malloc_r>
 800aa44:	b922      	cbnz	r2, 800aa50 <_realloc_r+0x20>
 800aa46:	f7ff ff47 	bl	800a8d8 <_free_r>
 800aa4a:	4625      	mov	r5, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa50:	f000 f826 	bl	800aaa0 <_malloc_usable_size_r>
 800aa54:	4284      	cmp	r4, r0
 800aa56:	d90f      	bls.n	800aa78 <_realloc_r+0x48>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f7ff ff8a 	bl	800a974 <_malloc_r>
 800aa60:	4605      	mov	r5, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0f2      	beq.n	800aa4c <_realloc_r+0x1c>
 800aa66:	4631      	mov	r1, r6
 800aa68:	4622      	mov	r2, r4
 800aa6a:	f7ff ff0f 	bl	800a88c <memcpy>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff ff31 	bl	800a8d8 <_free_r>
 800aa76:	e7e9      	b.n	800aa4c <_realloc_r+0x1c>
 800aa78:	4635      	mov	r5, r6
 800aa7a:	e7e7      	b.n	800aa4c <_realloc_r+0x1c>

0800aa7c <_sbrk_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4c06      	ldr	r4, [pc, #24]	; (800aa98 <_sbrk_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4605      	mov	r5, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	f7fd ffe6 	bl	8008a58 <_sbrk>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_sbrk_r+0x1a>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_sbrk_r+0x1a>
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	20000124 	.word	0x20000124

0800aa9c <__malloc_lock>:
 800aa9c:	4770      	bx	lr

0800aa9e <__malloc_unlock>:
 800aa9e:	4770      	bx	lr

0800aaa0 <_malloc_usable_size_r>:
 800aaa0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f1a0 0004 	sub.w	r0, r0, #4
 800aaaa:	bfbc      	itt	lt
 800aaac:	580b      	ldrlt	r3, [r1, r0]
 800aaae:	18c0      	addlt	r0, r0, r3
 800aab0:	4770      	bx	lr
	...

0800aab4 <_init>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	bf00      	nop
 800aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaba:	bc08      	pop	{r3}
 800aabc:	469e      	mov	lr, r3
 800aabe:	4770      	bx	lr

0800aac0 <_fini>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr
