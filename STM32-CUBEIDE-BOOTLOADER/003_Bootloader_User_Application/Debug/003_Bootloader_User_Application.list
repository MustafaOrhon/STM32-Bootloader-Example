
003_Bootloader_User_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b9c  080081b0  080081b0  000081b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800ad4c  0800ad4c  0000ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adfc  0800adfc  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800adfc  0800adfc  0000adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae04  0800ae04  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae04  0800ae04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae08  0800ae08  0000ae08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ae0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          000000bc  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000840c  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000154f  00000000  00000000  000184ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00019a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000628  00000000  00000000  0001a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b49  00000000  00000000  0001a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000851e  00000000  00000000  0003d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b19  00000000  00000000  0004573f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117258  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dbc  00000000  00000000  001172a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081b0 <__do_global_dtors_aux>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4c05      	ldr	r4, [pc, #20]	; (80081c8 <__do_global_dtors_aux+0x18>)
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	b933      	cbnz	r3, 80081c6 <__do_global_dtors_aux+0x16>
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__do_global_dtors_aux+0x1c>)
 80081ba:	b113      	cbz	r3, 80081c2 <__do_global_dtors_aux+0x12>
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <__do_global_dtors_aux+0x20>)
 80081be:	f3af 8000 	nop.w
 80081c2:	2301      	movs	r3, #1
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	20000070 	.word	0x20000070
 80081cc:	00000000 	.word	0x00000000
 80081d0:	0800ad34 	.word	0x0800ad34

080081d4 <frame_dummy>:
 80081d4:	b508      	push	{r3, lr}
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <frame_dummy+0x10>)
 80081d8:	b11b      	cbz	r3, 80081e2 <frame_dummy+0xe>
 80081da:	4903      	ldr	r1, [pc, #12]	; (80081e8 <frame_dummy+0x14>)
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <frame_dummy+0x18>)
 80081de:	f3af 8000 	nop.w
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	00000000 	.word	0x00000000
 80081e8:	20000074 	.word	0x20000074
 80081ec:	0800ad34 	.word	0x0800ad34

080081f0 <strlen>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1fb      	bne.n	80081f2 <strlen+0x2>
 80081fa:	1a18      	subs	r0, r3, r0
 80081fc:	3801      	subs	r0, #1
 80081fe:	4770      	bx	lr

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_uldivmod>:
 80082a0:	b953      	cbnz	r3, 80082b8 <__aeabi_uldivmod+0x18>
 80082a2:	b94a      	cbnz	r2, 80082b8 <__aeabi_uldivmod+0x18>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bf08      	it	eq
 80082a8:	2800      	cmpeq	r0, #0
 80082aa:	bf1c      	itt	ne
 80082ac:	f04f 31ff 	movne.w	r1, #4294967295
 80082b0:	f04f 30ff 	movne.w	r0, #4294967295
 80082b4:	f000 b974 	b.w	80085a0 <__aeabi_idiv0>
 80082b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082c0:	f000 f806 	bl	80082d0 <__udivmoddi4>
 80082c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr

080082d0 <__udivmoddi4>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	9d08      	ldr	r5, [sp, #32]
 80082d6:	4604      	mov	r4, r0
 80082d8:	468e      	mov	lr, r1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d14d      	bne.n	800837a <__udivmoddi4+0xaa>
 80082de:	428a      	cmp	r2, r1
 80082e0:	4694      	mov	ip, r2
 80082e2:	d969      	bls.n	80083b8 <__udivmoddi4+0xe8>
 80082e4:	fab2 f282 	clz	r2, r2
 80082e8:	b152      	cbz	r2, 8008300 <__udivmoddi4+0x30>
 80082ea:	fa01 f302 	lsl.w	r3, r1, r2
 80082ee:	f1c2 0120 	rsb	r1, r2, #32
 80082f2:	fa20 f101 	lsr.w	r1, r0, r1
 80082f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082fa:	ea41 0e03 	orr.w	lr, r1, r3
 80082fe:	4094      	lsls	r4, r2
 8008300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008304:	0c21      	lsrs	r1, r4, #16
 8008306:	fbbe f6f8 	udiv	r6, lr, r8
 800830a:	fa1f f78c 	uxth.w	r7, ip
 800830e:	fb08 e316 	mls	r3, r8, r6, lr
 8008312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008316:	fb06 f107 	mul.w	r1, r6, r7
 800831a:	4299      	cmp	r1, r3
 800831c:	d90a      	bls.n	8008334 <__udivmoddi4+0x64>
 800831e:	eb1c 0303 	adds.w	r3, ip, r3
 8008322:	f106 30ff 	add.w	r0, r6, #4294967295
 8008326:	f080 811f 	bcs.w	8008568 <__udivmoddi4+0x298>
 800832a:	4299      	cmp	r1, r3
 800832c:	f240 811c 	bls.w	8008568 <__udivmoddi4+0x298>
 8008330:	3e02      	subs	r6, #2
 8008332:	4463      	add	r3, ip
 8008334:	1a5b      	subs	r3, r3, r1
 8008336:	b2a4      	uxth	r4, r4
 8008338:	fbb3 f0f8 	udiv	r0, r3, r8
 800833c:	fb08 3310 	mls	r3, r8, r0, r3
 8008340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008344:	fb00 f707 	mul.w	r7, r0, r7
 8008348:	42a7      	cmp	r7, r4
 800834a:	d90a      	bls.n	8008362 <__udivmoddi4+0x92>
 800834c:	eb1c 0404 	adds.w	r4, ip, r4
 8008350:	f100 33ff 	add.w	r3, r0, #4294967295
 8008354:	f080 810a 	bcs.w	800856c <__udivmoddi4+0x29c>
 8008358:	42a7      	cmp	r7, r4
 800835a:	f240 8107 	bls.w	800856c <__udivmoddi4+0x29c>
 800835e:	4464      	add	r4, ip
 8008360:	3802      	subs	r0, #2
 8008362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008366:	1be4      	subs	r4, r4, r7
 8008368:	2600      	movs	r6, #0
 800836a:	b11d      	cbz	r5, 8008374 <__udivmoddi4+0xa4>
 800836c:	40d4      	lsrs	r4, r2
 800836e:	2300      	movs	r3, #0
 8008370:	e9c5 4300 	strd	r4, r3, [r5]
 8008374:	4631      	mov	r1, r6
 8008376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837a:	428b      	cmp	r3, r1
 800837c:	d909      	bls.n	8008392 <__udivmoddi4+0xc2>
 800837e:	2d00      	cmp	r5, #0
 8008380:	f000 80ef 	beq.w	8008562 <__udivmoddi4+0x292>
 8008384:	2600      	movs	r6, #0
 8008386:	e9c5 0100 	strd	r0, r1, [r5]
 800838a:	4630      	mov	r0, r6
 800838c:	4631      	mov	r1, r6
 800838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008392:	fab3 f683 	clz	r6, r3
 8008396:	2e00      	cmp	r6, #0
 8008398:	d14a      	bne.n	8008430 <__udivmoddi4+0x160>
 800839a:	428b      	cmp	r3, r1
 800839c:	d302      	bcc.n	80083a4 <__udivmoddi4+0xd4>
 800839e:	4282      	cmp	r2, r0
 80083a0:	f200 80f9 	bhi.w	8008596 <__udivmoddi4+0x2c6>
 80083a4:	1a84      	subs	r4, r0, r2
 80083a6:	eb61 0303 	sbc.w	r3, r1, r3
 80083aa:	2001      	movs	r0, #1
 80083ac:	469e      	mov	lr, r3
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	d0e0      	beq.n	8008374 <__udivmoddi4+0xa4>
 80083b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80083b6:	e7dd      	b.n	8008374 <__udivmoddi4+0xa4>
 80083b8:	b902      	cbnz	r2, 80083bc <__udivmoddi4+0xec>
 80083ba:	deff      	udf	#255	; 0xff
 80083bc:	fab2 f282 	clz	r2, r2
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	f040 8092 	bne.w	80084ea <__udivmoddi4+0x21a>
 80083c6:	eba1 010c 	sub.w	r1, r1, ip
 80083ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ce:	fa1f fe8c 	uxth.w	lr, ip
 80083d2:	2601      	movs	r6, #1
 80083d4:	0c20      	lsrs	r0, r4, #16
 80083d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083da:	fb07 1113 	mls	r1, r7, r3, r1
 80083de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083e2:	fb0e f003 	mul.w	r0, lr, r3
 80083e6:	4288      	cmp	r0, r1
 80083e8:	d908      	bls.n	80083fc <__udivmoddi4+0x12c>
 80083ea:	eb1c 0101 	adds.w	r1, ip, r1
 80083ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80083f2:	d202      	bcs.n	80083fa <__udivmoddi4+0x12a>
 80083f4:	4288      	cmp	r0, r1
 80083f6:	f200 80cb 	bhi.w	8008590 <__udivmoddi4+0x2c0>
 80083fa:	4643      	mov	r3, r8
 80083fc:	1a09      	subs	r1, r1, r0
 80083fe:	b2a4      	uxth	r4, r4
 8008400:	fbb1 f0f7 	udiv	r0, r1, r7
 8008404:	fb07 1110 	mls	r1, r7, r0, r1
 8008408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800840c:	fb0e fe00 	mul.w	lr, lr, r0
 8008410:	45a6      	cmp	lr, r4
 8008412:	d908      	bls.n	8008426 <__udivmoddi4+0x156>
 8008414:	eb1c 0404 	adds.w	r4, ip, r4
 8008418:	f100 31ff 	add.w	r1, r0, #4294967295
 800841c:	d202      	bcs.n	8008424 <__udivmoddi4+0x154>
 800841e:	45a6      	cmp	lr, r4
 8008420:	f200 80bb 	bhi.w	800859a <__udivmoddi4+0x2ca>
 8008424:	4608      	mov	r0, r1
 8008426:	eba4 040e 	sub.w	r4, r4, lr
 800842a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800842e:	e79c      	b.n	800836a <__udivmoddi4+0x9a>
 8008430:	f1c6 0720 	rsb	r7, r6, #32
 8008434:	40b3      	lsls	r3, r6
 8008436:	fa22 fc07 	lsr.w	ip, r2, r7
 800843a:	ea4c 0c03 	orr.w	ip, ip, r3
 800843e:	fa20 f407 	lsr.w	r4, r0, r7
 8008442:	fa01 f306 	lsl.w	r3, r1, r6
 8008446:	431c      	orrs	r4, r3
 8008448:	40f9      	lsrs	r1, r7
 800844a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800844e:	fa00 f306 	lsl.w	r3, r0, r6
 8008452:	fbb1 f8f9 	udiv	r8, r1, r9
 8008456:	0c20      	lsrs	r0, r4, #16
 8008458:	fa1f fe8c 	uxth.w	lr, ip
 800845c:	fb09 1118 	mls	r1, r9, r8, r1
 8008460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008464:	fb08 f00e 	mul.w	r0, r8, lr
 8008468:	4288      	cmp	r0, r1
 800846a:	fa02 f206 	lsl.w	r2, r2, r6
 800846e:	d90b      	bls.n	8008488 <__udivmoddi4+0x1b8>
 8008470:	eb1c 0101 	adds.w	r1, ip, r1
 8008474:	f108 3aff 	add.w	sl, r8, #4294967295
 8008478:	f080 8088 	bcs.w	800858c <__udivmoddi4+0x2bc>
 800847c:	4288      	cmp	r0, r1
 800847e:	f240 8085 	bls.w	800858c <__udivmoddi4+0x2bc>
 8008482:	f1a8 0802 	sub.w	r8, r8, #2
 8008486:	4461      	add	r1, ip
 8008488:	1a09      	subs	r1, r1, r0
 800848a:	b2a4      	uxth	r4, r4
 800848c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008490:	fb09 1110 	mls	r1, r9, r0, r1
 8008494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008498:	fb00 fe0e 	mul.w	lr, r0, lr
 800849c:	458e      	cmp	lr, r1
 800849e:	d908      	bls.n	80084b2 <__udivmoddi4+0x1e2>
 80084a0:	eb1c 0101 	adds.w	r1, ip, r1
 80084a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80084a8:	d26c      	bcs.n	8008584 <__udivmoddi4+0x2b4>
 80084aa:	458e      	cmp	lr, r1
 80084ac:	d96a      	bls.n	8008584 <__udivmoddi4+0x2b4>
 80084ae:	3802      	subs	r0, #2
 80084b0:	4461      	add	r1, ip
 80084b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80084b6:	fba0 9402 	umull	r9, r4, r0, r2
 80084ba:	eba1 010e 	sub.w	r1, r1, lr
 80084be:	42a1      	cmp	r1, r4
 80084c0:	46c8      	mov	r8, r9
 80084c2:	46a6      	mov	lr, r4
 80084c4:	d356      	bcc.n	8008574 <__udivmoddi4+0x2a4>
 80084c6:	d053      	beq.n	8008570 <__udivmoddi4+0x2a0>
 80084c8:	b15d      	cbz	r5, 80084e2 <__udivmoddi4+0x212>
 80084ca:	ebb3 0208 	subs.w	r2, r3, r8
 80084ce:	eb61 010e 	sbc.w	r1, r1, lr
 80084d2:	fa01 f707 	lsl.w	r7, r1, r7
 80084d6:	fa22 f306 	lsr.w	r3, r2, r6
 80084da:	40f1      	lsrs	r1, r6
 80084dc:	431f      	orrs	r7, r3
 80084de:	e9c5 7100 	strd	r7, r1, [r5]
 80084e2:	2600      	movs	r6, #0
 80084e4:	4631      	mov	r1, r6
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	f1c2 0320 	rsb	r3, r2, #32
 80084ee:	40d8      	lsrs	r0, r3
 80084f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084f4:	fa21 f303 	lsr.w	r3, r1, r3
 80084f8:	4091      	lsls	r1, r2
 80084fa:	4301      	orrs	r1, r0
 80084fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008500:	fa1f fe8c 	uxth.w	lr, ip
 8008504:	fbb3 f0f7 	udiv	r0, r3, r7
 8008508:	fb07 3610 	mls	r6, r7, r0, r3
 800850c:	0c0b      	lsrs	r3, r1, #16
 800850e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008512:	fb00 f60e 	mul.w	r6, r0, lr
 8008516:	429e      	cmp	r6, r3
 8008518:	fa04 f402 	lsl.w	r4, r4, r2
 800851c:	d908      	bls.n	8008530 <__udivmoddi4+0x260>
 800851e:	eb1c 0303 	adds.w	r3, ip, r3
 8008522:	f100 38ff 	add.w	r8, r0, #4294967295
 8008526:	d22f      	bcs.n	8008588 <__udivmoddi4+0x2b8>
 8008528:	429e      	cmp	r6, r3
 800852a:	d92d      	bls.n	8008588 <__udivmoddi4+0x2b8>
 800852c:	3802      	subs	r0, #2
 800852e:	4463      	add	r3, ip
 8008530:	1b9b      	subs	r3, r3, r6
 8008532:	b289      	uxth	r1, r1
 8008534:	fbb3 f6f7 	udiv	r6, r3, r7
 8008538:	fb07 3316 	mls	r3, r7, r6, r3
 800853c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008540:	fb06 f30e 	mul.w	r3, r6, lr
 8008544:	428b      	cmp	r3, r1
 8008546:	d908      	bls.n	800855a <__udivmoddi4+0x28a>
 8008548:	eb1c 0101 	adds.w	r1, ip, r1
 800854c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008550:	d216      	bcs.n	8008580 <__udivmoddi4+0x2b0>
 8008552:	428b      	cmp	r3, r1
 8008554:	d914      	bls.n	8008580 <__udivmoddi4+0x2b0>
 8008556:	3e02      	subs	r6, #2
 8008558:	4461      	add	r1, ip
 800855a:	1ac9      	subs	r1, r1, r3
 800855c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008560:	e738      	b.n	80083d4 <__udivmoddi4+0x104>
 8008562:	462e      	mov	r6, r5
 8008564:	4628      	mov	r0, r5
 8008566:	e705      	b.n	8008374 <__udivmoddi4+0xa4>
 8008568:	4606      	mov	r6, r0
 800856a:	e6e3      	b.n	8008334 <__udivmoddi4+0x64>
 800856c:	4618      	mov	r0, r3
 800856e:	e6f8      	b.n	8008362 <__udivmoddi4+0x92>
 8008570:	454b      	cmp	r3, r9
 8008572:	d2a9      	bcs.n	80084c8 <__udivmoddi4+0x1f8>
 8008574:	ebb9 0802 	subs.w	r8, r9, r2
 8008578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800857c:	3801      	subs	r0, #1
 800857e:	e7a3      	b.n	80084c8 <__udivmoddi4+0x1f8>
 8008580:	4646      	mov	r6, r8
 8008582:	e7ea      	b.n	800855a <__udivmoddi4+0x28a>
 8008584:	4620      	mov	r0, r4
 8008586:	e794      	b.n	80084b2 <__udivmoddi4+0x1e2>
 8008588:	4640      	mov	r0, r8
 800858a:	e7d1      	b.n	8008530 <__udivmoddi4+0x260>
 800858c:	46d0      	mov	r8, sl
 800858e:	e77b      	b.n	8008488 <__udivmoddi4+0x1b8>
 8008590:	3b02      	subs	r3, #2
 8008592:	4461      	add	r1, ip
 8008594:	e732      	b.n	80083fc <__udivmoddi4+0x12c>
 8008596:	4630      	mov	r0, r6
 8008598:	e709      	b.n	80083ae <__udivmoddi4+0xde>
 800859a:	4464      	add	r4, ip
 800859c:	3802      	subs	r0, #2
 800859e:	e742      	b.n	8008426 <__udivmoddi4+0x156>

080085a0 <__aeabi_idiv0>:
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085a8:	f000 face 	bl	8008b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085ac:	f000 f826 	bl	80085fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085b0:	f000 f8e8 	bl	8008784 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80085b4:	f000 f892 	bl	80086dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80085b8:	f000 f8ba 	bl	8008730 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printMessage("Hello from the Bootloader User Application\r\n");
 80085bc:	480c      	ldr	r0, [pc, #48]	; (80085f0 <main+0x4c>)
 80085be:	f000 f94b 	bl	8008858 <printMessage>
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13|GPIO_PIN_14);
 80085c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80085c6:	480b      	ldr	r0, [pc, #44]	; (80085f4 <main+0x50>)
 80085c8:	f000 fe2b 	bl	8009222 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80085cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085d0:	f000 fb2c 	bl	8008c2c <HAL_Delay>
	  printMessage("Hello from the Bootloader Update User Application\r\n");
 80085d4:	4808      	ldr	r0, [pc, #32]	; (80085f8 <main+0x54>)
 80085d6:	f000 f93f 	bl	8008858 <printMessage>
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13|GPIO_PIN_14);
 80085da:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <main+0x50>)
 80085e0:	f000 fe1f 	bl	8009222 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80085e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085e8:	f000 fb20 	bl	8008c2c <HAL_Delay>
	  printMessage("Hello from the Bootloader User Application\r\n");
 80085ec:	e7e6      	b.n	80085bc <main+0x18>
 80085ee:	bf00      	nop
 80085f0:	0800ad4c 	.word	0x0800ad4c
 80085f4:	40021800 	.word	0x40021800
 80085f8:	0800ad7c 	.word	0x0800ad7c

080085fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b094      	sub	sp, #80	; 0x50
 8008600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008602:	f107 0320 	add.w	r3, r7, #32
 8008606:	2230      	movs	r2, #48	; 0x30
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f001 ff1c 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008610:	f107 030c 	add.w	r3, r7, #12
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	605a      	str	r2, [r3, #4]
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008620:	2300      	movs	r3, #0
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <SystemClock_Config+0xd8>)
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <SystemClock_Config+0xd8>)
 800862a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862e:	6413      	str	r3, [r2, #64]	; 0x40
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <SystemClock_Config+0xd8>)
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800863c:	2300      	movs	r3, #0
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <SystemClock_Config+0xdc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a24      	ldr	r2, [pc, #144]	; (80086d8 <SystemClock_Config+0xdc>)
 8008646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	4b22      	ldr	r3, [pc, #136]	; (80086d8 <SystemClock_Config+0xdc>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008658:	2302      	movs	r3, #2
 800865a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800865c:	2301      	movs	r3, #1
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008660:	2310      	movs	r3, #16
 8008662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008664:	2302      	movs	r3, #2
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800866c:	2308      	movs	r3, #8
 800866e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008670:	23b4      	movs	r3, #180	; 0xb4
 8008672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008674:	2302      	movs	r3, #2
 8008676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008678:	2307      	movs	r3, #7
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800867c:	f107 0320 	add.w	r3, r7, #32
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fe5d 	bl	8009340 <HAL_RCC_OscConfig>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800868c:	f000 f906 	bl	800889c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008690:	f000 fe06 	bl	80092a0 <HAL_PWREx_EnableOverDrive>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800869a:	f000 f8ff 	bl	800889c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800869e:	230f      	movs	r3, #15
 80086a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086a2:	2302      	movs	r3, #2
 80086a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80086aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80086ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80086b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80086b6:	f107 030c 	add.w	r3, r7, #12
 80086ba:	2105      	movs	r1, #5
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 f8b7 	bl	8009830 <HAL_RCC_ClockConfig>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80086c8:	f000 f8e8 	bl	800889c <Error_Handler>
  }
}
 80086cc:	bf00      	nop
 80086ce:	3750      	adds	r7, #80	; 0x50
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40023800 	.word	0x40023800
 80086d8:	40007000 	.word	0x40007000

080086dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 80086e2:	4a12      	ldr	r2, [pc, #72]	; (800872c <MX_USART1_UART_Init+0x50>)
 80086e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086e6:	4b10      	ldr	r3, [pc, #64]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 80086e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086ee:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086f4:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086fa:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008700:	4b09      	ldr	r3, [pc, #36]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 8008702:	220c      	movs	r2, #12
 8008704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 8008708:	2200      	movs	r2, #0
 800870a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 800870e:	2200      	movs	r2, #0
 8008710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008712:	4805      	ldr	r0, [pc, #20]	; (8008728 <MX_USART1_UART_Init+0x4c>)
 8008714:	f001 faac 	bl	8009c70 <HAL_UART_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800871e:	f000 f8bd 	bl	800889c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	2000008c 	.word	0x2000008c
 800872c:	40011000 	.word	0x40011000

08008730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008734:	4b11      	ldr	r3, [pc, #68]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <MX_USART3_UART_Init+0x50>)
 8008738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <MX_USART3_UART_Init+0x4c>)
 800873c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008742:	4b0e      	ldr	r3, [pc, #56]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008748:	4b0c      	ldr	r3, [pc, #48]	; (800877c <MX_USART3_UART_Init+0x4c>)
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008756:	220c      	movs	r2, #12
 8008758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875a:	4b08      	ldr	r3, [pc, #32]	; (800877c <MX_USART3_UART_Init+0x4c>)
 800875c:	2200      	movs	r2, #0
 800875e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008766:	4805      	ldr	r0, [pc, #20]	; (800877c <MX_USART3_UART_Init+0x4c>)
 8008768:	f001 fa82 	bl	8009c70 <HAL_UART_Init>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008772:	f000 f893 	bl	800889c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200000d0 	.word	0x200000d0
 8008780:	40004800 	.word	0x40004800

08008784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	609a      	str	r2, [r3, #8]
 8008796:	60da      	str	r2, [r3, #12]
 8008798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	4b2b      	ldr	r3, [pc, #172]	; (800884c <MX_GPIO_Init+0xc8>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	4a2a      	ldr	r2, [pc, #168]	; (800884c <MX_GPIO_Init+0xc8>)
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	6313      	str	r3, [r2, #48]	; 0x30
 80087aa:	4b28      	ldr	r3, [pc, #160]	; (800884c <MX_GPIO_Init+0xc8>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	60bb      	str	r3, [r7, #8]
 80087b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <MX_GPIO_Init+0xc8>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	4a23      	ldr	r2, [pc, #140]	; (800884c <MX_GPIO_Init+0xc8>)
 80087c0:	f043 0304 	orr.w	r3, r3, #4
 80087c4:	6313      	str	r3, [r2, #48]	; 0x30
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <MX_GPIO_Init+0xc8>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	4b1d      	ldr	r3, [pc, #116]	; (800884c <MX_GPIO_Init+0xc8>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	4a1c      	ldr	r2, [pc, #112]	; (800884c <MX_GPIO_Init+0xc8>)
 80087dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e0:	6313      	str	r3, [r2, #48]	; 0x30
 80087e2:	4b1a      	ldr	r3, [pc, #104]	; (800884c <MX_GPIO_Init+0xc8>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80087ee:	2200      	movs	r2, #0
 80087f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80087f4:	4816      	ldr	r0, [pc, #88]	; (8008850 <MX_GPIO_Init+0xcc>)
 80087f6:	f000 fcfb 	bl	80091f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80087fa:	2301      	movs	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008804:	2302      	movs	r3, #2
 8008806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	4619      	mov	r1, r3
 800880e:	4811      	ldr	r0, [pc, #68]	; (8008854 <MX_GPIO_Init+0xd0>)
 8008810:	f000 fb42 	bl	8008e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8008814:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800881a:	2301      	movs	r3, #1
 800881c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008822:	2300      	movs	r3, #0
 8008824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4619      	mov	r1, r3
 800882c:	4808      	ldr	r0, [pc, #32]	; (8008850 <MX_GPIO_Init+0xcc>)
 800882e:	f000 fb33 	bl	8008e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	2006      	movs	r0, #6
 8008838:	f000 faf7 	bl	8008e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800883c:	2006      	movs	r0, #6
 800883e:	f000 fb10 	bl	8008e62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008842:	bf00      	nop
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	40023800 	.word	0x40023800
 8008850:	40021800 	.word	0x40021800
 8008854:	40020000 	.word	0x40020000

08008858 <printMessage>:

/* USER CODE BEGIN 4 */
void printMessage(void *msg,...)
{
 8008858:	b40f      	push	{r0, r1, r2, r3}
 800885a:	b580      	push	{r7, lr}
 800885c:	b09a      	sub	sp, #104	; 0x68
 800885e:	af00      	add	r7, sp, #0
  char comingMessage[100];
  va_list vaList;
  va_start(vaList,msg);
 8008860:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008864:	603b      	str	r3, [r7, #0]
  vsprintf(comingMessage,msg,vaList);
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800886c:	4618      	mov	r0, r3
 800886e:	f001 fe09 	bl	800a484 <vsiprintf>
  HAL_UART_Transmit(DEBUG_UART,(uint8_t*)comingMessage,strlen(comingMessage),HAL_MAX_DELAY);
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fcbb 	bl	80081f0 <strlen>
 800887a:	4603      	mov	r3, r0
 800887c:	b29a      	uxth	r2, r3
 800887e:	1d39      	adds	r1, r7, #4
 8008880:	f04f 33ff 	mov.w	r3, #4294967295
 8008884:	4804      	ldr	r0, [pc, #16]	; (8008898 <printMessage+0x40>)
 8008886:	f001 fa40 	bl	8009d0a <HAL_UART_Transmit>
  va_end(vaList);

}
 800888a:	bf00      	nop
 800888c:	3768      	adds	r7, #104	; 0x68
 800888e:	46bd      	mov	sp, r7
 8008890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008894:	b004      	add	sp, #16
 8008896:	4770      	bx	lr
 8008898:	200000d0 	.word	0x200000d0

0800889c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80088a0:	b672      	cpsid	i
}
 80088a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80088a4:	e7fe      	b.n	80088a4 <Error_Handler+0x8>
	...

080088a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <HAL_MspInit+0x4c>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	4a0f      	ldr	r2, [pc, #60]	; (80088f4 <HAL_MspInit+0x4c>)
 80088b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088bc:	6453      	str	r3, [r2, #68]	; 0x44
 80088be:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <HAL_MspInit+0x4c>)
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <HAL_MspInit+0x4c>)
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <HAL_MspInit+0x4c>)
 80088d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d8:	6413      	str	r3, [r2, #64]	; 0x40
 80088da:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <HAL_MspInit+0x4c>)
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80088e6:	2007      	movs	r0, #7
 80088e8:	f000 fa94 	bl	8008e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	40023800 	.word	0x40023800

080088f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008900:	f107 031c 	add.w	r3, r7, #28
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a33      	ldr	r2, [pc, #204]	; (80089e4 <HAL_UART_MspInit+0xec>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d12d      	bne.n	8008976 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	4a31      	ldr	r2, [pc, #196]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008924:	f043 0310 	orr.w	r3, r3, #16
 8008928:	6453      	str	r3, [r2, #68]	; 0x44
 800892a:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6313      	str	r3, [r2, #48]	; 0x30
 8008946:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	2302      	movs	r3, #2
 800895a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895c:	2300      	movs	r3, #0
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008960:	2303      	movs	r3, #3
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008964:	2307      	movs	r3, #7
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008968:	f107 031c 	add.w	r3, r7, #28
 800896c:	4619      	mov	r1, r3
 800896e:	481f      	ldr	r0, [pc, #124]	; (80089ec <HAL_UART_MspInit+0xf4>)
 8008970:	f000 fa92 	bl	8008e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008974:	e031      	b.n	80089da <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a1d      	ldr	r2, [pc, #116]	; (80089f0 <HAL_UART_MspInit+0xf8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d12c      	bne.n	80089da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 800898a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800898e:	6413      	str	r3, [r2, #64]	; 0x40
 8008990:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	4a10      	ldr	r2, [pc, #64]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 80089a6:	f043 0304 	orr.w	r3, r3, #4
 80089aa:	6313      	str	r3, [r2, #48]	; 0x30
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <HAL_UART_MspInit+0xf0>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80089b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80089bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089be:	2302      	movs	r3, #2
 80089c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c6:	2303      	movs	r3, #3
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089ca:	2307      	movs	r3, #7
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ce:	f107 031c 	add.w	r3, r7, #28
 80089d2:	4619      	mov	r1, r3
 80089d4:	4807      	ldr	r0, [pc, #28]	; (80089f4 <HAL_UART_MspInit+0xfc>)
 80089d6:	f000 fa5f 	bl	8008e98 <HAL_GPIO_Init>
}
 80089da:	bf00      	nop
 80089dc:	3730      	adds	r7, #48	; 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40011000 	.word	0x40011000
 80089e8:	40023800 	.word	0x40023800
 80089ec:	40020000 	.word	0x40020000
 80089f0:	40004800 	.word	0x40004800
 80089f4:	40020800 	.word	0x40020800

080089f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089fc:	e7fe      	b.n	80089fc <NMI_Handler+0x4>

080089fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089fe:	b480      	push	{r7}
 8008a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a02:	e7fe      	b.n	8008a02 <HardFault_Handler+0x4>

08008a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a08:	e7fe      	b.n	8008a08 <MemManage_Handler+0x4>

08008a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a0e:	e7fe      	b.n	8008a0e <BusFault_Handler+0x4>

08008a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a14:	e7fe      	b.n	8008a14 <UsageFault_Handler+0x4>

08008a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a16:	b480      	push	{r7}
 8008a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a1a:	bf00      	nop
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a28:	bf00      	nop
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a32:	b480      	push	{r7}
 8008a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a36:	bf00      	nop
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a44:	f000 f8d2 	bl	8008bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008a50:	2001      	movs	r0, #1
 8008a52:	f000 fc01 	bl	8009258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a64:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <_sbrk+0x5c>)
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <_sbrk+0x60>)
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a70:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <_sbrk+0x64>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <_sbrk+0x64>)
 8008a7a:	4a12      	ldr	r2, [pc, #72]	; (8008ac4 <_sbrk+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a7e:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <_sbrk+0x64>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d207      	bcs.n	8008a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a8c:	f001 fcb2 	bl	800a3f4 <__errno>
 8008a90:	4603      	mov	r3, r0
 8008a92:	220c      	movs	r2, #12
 8008a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	e009      	b.n	8008ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a9c:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <_sbrk+0x64>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <_sbrk+0x64>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <_sbrk+0x64>)
 8008aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008aae:	68fb      	ldr	r3, [r7, #12]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20030000 	.word	0x20030000
 8008abc:	00000400 	.word	0x00000400
 8008ac0:	20000114 	.word	0x20000114
 8008ac4:	20000130 	.word	0x20000130

08008ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <SystemInit+0x24>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	4a06      	ldr	r2, [pc, #24]	; (8008aec <SystemInit+0x24>)
 8008ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <SystemInit+0x24>)
 8008ade:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <SystemInit+0x28>)
 8008ae0:	609a      	str	r2, [r3, #8]

}
 8008ae2:	bf00      	nop
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	e000ed00 	.word	0xe000ed00
 8008af0:	08008000 	.word	0x08008000

08008af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008af8:	480d      	ldr	r0, [pc, #52]	; (8008b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008afa:	490e      	ldr	r1, [pc, #56]	; (8008b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008afc:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b00:	e002      	b.n	8008b08 <LoopCopyDataInit>

08008b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b06:	3304      	adds	r3, #4

08008b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b0c:	d3f9      	bcc.n	8008b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b0e:	4a0b      	ldr	r2, [pc, #44]	; (8008b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008b10:	4c0b      	ldr	r4, [pc, #44]	; (8008b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b14:	e001      	b.n	8008b1a <LoopFillZerobss>

08008b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b18:	3204      	adds	r2, #4

08008b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b1c:	d3fb      	bcc.n	8008b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008b1e:	f7ff ffd3 	bl	8008ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b22:	f001 fc6d 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b26:	f7ff fd3d 	bl	80085a4 <main>
  bx  lr    
 8008b2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008b2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008b38:	0800ae0c 	.word	0x0800ae0c
  ldr r2, =_sbss
 8008b3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008b40:	2000012c 	.word	0x2000012c

08008b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b44:	e7fe      	b.n	8008b44 <ADC_IRQHandler>
	...

08008b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <HAL_Init+0x40>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <HAL_Init+0x40>)
 8008b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b58:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <HAL_Init+0x40>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0a      	ldr	r2, [pc, #40]	; (8008b88 <HAL_Init+0x40>)
 8008b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b64:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <HAL_Init+0x40>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a07      	ldr	r2, [pc, #28]	; (8008b88 <HAL_Init+0x40>)
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b70:	2003      	movs	r0, #3
 8008b72:	f000 f94f 	bl	8008e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b76:	2000      	movs	r0, #0
 8008b78:	f000 f808 	bl	8008b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b7c:	f7ff fe94 	bl	80088a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40023c00 	.word	0x40023c00

08008b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <HAL_InitTick+0x54>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <HAL_InitTick+0x58>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f967 	bl	8008e7e <HAL_SYSTICK_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e00e      	b.n	8008bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b0f      	cmp	r3, #15
 8008bbe:	d80a      	bhi.n	8008bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	f000 f92f 	bl	8008e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bcc:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <HAL_InitTick+0x5c>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e000      	b.n	8008bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000000 	.word	0x20000000
 8008be4:	20000008 	.word	0x20000008
 8008be8:	20000004 	.word	0x20000004

08008bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <HAL_IncTick+0x20>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_IncTick+0x24>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	4a04      	ldr	r2, [pc, #16]	; (8008c10 <HAL_IncTick+0x24>)
 8008bfe:	6013      	str	r3, [r2, #0]
}
 8008c00:	bf00      	nop
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000008 	.word	0x20000008
 8008c10:	20000118 	.word	0x20000118

08008c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  return uwTick;
 8008c18:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <HAL_GetTick+0x14>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000118 	.word	0x20000118

08008c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c34:	f7ff ffee 	bl	8008c14 <HAL_GetTick>
 8008c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d005      	beq.n	8008c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c46:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <HAL_Delay+0x44>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c52:	bf00      	nop
 8008c54:	f7ff ffde 	bl	8008c14 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d8f7      	bhi.n	8008c54 <HAL_Delay+0x28>
  {
  }
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000008 	.word	0x20000008

08008c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c90:	4013      	ands	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ca6:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	60d3      	str	r3, [r2, #12]
}
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	0a1b      	lsrs	r3, r3, #8
 8008cc6:	f003 0307 	and.w	r3, r3, #7
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	e000ed00 	.word	0xe000ed00

08008cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	db0b      	blt.n	8008d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	f003 021f 	and.w	r2, r3, #31
 8008cf0:	4907      	ldr	r1, [pc, #28]	; (8008d10 <__NVIC_EnableIRQ+0x38>)
 8008cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8008cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008d02:	bf00      	nop
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	e000e100 	.word	0xe000e100

08008d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	db0a      	blt.n	8008d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	490c      	ldr	r1, [pc, #48]	; (8008d60 <__NVIC_SetPriority+0x4c>)
 8008d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d32:	0112      	lsls	r2, r2, #4
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	440b      	add	r3, r1
 8008d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d3c:	e00a      	b.n	8008d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	4908      	ldr	r1, [pc, #32]	; (8008d64 <__NVIC_SetPriority+0x50>)
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	3b04      	subs	r3, #4
 8008d4c:	0112      	lsls	r2, r2, #4
 8008d4e:	b2d2      	uxtb	r2, r2
 8008d50:	440b      	add	r3, r1
 8008d52:	761a      	strb	r2, [r3, #24]
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	e000e100 	.word	0xe000e100
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b089      	sub	sp, #36	; 0x24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f1c3 0307 	rsb	r3, r3, #7
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	bf28      	it	cs
 8008d86:	2304      	movcs	r3, #4
 8008d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d902      	bls.n	8008d98 <NVIC_EncodePriority+0x30>
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	3b03      	subs	r3, #3
 8008d96:	e000      	b.n	8008d9a <NVIC_EncodePriority+0x32>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43da      	mvns	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	401a      	ands	r2, r3
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008db0:	f04f 31ff 	mov.w	r1, #4294967295
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dba:	43d9      	mvns	r1, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dc0:	4313      	orrs	r3, r2
         );
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3724      	adds	r7, #36	; 0x24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008de0:	d301      	bcc.n	8008de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008de2:	2301      	movs	r3, #1
 8008de4:	e00f      	b.n	8008e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008de6:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <SysTick_Config+0x40>)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dee:	210f      	movs	r1, #15
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	f7ff ff8e 	bl	8008d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <SysTick_Config+0x40>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <SysTick_Config+0x40>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010

08008e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff ff29 	bl	8008c74 <__NVIC_SetPriorityGrouping>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	4603      	mov	r3, r0
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e3c:	f7ff ff3e 	bl	8008cbc <__NVIC_GetPriorityGrouping>
 8008e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	6978      	ldr	r0, [r7, #20]
 8008e48:	f7ff ff8e 	bl	8008d68 <NVIC_EncodePriority>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff ff5d 	bl	8008d14 <__NVIC_SetPriority>
}
 8008e5a:	bf00      	nop
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	4603      	mov	r3, r0
 8008e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff ff31 	bl	8008cd8 <__NVIC_EnableIRQ>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ffa2 	bl	8008dd0 <SysTick_Config>
 8008e8c:	4603      	mov	r3, r0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b089      	sub	sp, #36	; 0x24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e177      	b.n	80091a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f040 8166 	bne.w	800919e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d005      	beq.n	8008eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d130      	bne.n	8008f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	43db      	mvns	r3, r3
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	4013      	ands	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f20:	2201      	movs	r2, #1
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	f003 0201 	and.w	r2, r3, #1
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d017      	beq.n	8008f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	2203      	movs	r2, #3
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43db      	mvns	r3, r3
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d123      	bne.n	8008fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	08da      	lsrs	r2, r3, #3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3208      	adds	r2, #8
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	220f      	movs	r2, #15
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	08da      	lsrs	r2, r3, #3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3208      	adds	r2, #8
 8008fd6:	69b9      	ldr	r1, [r7, #24]
 8008fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	43db      	mvns	r3, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f003 0203 	and.w	r2, r3, #3
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80c0 	beq.w	800919e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	4b66      	ldr	r3, [pc, #408]	; (80091bc <HAL_GPIO_Init+0x324>)
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	4a65      	ldr	r2, [pc, #404]	; (80091bc <HAL_GPIO_Init+0x324>)
 8009028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800902c:	6453      	str	r3, [r2, #68]	; 0x44
 800902e:	4b63      	ldr	r3, [pc, #396]	; (80091bc <HAL_GPIO_Init+0x324>)
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800903a:	4a61      	ldr	r2, [pc, #388]	; (80091c0 <HAL_GPIO_Init+0x328>)
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	089b      	lsrs	r3, r3, #2
 8009040:	3302      	adds	r3, #2
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	220f      	movs	r2, #15
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	43db      	mvns	r3, r3
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	4013      	ands	r3, r2
 800905c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a58      	ldr	r2, [pc, #352]	; (80091c4 <HAL_GPIO_Init+0x32c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d037      	beq.n	80090d6 <HAL_GPIO_Init+0x23e>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a57      	ldr	r2, [pc, #348]	; (80091c8 <HAL_GPIO_Init+0x330>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d031      	beq.n	80090d2 <HAL_GPIO_Init+0x23a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a56      	ldr	r2, [pc, #344]	; (80091cc <HAL_GPIO_Init+0x334>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d02b      	beq.n	80090ce <HAL_GPIO_Init+0x236>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a55      	ldr	r2, [pc, #340]	; (80091d0 <HAL_GPIO_Init+0x338>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d025      	beq.n	80090ca <HAL_GPIO_Init+0x232>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a54      	ldr	r2, [pc, #336]	; (80091d4 <HAL_GPIO_Init+0x33c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d01f      	beq.n	80090c6 <HAL_GPIO_Init+0x22e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a53      	ldr	r2, [pc, #332]	; (80091d8 <HAL_GPIO_Init+0x340>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d019      	beq.n	80090c2 <HAL_GPIO_Init+0x22a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a52      	ldr	r2, [pc, #328]	; (80091dc <HAL_GPIO_Init+0x344>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <HAL_GPIO_Init+0x226>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a51      	ldr	r2, [pc, #324]	; (80091e0 <HAL_GPIO_Init+0x348>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00d      	beq.n	80090ba <HAL_GPIO_Init+0x222>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a50      	ldr	r2, [pc, #320]	; (80091e4 <HAL_GPIO_Init+0x34c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <HAL_GPIO_Init+0x21e>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a4f      	ldr	r2, [pc, #316]	; (80091e8 <HAL_GPIO_Init+0x350>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d101      	bne.n	80090b2 <HAL_GPIO_Init+0x21a>
 80090ae:	2309      	movs	r3, #9
 80090b0:	e012      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090b2:	230a      	movs	r3, #10
 80090b4:	e010      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090b6:	2308      	movs	r3, #8
 80090b8:	e00e      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090ba:	2307      	movs	r3, #7
 80090bc:	e00c      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090be:	2306      	movs	r3, #6
 80090c0:	e00a      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090c2:	2305      	movs	r3, #5
 80090c4:	e008      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090c6:	2304      	movs	r3, #4
 80090c8:	e006      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090ca:	2303      	movs	r3, #3
 80090cc:	e004      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e002      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <HAL_GPIO_Init+0x240>
 80090d6:	2300      	movs	r3, #0
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	f002 0203 	and.w	r2, r2, #3
 80090de:	0092      	lsls	r2, r2, #2
 80090e0:	4093      	lsls	r3, r2
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090e8:	4935      	ldr	r1, [pc, #212]	; (80091c0 <HAL_GPIO_Init+0x328>)
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	3302      	adds	r3, #2
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80090f6:	4b3d      	ldr	r3, [pc, #244]	; (80091ec <HAL_GPIO_Init+0x354>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	43db      	mvns	r3, r3
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	4013      	ands	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800911a:	4a34      	ldr	r2, [pc, #208]	; (80091ec <HAL_GPIO_Init+0x354>)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <HAL_GPIO_Init+0x354>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	43db      	mvns	r3, r3
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	4013      	ands	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009144:	4a29      	ldr	r2, [pc, #164]	; (80091ec <HAL_GPIO_Init+0x354>)
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800914a:	4b28      	ldr	r3, [pc, #160]	; (80091ec <HAL_GPIO_Init+0x354>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	43db      	mvns	r3, r3
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	4013      	ands	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800916e:	4a1f      	ldr	r2, [pc, #124]	; (80091ec <HAL_GPIO_Init+0x354>)
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009174:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <HAL_GPIO_Init+0x354>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	43db      	mvns	r3, r3
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	4013      	ands	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009198:	4a14      	ldr	r2, [pc, #80]	; (80091ec <HAL_GPIO_Init+0x354>)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	3301      	adds	r3, #1
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2b0f      	cmp	r3, #15
 80091a8:	f67f ae84 	bls.w	8008eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3724      	adds	r7, #36	; 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40023800 	.word	0x40023800
 80091c0:	40013800 	.word	0x40013800
 80091c4:	40020000 	.word	0x40020000
 80091c8:	40020400 	.word	0x40020400
 80091cc:	40020800 	.word	0x40020800
 80091d0:	40020c00 	.word	0x40020c00
 80091d4:	40021000 	.word	0x40021000
 80091d8:	40021400 	.word	0x40021400
 80091dc:	40021800 	.word	0x40021800
 80091e0:	40021c00 	.word	0x40021c00
 80091e4:	40022000 	.word	0x40022000
 80091e8:	40022400 	.word	0x40022400
 80091ec:	40013c00 	.word	0x40013c00

080091f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
 80091fc:	4613      	mov	r3, r2
 80091fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009200:	787b      	ldrb	r3, [r7, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009206:	887a      	ldrh	r2, [r7, #2]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800920c:	e003      	b.n	8009216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	041a      	lsls	r2, r3, #16
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009234:	887a      	ldrh	r2, [r7, #2]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4013      	ands	r3, r2
 800923a:	041a      	lsls	r2, r3, #16
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	43d9      	mvns	r1, r3
 8009240:	887b      	ldrh	r3, [r7, #2]
 8009242:	400b      	ands	r3, r1
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	619a      	str	r2, [r3, #24]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009262:	4b08      	ldr	r3, [pc, #32]	; (8009284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009264:	695a      	ldr	r2, [r3, #20]
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	4013      	ands	r3, r2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d006      	beq.n	800927c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800926e:	4a05      	ldr	r2, [pc, #20]	; (8009284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f806 	bl	8009288 <HAL_GPIO_EXTI_Callback>
  }
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40013c00 	.word	0x40013c00

08009288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80092aa:	2300      	movs	r3, #0
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	4b20      	ldr	r3, [pc, #128]	; (8009330 <HAL_PWREx_EnableOverDrive+0x90>)
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <HAL_PWREx_EnableOverDrive+0x90>)
 80092b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b8:	6413      	str	r3, [r2, #64]	; 0x40
 80092ba:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <HAL_PWREx_EnableOverDrive+0x90>)
 80092bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80092c6:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <HAL_PWREx_EnableOverDrive+0x94>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092cc:	f7ff fca2 	bl	8008c14 <HAL_GetTick>
 80092d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092d2:	e009      	b.n	80092e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80092d4:	f7ff fc9e 	bl	8008c14 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092e2:	d901      	bls.n	80092e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e01f      	b.n	8009328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092e8:	4b13      	ldr	r3, [pc, #76]	; (8009338 <HAL_PWREx_EnableOverDrive+0x98>)
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f4:	d1ee      	bne.n	80092d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <HAL_PWREx_EnableOverDrive+0x9c>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092fc:	f7ff fc8a 	bl	8008c14 <HAL_GetTick>
 8009300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009302:	e009      	b.n	8009318 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009304:	f7ff fc86 	bl	8008c14 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009312:	d901      	bls.n	8009318 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e007      	b.n	8009328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <HAL_PWREx_EnableOverDrive+0x98>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009324:	d1ee      	bne.n	8009304 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40023800 	.word	0x40023800
 8009334:	420e0040 	.word	0x420e0040
 8009338:	40007000 	.word	0x40007000
 800933c:	420e0044 	.word	0x420e0044

08009340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e267      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d075      	beq.n	800944a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800935e:	4b88      	ldr	r3, [pc, #544]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 030c 	and.w	r3, r3, #12
 8009366:	2b04      	cmp	r3, #4
 8009368:	d00c      	beq.n	8009384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800936a:	4b85      	ldr	r3, [pc, #532]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009372:	2b08      	cmp	r3, #8
 8009374:	d112      	bne.n	800939c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009376:	4b82      	ldr	r3, [pc, #520]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800937e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009382:	d10b      	bne.n	800939c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009384:	4b7e      	ldr	r3, [pc, #504]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d05b      	beq.n	8009448 <HAL_RCC_OscConfig+0x108>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d157      	bne.n	8009448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e242      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a4:	d106      	bne.n	80093b4 <HAL_RCC_OscConfig+0x74>
 80093a6:	4b76      	ldr	r3, [pc, #472]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a75      	ldr	r2, [pc, #468]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e01d      	b.n	80093f0 <HAL_RCC_OscConfig+0xb0>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093bc:	d10c      	bne.n	80093d8 <HAL_RCC_OscConfig+0x98>
 80093be:	4b70      	ldr	r3, [pc, #448]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a6f      	ldr	r2, [pc, #444]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a6c      	ldr	r2, [pc, #432]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	e00b      	b.n	80093f0 <HAL_RCC_OscConfig+0xb0>
 80093d8:	4b69      	ldr	r3, [pc, #420]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a68      	ldr	r2, [pc, #416]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4b66      	ldr	r3, [pc, #408]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a65      	ldr	r2, [pc, #404]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80093ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d013      	beq.n	8009420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093f8:	f7ff fc0c 	bl	8008c14 <HAL_GetTick>
 80093fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009400:	f7ff fc08 	bl	8008c14 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b64      	cmp	r3, #100	; 0x64
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e207      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009412:	4b5b      	ldr	r3, [pc, #364]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0f0      	beq.n	8009400 <HAL_RCC_OscConfig+0xc0>
 800941e:	e014      	b.n	800944a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009420:	f7ff fbf8 	bl	8008c14 <HAL_GetTick>
 8009424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009426:	e008      	b.n	800943a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009428:	f7ff fbf4 	bl	8008c14 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b64      	cmp	r3, #100	; 0x64
 8009434:	d901      	bls.n	800943a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e1f3      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800943a:	4b51      	ldr	r3, [pc, #324]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f0      	bne.n	8009428 <HAL_RCC_OscConfig+0xe8>
 8009446:	e000      	b.n	800944a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d063      	beq.n	800951e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009456:	4b4a      	ldr	r3, [pc, #296]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009462:	4b47      	ldr	r3, [pc, #284]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800946a:	2b08      	cmp	r3, #8
 800946c:	d11c      	bne.n	80094a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800946e:	4b44      	ldr	r3, [pc, #272]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d116      	bne.n	80094a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800947a:	4b41      	ldr	r3, [pc, #260]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <HAL_RCC_OscConfig+0x152>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d001      	beq.n	8009492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e1c7      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009492:	4b3b      	ldr	r3, [pc, #236]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4937      	ldr	r1, [pc, #220]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094a6:	e03a      	b.n	800951e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d020      	beq.n	80094f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094b0:	4b34      	ldr	r3, [pc, #208]	; (8009584 <HAL_RCC_OscConfig+0x244>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b6:	f7ff fbad 	bl	8008c14 <HAL_GetTick>
 80094ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094bc:	e008      	b.n	80094d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094be:	f7ff fba9 	bl	8008c14 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e1a8      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094d0:	4b2b      	ldr	r3, [pc, #172]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0f0      	beq.n	80094be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094dc:	4b28      	ldr	r3, [pc, #160]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	4925      	ldr	r1, [pc, #148]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	600b      	str	r3, [r1, #0]
 80094f0:	e015      	b.n	800951e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <HAL_RCC_OscConfig+0x244>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f8:	f7ff fb8c 	bl	8008c14 <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009500:	f7ff fb88 	bl	8008c14 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e187      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009512:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d036      	beq.n	8009598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d016      	beq.n	8009560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <HAL_RCC_OscConfig+0x248>)
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009538:	f7ff fb6c 	bl	8008c14 <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800953e:	e008      	b.n	8009552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009540:	f7ff fb68 	bl	8008c14 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b02      	cmp	r3, #2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e167      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <HAL_RCC_OscConfig+0x240>)
 8009554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f0      	beq.n	8009540 <HAL_RCC_OscConfig+0x200>
 800955e:	e01b      	b.n	8009598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009560:	4b09      	ldr	r3, [pc, #36]	; (8009588 <HAL_RCC_OscConfig+0x248>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009566:	f7ff fb55 	bl	8008c14 <HAL_GetTick>
 800956a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800956c:	e00e      	b.n	800958c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800956e:	f7ff fb51 	bl	8008c14 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	2b02      	cmp	r3, #2
 800957a:	d907      	bls.n	800958c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e150      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
 8009580:	40023800 	.word	0x40023800
 8009584:	42470000 	.word	0x42470000
 8009588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800958c:	4b88      	ldr	r3, [pc, #544]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800958e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1ea      	bne.n	800956e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8097 	beq.w	80096d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095aa:	4b81      	ldr	r3, [pc, #516]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10f      	bne.n	80095d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	4b7d      	ldr	r3, [pc, #500]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	4a7c      	ldr	r2, [pc, #496]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80095c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c4:	6413      	str	r3, [r2, #64]	; 0x40
 80095c6:	4b7a      	ldr	r3, [pc, #488]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095d6:	4b77      	ldr	r3, [pc, #476]	; (80097b4 <HAL_RCC_OscConfig+0x474>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d118      	bne.n	8009614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095e2:	4b74      	ldr	r3, [pc, #464]	; (80097b4 <HAL_RCC_OscConfig+0x474>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a73      	ldr	r2, [pc, #460]	; (80097b4 <HAL_RCC_OscConfig+0x474>)
 80095e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095ee:	f7ff fb11 	bl	8008c14 <HAL_GetTick>
 80095f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095f6:	f7ff fb0d 	bl	8008c14 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e10c      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009608:	4b6a      	ldr	r3, [pc, #424]	; (80097b4 <HAL_RCC_OscConfig+0x474>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0f0      	beq.n	80095f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d106      	bne.n	800962a <HAL_RCC_OscConfig+0x2ea>
 800961c:	4b64      	ldr	r3, [pc, #400]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800961e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009620:	4a63      	ldr	r2, [pc, #396]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	6713      	str	r3, [r2, #112]	; 0x70
 8009628:	e01c      	b.n	8009664 <HAL_RCC_OscConfig+0x324>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b05      	cmp	r3, #5
 8009630:	d10c      	bne.n	800964c <HAL_RCC_OscConfig+0x30c>
 8009632:	4b5f      	ldr	r3, [pc, #380]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009636:	4a5e      	ldr	r2, [pc, #376]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009638:	f043 0304 	orr.w	r3, r3, #4
 800963c:	6713      	str	r3, [r2, #112]	; 0x70
 800963e:	4b5c      	ldr	r3, [pc, #368]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	4a5b      	ldr	r2, [pc, #364]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	6713      	str	r3, [r2, #112]	; 0x70
 800964a:	e00b      	b.n	8009664 <HAL_RCC_OscConfig+0x324>
 800964c:	4b58      	ldr	r3, [pc, #352]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	4a57      	ldr	r2, [pc, #348]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	6713      	str	r3, [r2, #112]	; 0x70
 8009658:	4b55      	ldr	r3, [pc, #340]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800965a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965c:	4a54      	ldr	r2, [pc, #336]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800965e:	f023 0304 	bic.w	r3, r3, #4
 8009662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d015      	beq.n	8009698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800966c:	f7ff fad2 	bl	8008c14 <HAL_GetTick>
 8009670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009672:	e00a      	b.n	800968a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009674:	f7ff face 	bl	8008c14 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009682:	4293      	cmp	r3, r2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e0cb      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800968a:	4b49      	ldr	r3, [pc, #292]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800968c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0ee      	beq.n	8009674 <HAL_RCC_OscConfig+0x334>
 8009696:	e014      	b.n	80096c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009698:	f7ff fabc 	bl	8008c14 <HAL_GetTick>
 800969c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800969e:	e00a      	b.n	80096b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096a0:	f7ff fab8 	bl	8008c14 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e0b5      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096b6:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1ee      	bne.n	80096a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d105      	bne.n	80096d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096c8:	4b39      	ldr	r3, [pc, #228]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	4a38      	ldr	r2, [pc, #224]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80096ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 80a1 	beq.w	8009820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096de:	4b34      	ldr	r3, [pc, #208]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 030c 	and.w	r3, r3, #12
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d05c      	beq.n	80097a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d141      	bne.n	8009776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096f2:	4b31      	ldr	r3, [pc, #196]	; (80097b8 <HAL_RCC_OscConfig+0x478>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096f8:	f7ff fa8c 	bl	8008c14 <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009700:	f7ff fa88 	bl	8008c14 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b02      	cmp	r3, #2
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e087      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009712:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1f0      	bne.n	8009700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	019b      	lsls	r3, r3, #6
 800972e:	431a      	orrs	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	3b01      	subs	r3, #1
 8009738:	041b      	lsls	r3, r3, #16
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	061b      	lsls	r3, r3, #24
 8009742:	491b      	ldr	r1, [pc, #108]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009744:	4313      	orrs	r3, r2
 8009746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009748:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <HAL_RCC_OscConfig+0x478>)
 800974a:	2201      	movs	r2, #1
 800974c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800974e:	f7ff fa61 	bl	8008c14 <HAL_GetTick>
 8009752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009754:	e008      	b.n	8009768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009756:	f7ff fa5d 	bl	8008c14 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d901      	bls.n	8009768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e05c      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f0      	beq.n	8009756 <HAL_RCC_OscConfig+0x416>
 8009774:	e054      	b.n	8009820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <HAL_RCC_OscConfig+0x478>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800977c:	f7ff fa4a 	bl	8008c14 <HAL_GetTick>
 8009780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009782:	e008      	b.n	8009796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009784:	f7ff fa46 	bl	8008c14 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2b02      	cmp	r3, #2
 8009790:	d901      	bls.n	8009796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e045      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <HAL_RCC_OscConfig+0x470>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1f0      	bne.n	8009784 <HAL_RCC_OscConfig+0x444>
 80097a2:	e03d      	b.n	8009820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d107      	bne.n	80097bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e038      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
 80097b0:	40023800 	.word	0x40023800
 80097b4:	40007000 	.word	0x40007000
 80097b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80097bc:	4b1b      	ldr	r3, [pc, #108]	; (800982c <HAL_RCC_OscConfig+0x4ec>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d028      	beq.n	800981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d121      	bne.n	800981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d11a      	bne.n	800981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80097ec:	4013      	ands	r3, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d111      	bne.n	800981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	3b01      	subs	r3, #1
 8009806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009808:	429a      	cmp	r2, r3
 800980a:	d107      	bne.n	800981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009818:	429a      	cmp	r2, r3
 800981a:	d001      	beq.n	8009820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e000      	b.n	8009822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	40023800 	.word	0x40023800

08009830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e0cc      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009844:	4b68      	ldr	r3, [pc, #416]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d90c      	bls.n	800986c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009852:	4b65      	ldr	r3, [pc, #404]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	b2d2      	uxtb	r2, r2
 8009858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800985a:	4b63      	ldr	r3, [pc, #396]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d001      	beq.n	800986c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0b8      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d020      	beq.n	80098ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009884:	4b59      	ldr	r3, [pc, #356]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	4a58      	ldr	r2, [pc, #352]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 800988a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800988e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800989c:	4b53      	ldr	r3, [pc, #332]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	4a52      	ldr	r2, [pc, #328]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80098a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80098a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098a8:	4b50      	ldr	r3, [pc, #320]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	494d      	ldr	r1, [pc, #308]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d044      	beq.n	8009950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d107      	bne.n	80098de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ce:	4b47      	ldr	r3, [pc, #284]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d119      	bne.n	800990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e07f      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d003      	beq.n	80098ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d107      	bne.n	80098fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ee:	4b3f      	ldr	r3, [pc, #252]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e06f      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098fe:	4b3b      	ldr	r3, [pc, #236]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e067      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800990e:	4b37      	ldr	r3, [pc, #220]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f023 0203 	bic.w	r2, r3, #3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4934      	ldr	r1, [pc, #208]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 800991c:	4313      	orrs	r3, r2
 800991e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009920:	f7ff f978 	bl	8008c14 <HAL_GetTick>
 8009924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009926:	e00a      	b.n	800993e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009928:	f7ff f974 	bl	8008c14 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f241 3288 	movw	r2, #5000	; 0x1388
 8009936:	4293      	cmp	r3, r2
 8009938:	d901      	bls.n	800993e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e04f      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800993e:	4b2b      	ldr	r3, [pc, #172]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 020c 	and.w	r2, r3, #12
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	429a      	cmp	r2, r3
 800994e:	d1eb      	bne.n	8009928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009950:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d20c      	bcs.n	8009978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800995e:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009966:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d001      	beq.n	8009978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e032      	b.n	80099de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009984:	4b19      	ldr	r3, [pc, #100]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	4916      	ldr	r1, [pc, #88]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 8009992:	4313      	orrs	r3, r2
 8009994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	490e      	ldr	r1, [pc, #56]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099b6:	f000 f821 	bl	80099fc <HAL_RCC_GetSysClockFreq>
 80099ba:	4602      	mov	r2, r0
 80099bc:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <HAL_RCC_ClockConfig+0x1bc>)
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	091b      	lsrs	r3, r3, #4
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	490a      	ldr	r1, [pc, #40]	; (80099f0 <HAL_RCC_ClockConfig+0x1c0>)
 80099c8:	5ccb      	ldrb	r3, [r1, r3]
 80099ca:	fa22 f303 	lsr.w	r3, r2, r3
 80099ce:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <HAL_RCC_ClockConfig+0x1c4>)
 80099d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <HAL_RCC_ClockConfig+0x1c8>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff f8d8 	bl	8008b8c <HAL_InitTick>

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40023c00 	.word	0x40023c00
 80099ec:	40023800 	.word	0x40023800
 80099f0:	0800adb0 	.word	0x0800adb0
 80099f4:	20000000 	.word	0x20000000
 80099f8:	20000004 	.word	0x20000004

080099fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a00:	b094      	sub	sp, #80	; 0x50
 8009a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	647b      	str	r3, [r7, #68]	; 0x44
 8009a08:	2300      	movs	r3, #0
 8009a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a14:	4b79      	ldr	r3, [pc, #484]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 030c 	and.w	r3, r3, #12
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d00d      	beq.n	8009a3c <HAL_RCC_GetSysClockFreq+0x40>
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	f200 80e1 	bhi.w	8009be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_RCC_GetSysClockFreq+0x34>
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d003      	beq.n	8009a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8009a2e:	e0db      	b.n	8009be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a30:	4b73      	ldr	r3, [pc, #460]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009a34:	e0db      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a36:	4b73      	ldr	r3, [pc, #460]	; (8009c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8009a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a3a:	e0d8      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a3c:	4b6f      	ldr	r3, [pc, #444]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a46:	4b6d      	ldr	r3, [pc, #436]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d063      	beq.n	8009b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a52:	4b6a      	ldr	r3, [pc, #424]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	2200      	movs	r2, #0
 8009a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a64:	633b      	str	r3, [r7, #48]	; 0x30
 8009a66:	2300      	movs	r3, #0
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009a6e:	4622      	mov	r2, r4
 8009a70:	462b      	mov	r3, r5
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f04f 0100 	mov.w	r1, #0
 8009a7a:	0159      	lsls	r1, r3, #5
 8009a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a80:	0150      	lsls	r0, r2, #5
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4621      	mov	r1, r4
 8009a88:	1a51      	subs	r1, r2, r1
 8009a8a:	6139      	str	r1, [r7, #16]
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009aa0:	4659      	mov	r1, fp
 8009aa2:	018b      	lsls	r3, r1, #6
 8009aa4:	4651      	mov	r1, sl
 8009aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009aaa:	4651      	mov	r1, sl
 8009aac:	018a      	lsls	r2, r1, #6
 8009aae:	4651      	mov	r1, sl
 8009ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ace:	4690      	mov	r8, r2
 8009ad0:	4699      	mov	r9, r3
 8009ad2:	4623      	mov	r3, r4
 8009ad4:	eb18 0303 	adds.w	r3, r8, r3
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	462b      	mov	r3, r5
 8009adc:	eb49 0303 	adc.w	r3, r9, r3
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	f04f 0300 	mov.w	r3, #0
 8009aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009aee:	4629      	mov	r1, r5
 8009af0:	024b      	lsls	r3, r1, #9
 8009af2:	4621      	mov	r1, r4
 8009af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009af8:	4621      	mov	r1, r4
 8009afa:	024a      	lsls	r2, r1, #9
 8009afc:	4610      	mov	r0, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b02:	2200      	movs	r2, #0
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b0c:	f7fe fbc8 	bl	80082a0 <__aeabi_uldivmod>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4613      	mov	r3, r2
 8009b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b18:	e058      	b.n	8009bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b1a:	4b38      	ldr	r3, [pc, #224]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	099b      	lsrs	r3, r3, #6
 8009b20:	2200      	movs	r2, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	4611      	mov	r1, r2
 8009b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009b2a:	623b      	str	r3, [r7, #32]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009b34:	4642      	mov	r2, r8
 8009b36:	464b      	mov	r3, r9
 8009b38:	f04f 0000 	mov.w	r0, #0
 8009b3c:	f04f 0100 	mov.w	r1, #0
 8009b40:	0159      	lsls	r1, r3, #5
 8009b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b46:	0150      	lsls	r0, r2, #5
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4641      	mov	r1, r8
 8009b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009b52:	4649      	mov	r1, r9
 8009b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8009b58:	f04f 0200 	mov.w	r2, #0
 8009b5c:	f04f 0300 	mov.w	r3, #0
 8009b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8009b70:	eb63 050b 	sbc.w	r5, r3, fp
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	f04f 0300 	mov.w	r3, #0
 8009b7c:	00eb      	lsls	r3, r5, #3
 8009b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b82:	00e2      	lsls	r2, r4, #3
 8009b84:	4614      	mov	r4, r2
 8009b86:	461d      	mov	r5, r3
 8009b88:	4643      	mov	r3, r8
 8009b8a:	18e3      	adds	r3, r4, r3
 8009b8c:	603b      	str	r3, [r7, #0]
 8009b8e:	464b      	mov	r3, r9
 8009b90:	eb45 0303 	adc.w	r3, r5, r3
 8009b94:	607b      	str	r3, [r7, #4]
 8009b96:	f04f 0200 	mov.w	r2, #0
 8009b9a:	f04f 0300 	mov.w	r3, #0
 8009b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	028b      	lsls	r3, r1, #10
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009bac:	4621      	mov	r1, r4
 8009bae:	028a      	lsls	r2, r1, #10
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	61fa      	str	r2, [r7, #28]
 8009bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bc0:	f7fe fb6e 	bl	80082a0 <__aeabi_uldivmod>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4613      	mov	r3, r2
 8009bca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bcc:	4b0b      	ldr	r3, [pc, #44]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	0c1b      	lsrs	r3, r3, #16
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009be6:	e002      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009be8:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3750      	adds	r7, #80	; 0x50
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40023800 	.word	0x40023800
 8009c00:	00f42400 	.word	0x00f42400
 8009c04:	007a1200 	.word	0x007a1200

08009c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c0c:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20000000 	.word	0x20000000

08009c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c24:	f7ff fff0 	bl	8009c08 <HAL_RCC_GetHCLKFreq>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	0a9b      	lsrs	r3, r3, #10
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	4903      	ldr	r1, [pc, #12]	; (8009c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c36:	5ccb      	ldrb	r3, [r1, r3]
 8009c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	40023800 	.word	0x40023800
 8009c44:	0800adc0 	.word	0x0800adc0

08009c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c4c:	f7ff ffdc 	bl	8009c08 <HAL_RCC_GetHCLKFreq>
 8009c50:	4602      	mov	r2, r0
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	0b5b      	lsrs	r3, r3, #13
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	4903      	ldr	r1, [pc, #12]	; (8009c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c5e:	5ccb      	ldrb	r3, [r1, r3]
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	40023800 	.word	0x40023800
 8009c6c:	0800adc0 	.word	0x0800adc0

08009c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e03f      	b.n	8009d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fe fe2e 	bl	80088f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2224      	movs	r2, #36	; 0x24
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f929 	bl	8009f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695a      	ldr	r2, [r3, #20]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b08a      	sub	sp, #40	; 0x28
 8009d0e:	af02      	add	r7, sp, #8
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	4613      	mov	r3, r2
 8009d18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d17c      	bne.n	8009e24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <HAL_UART_Transmit+0x2c>
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e075      	b.n	8009e26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <HAL_UART_Transmit+0x3e>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e06e      	b.n	8009e26 <HAL_UART_Transmit+0x11c>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2221      	movs	r2, #33	; 0x21
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d5e:	f7fe ff59 	bl	8008c14 <HAL_GetTick>
 8009d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	88fa      	ldrh	r2, [r7, #6]
 8009d68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	88fa      	ldrh	r2, [r7, #6]
 8009d6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d78:	d108      	bne.n	8009d8c <HAL_UART_Transmit+0x82>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d104      	bne.n	8009d8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	61bb      	str	r3, [r7, #24]
 8009d8a:	e003      	b.n	8009d94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d9c:	e02a      	b.n	8009df4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2200      	movs	r2, #0
 8009da6:	2180      	movs	r1, #128	; 0x80
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 f840 	bl	8009e2e <UART_WaitOnFlagUntilTimeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e036      	b.n	8009e26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10b      	bne.n	8009dd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	e007      	b.n	8009de6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	781a      	ldrb	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	3301      	adds	r3, #1
 8009de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1cf      	bne.n	8009d9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	2140      	movs	r1, #64	; 0x40
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f810 	bl	8009e2e <UART_WaitOnFlagUntilTimeout>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e006      	b.n	8009e26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	e000      	b.n	8009e26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e24:	2302      	movs	r3, #2
  }
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b090      	sub	sp, #64	; 0x40
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	603b      	str	r3, [r7, #0]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3e:	e050      	b.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e46:	d04c      	beq.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8009e4e:	f7fe fee1 	bl	8008c14 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d241      	bcs.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	330c      	adds	r3, #12
 8009e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8009e80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e5      	bne.n	8009e5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3314      	adds	r3, #20
 8009e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f023 0301 	bic.w	r3, r3, #1
 8009ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3314      	adds	r3, #20
 8009eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb2:	623a      	str	r2, [r7, #32]
 8009eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	69f9      	ldr	r1, [r7, #28]
 8009eb8:	6a3a      	ldr	r2, [r7, #32]
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e5      	bne.n	8009e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e00f      	b.n	8009f02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	4013      	ands	r3, r2
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	bf0c      	ite	eq
 8009ef2:	2301      	moveq	r3, #1
 8009ef4:	2300      	movne	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	461a      	mov	r2, r3
 8009efa:	79fb      	ldrb	r3, [r7, #7]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d09f      	beq.n	8009e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3740      	adds	r7, #64	; 0x40
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f10:	b0c0      	sub	sp, #256	; 0x100
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f28:	68d9      	ldr	r1, [r3, #12]
 8009f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	ea40 0301 	orr.w	r3, r0, r1
 8009f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f64:	f021 010c 	bic.w	r1, r1, #12
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f72:	430b      	orrs	r3, r1
 8009f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f86:	6999      	ldr	r1, [r3, #24]
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	ea40 0301 	orr.w	r3, r0, r1
 8009f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4b8f      	ldr	r3, [pc, #572]	; (800a1d8 <UART_SetConfig+0x2cc>)
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d005      	beq.n	8009fac <UART_SetConfig+0xa0>
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4b8d      	ldr	r3, [pc, #564]	; (800a1dc <UART_SetConfig+0x2d0>)
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d104      	bne.n	8009fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fac:	f7ff fe4c 	bl	8009c48 <HAL_RCC_GetPCLK2Freq>
 8009fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009fb4:	e003      	b.n	8009fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fb6:	f7ff fe33 	bl	8009c20 <HAL_RCC_GetPCLK1Freq>
 8009fba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fc8:	f040 810c 	bne.w	800a1e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	1891      	adds	r1, r2, r2
 8009fe4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fe6:	415b      	adcs	r3, r3
 8009fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fee:	4621      	mov	r1, r4
 8009ff0:	eb12 0801 	adds.w	r8, r2, r1
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	eb43 0901 	adc.w	r9, r3, r1
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a00a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a00e:	4690      	mov	r8, r2
 800a010:	4699      	mov	r9, r3
 800a012:	4623      	mov	r3, r4
 800a014:	eb18 0303 	adds.w	r3, r8, r3
 800a018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a01c:	462b      	mov	r3, r5
 800a01e:	eb49 0303 	adc.w	r3, r9, r3
 800a022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a032:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a03a:	460b      	mov	r3, r1
 800a03c:	18db      	adds	r3, r3, r3
 800a03e:	653b      	str	r3, [r7, #80]	; 0x50
 800a040:	4613      	mov	r3, r2
 800a042:	eb42 0303 	adc.w	r3, r2, r3
 800a046:	657b      	str	r3, [r7, #84]	; 0x54
 800a048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a04c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a050:	f7fe f926 	bl	80082a0 <__aeabi_uldivmod>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4b61      	ldr	r3, [pc, #388]	; (800a1e0 <UART_SetConfig+0x2d4>)
 800a05a:	fba3 2302 	umull	r2, r3, r3, r2
 800a05e:	095b      	lsrs	r3, r3, #5
 800a060:	011c      	lsls	r4, r3, #4
 800a062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a066:	2200      	movs	r2, #0
 800a068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a06c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a074:	4642      	mov	r2, r8
 800a076:	464b      	mov	r3, r9
 800a078:	1891      	adds	r1, r2, r2
 800a07a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a07c:	415b      	adcs	r3, r3
 800a07e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a084:	4641      	mov	r1, r8
 800a086:	eb12 0a01 	adds.w	sl, r2, r1
 800a08a:	4649      	mov	r1, r9
 800a08c:	eb43 0b01 	adc.w	fp, r3, r1
 800a090:	f04f 0200 	mov.w	r2, #0
 800a094:	f04f 0300 	mov.w	r3, #0
 800a098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a09c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0a4:	4692      	mov	sl, r2
 800a0a6:	469b      	mov	fp, r3
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a0ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a0b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	18db      	adds	r3, r3, r3
 800a0d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	eb42 0303 	adc.w	r3, r2, r3
 800a0dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a0de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0e6:	f7fe f8db 	bl	80082a0 <__aeabi_uldivmod>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4b3b      	ldr	r3, [pc, #236]	; (800a1e0 <UART_SetConfig+0x2d4>)
 800a0f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	2264      	movs	r2, #100	; 0x64
 800a0fa:	fb02 f303 	mul.w	r3, r2, r3
 800a0fe:	1acb      	subs	r3, r1, r3
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a106:	4b36      	ldr	r3, [pc, #216]	; (800a1e0 <UART_SetConfig+0x2d4>)
 800a108:	fba3 2302 	umull	r2, r3, r3, r2
 800a10c:	095b      	lsrs	r3, r3, #5
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a114:	441c      	add	r4, r3
 800a116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a120:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a128:	4642      	mov	r2, r8
 800a12a:	464b      	mov	r3, r9
 800a12c:	1891      	adds	r1, r2, r2
 800a12e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a130:	415b      	adcs	r3, r3
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a138:	4641      	mov	r1, r8
 800a13a:	1851      	adds	r1, r2, r1
 800a13c:	6339      	str	r1, [r7, #48]	; 0x30
 800a13e:	4649      	mov	r1, r9
 800a140:	414b      	adcs	r3, r1
 800a142:	637b      	str	r3, [r7, #52]	; 0x34
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a150:	4659      	mov	r1, fp
 800a152:	00cb      	lsls	r3, r1, #3
 800a154:	4651      	mov	r1, sl
 800a156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a15a:	4651      	mov	r1, sl
 800a15c:	00ca      	lsls	r2, r1, #3
 800a15e:	4610      	mov	r0, r2
 800a160:	4619      	mov	r1, r3
 800a162:	4603      	mov	r3, r0
 800a164:	4642      	mov	r2, r8
 800a166:	189b      	adds	r3, r3, r2
 800a168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a16c:	464b      	mov	r3, r9
 800a16e:	460a      	mov	r2, r1
 800a170:	eb42 0303 	adc.w	r3, r2, r3
 800a174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a184:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a18c:	460b      	mov	r3, r1
 800a18e:	18db      	adds	r3, r3, r3
 800a190:	62bb      	str	r3, [r7, #40]	; 0x28
 800a192:	4613      	mov	r3, r2
 800a194:	eb42 0303 	adc.w	r3, r2, r3
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a19a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a19e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a1a2:	f7fe f87d 	bl	80082a0 <__aeabi_uldivmod>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <UART_SetConfig+0x2d4>)
 800a1ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a1b0:	095b      	lsrs	r3, r3, #5
 800a1b2:	2164      	movs	r1, #100	; 0x64
 800a1b4:	fb01 f303 	mul.w	r3, r1, r3
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	3332      	adds	r3, #50	; 0x32
 800a1be:	4a08      	ldr	r2, [pc, #32]	; (800a1e0 <UART_SetConfig+0x2d4>)
 800a1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c4:	095b      	lsrs	r3, r3, #5
 800a1c6:	f003 0207 	and.w	r2, r3, #7
 800a1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4422      	add	r2, r4
 800a1d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1d4:	e105      	b.n	800a3e2 <UART_SetConfig+0x4d6>
 800a1d6:	bf00      	nop
 800a1d8:	40011000 	.word	0x40011000
 800a1dc:	40011400 	.word	0x40011400
 800a1e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	1891      	adds	r1, r2, r2
 800a1fc:	6239      	str	r1, [r7, #32]
 800a1fe:	415b      	adcs	r3, r3
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
 800a202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a206:	4641      	mov	r1, r8
 800a208:	1854      	adds	r4, r2, r1
 800a20a:	4649      	mov	r1, r9
 800a20c:	eb43 0501 	adc.w	r5, r3, r1
 800a210:	f04f 0200 	mov.w	r2, #0
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	00eb      	lsls	r3, r5, #3
 800a21a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a21e:	00e2      	lsls	r2, r4, #3
 800a220:	4614      	mov	r4, r2
 800a222:	461d      	mov	r5, r3
 800a224:	4643      	mov	r3, r8
 800a226:	18e3      	adds	r3, r4, r3
 800a228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a22c:	464b      	mov	r3, r9
 800a22e:	eb45 0303 	adc.w	r3, r5, r3
 800a232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a246:	f04f 0200 	mov.w	r2, #0
 800a24a:	f04f 0300 	mov.w	r3, #0
 800a24e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a252:	4629      	mov	r1, r5
 800a254:	008b      	lsls	r3, r1, #2
 800a256:	4621      	mov	r1, r4
 800a258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a25c:	4621      	mov	r1, r4
 800a25e:	008a      	lsls	r2, r1, #2
 800a260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a264:	f7fe f81c 	bl	80082a0 <__aeabi_uldivmod>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4b60      	ldr	r3, [pc, #384]	; (800a3f0 <UART_SetConfig+0x4e4>)
 800a26e:	fba3 2302 	umull	r2, r3, r3, r2
 800a272:	095b      	lsrs	r3, r3, #5
 800a274:	011c      	lsls	r4, r3, #4
 800a276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a280:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	1891      	adds	r1, r2, r2
 800a28e:	61b9      	str	r1, [r7, #24]
 800a290:	415b      	adcs	r3, r3
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a298:	4641      	mov	r1, r8
 800a29a:	1851      	adds	r1, r2, r1
 800a29c:	6139      	str	r1, [r7, #16]
 800a29e:	4649      	mov	r1, r9
 800a2a0:	414b      	adcs	r3, r1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	f04f 0200 	mov.w	r2, #0
 800a2a8:	f04f 0300 	mov.w	r3, #0
 800a2ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	00cb      	lsls	r3, r1, #3
 800a2b4:	4651      	mov	r1, sl
 800a2b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2ba:	4651      	mov	r1, sl
 800a2bc:	00ca      	lsls	r2, r1, #3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	4642      	mov	r2, r8
 800a2c6:	189b      	adds	r3, r3, r2
 800a2c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2cc:	464b      	mov	r3, r9
 800a2ce:	460a      	mov	r2, r1
 800a2d0:	eb42 0303 	adc.w	r3, r2, r3
 800a2d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2e4:	f04f 0200 	mov.w	r2, #0
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	008b      	lsls	r3, r1, #2
 800a2f4:	4641      	mov	r1, r8
 800a2f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2fa:	4641      	mov	r1, r8
 800a2fc:	008a      	lsls	r2, r1, #2
 800a2fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a302:	f7fd ffcd 	bl	80082a0 <__aeabi_uldivmod>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <UART_SetConfig+0x4e4>)
 800a30c:	fba3 1302 	umull	r1, r3, r3, r2
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	2164      	movs	r1, #100	; 0x64
 800a314:	fb01 f303 	mul.w	r3, r1, r3
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	3332      	adds	r3, #50	; 0x32
 800a31e:	4a34      	ldr	r2, [pc, #208]	; (800a3f0 <UART_SetConfig+0x4e4>)
 800a320:	fba2 2303 	umull	r2, r3, r2, r3
 800a324:	095b      	lsrs	r3, r3, #5
 800a326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a32a:	441c      	add	r4, r3
 800a32c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a330:	2200      	movs	r2, #0
 800a332:	673b      	str	r3, [r7, #112]	; 0x70
 800a334:	677a      	str	r2, [r7, #116]	; 0x74
 800a336:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a33a:	4642      	mov	r2, r8
 800a33c:	464b      	mov	r3, r9
 800a33e:	1891      	adds	r1, r2, r2
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	415b      	adcs	r3, r3
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a34a:	4641      	mov	r1, r8
 800a34c:	1851      	adds	r1, r2, r1
 800a34e:	6039      	str	r1, [r7, #0]
 800a350:	4649      	mov	r1, r9
 800a352:	414b      	adcs	r3, r1
 800a354:	607b      	str	r3, [r7, #4]
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a362:	4659      	mov	r1, fp
 800a364:	00cb      	lsls	r3, r1, #3
 800a366:	4651      	mov	r1, sl
 800a368:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a36c:	4651      	mov	r1, sl
 800a36e:	00ca      	lsls	r2, r1, #3
 800a370:	4610      	mov	r0, r2
 800a372:	4619      	mov	r1, r3
 800a374:	4603      	mov	r3, r0
 800a376:	4642      	mov	r2, r8
 800a378:	189b      	adds	r3, r3, r2
 800a37a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a37c:	464b      	mov	r3, r9
 800a37e:	460a      	mov	r2, r1
 800a380:	eb42 0303 	adc.w	r3, r2, r3
 800a384:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	663b      	str	r3, [r7, #96]	; 0x60
 800a390:	667a      	str	r2, [r7, #100]	; 0x64
 800a392:	f04f 0200 	mov.w	r2, #0
 800a396:	f04f 0300 	mov.w	r3, #0
 800a39a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a39e:	4649      	mov	r1, r9
 800a3a0:	008b      	lsls	r3, r1, #2
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	008a      	lsls	r2, r1, #2
 800a3ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3b0:	f7fd ff76 	bl	80082a0 <__aeabi_uldivmod>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <UART_SetConfig+0x4e4>)
 800a3ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a3be:	095b      	lsrs	r3, r3, #5
 800a3c0:	2164      	movs	r1, #100	; 0x64
 800a3c2:	fb01 f303 	mul.w	r3, r1, r3
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	3332      	adds	r3, #50	; 0x32
 800a3cc:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <UART_SetConfig+0x4e4>)
 800a3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d2:	095b      	lsrs	r3, r3, #5
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4422      	add	r2, r4
 800a3e0:	609a      	str	r2, [r3, #8]
}
 800a3e2:	bf00      	nop
 800a3e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ee:	bf00      	nop
 800a3f0:	51eb851f 	.word	0x51eb851f

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	2000000c 	.word	0x2000000c

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f000 fc8e 	bl	800ad34 <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800ae04 	.word	0x0800ae04
 800a43c:	0800ae04 	.word	0x0800ae04
 800a440:	0800ae04 	.word	0x0800ae04
 800a444:	0800ae08 	.word	0x0800ae08

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <_vsiprintf_r>:
 800a458:	b500      	push	{lr}
 800a45a:	b09b      	sub	sp, #108	; 0x6c
 800a45c:	9100      	str	r1, [sp, #0]
 800a45e:	9104      	str	r1, [sp, #16]
 800a460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a464:	9105      	str	r1, [sp, #20]
 800a466:	9102      	str	r1, [sp, #8]
 800a468:	4905      	ldr	r1, [pc, #20]	; (800a480 <_vsiprintf_r+0x28>)
 800a46a:	9103      	str	r1, [sp, #12]
 800a46c:	4669      	mov	r1, sp
 800a46e:	f000 f86f 	bl	800a550 <_svfiprintf_r>
 800a472:	9b00      	ldr	r3, [sp, #0]
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	b01b      	add	sp, #108	; 0x6c
 800a47a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a47e:	bf00      	nop
 800a480:	ffff0208 	.word	0xffff0208

0800a484 <vsiprintf>:
 800a484:	4613      	mov	r3, r2
 800a486:	460a      	mov	r2, r1
 800a488:	4601      	mov	r1, r0
 800a48a:	4802      	ldr	r0, [pc, #8]	; (800a494 <vsiprintf+0x10>)
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f7ff bfe3 	b.w	800a458 <_vsiprintf_r>
 800a492:	bf00      	nop
 800a494:	2000000c 	.word	0x2000000c

0800a498 <__ssputs_r>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	688e      	ldr	r6, [r1, #8]
 800a49e:	429e      	cmp	r6, r3
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4690      	mov	r8, r2
 800a4a6:	461f      	mov	r7, r3
 800a4a8:	d838      	bhi.n	800a51c <__ssputs_r+0x84>
 800a4aa:	898a      	ldrh	r2, [r1, #12]
 800a4ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4b0:	d032      	beq.n	800a518 <__ssputs_r+0x80>
 800a4b2:	6825      	ldr	r5, [r4, #0]
 800a4b4:	6909      	ldr	r1, [r1, #16]
 800a4b6:	eba5 0901 	sub.w	r9, r5, r1
 800a4ba:	6965      	ldr	r5, [r4, #20]
 800a4bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	444b      	add	r3, r9
 800a4c8:	106d      	asrs	r5, r5, #1
 800a4ca:	429d      	cmp	r5, r3
 800a4cc:	bf38      	it	cc
 800a4ce:	461d      	movcc	r5, r3
 800a4d0:	0553      	lsls	r3, r2, #21
 800a4d2:	d531      	bpl.n	800a538 <__ssputs_r+0xa0>
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f000 fb63 	bl	800aba0 <_malloc_r>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	b950      	cbnz	r0, 800a4f4 <__ssputs_r+0x5c>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	f8ca 3000 	str.w	r3, [sl]
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f4:	6921      	ldr	r1, [r4, #16]
 800a4f6:	464a      	mov	r2, r9
 800a4f8:	f000 fabe 	bl	800aa78 <memcpy>
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a506:	81a3      	strh	r3, [r4, #12]
 800a508:	6126      	str	r6, [r4, #16]
 800a50a:	6165      	str	r5, [r4, #20]
 800a50c:	444e      	add	r6, r9
 800a50e:	eba5 0509 	sub.w	r5, r5, r9
 800a512:	6026      	str	r6, [r4, #0]
 800a514:	60a5      	str	r5, [r4, #8]
 800a516:	463e      	mov	r6, r7
 800a518:	42be      	cmp	r6, r7
 800a51a:	d900      	bls.n	800a51e <__ssputs_r+0x86>
 800a51c:	463e      	mov	r6, r7
 800a51e:	6820      	ldr	r0, [r4, #0]
 800a520:	4632      	mov	r2, r6
 800a522:	4641      	mov	r1, r8
 800a524:	f000 fab6 	bl	800aa94 <memmove>
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	1b9b      	subs	r3, r3, r6
 800a52c:	60a3      	str	r3, [r4, #8]
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	4433      	add	r3, r6
 800a532:	6023      	str	r3, [r4, #0]
 800a534:	2000      	movs	r0, #0
 800a536:	e7db      	b.n	800a4f0 <__ssputs_r+0x58>
 800a538:	462a      	mov	r2, r5
 800a53a:	f000 fba5 	bl	800ac88 <_realloc_r>
 800a53e:	4606      	mov	r6, r0
 800a540:	2800      	cmp	r0, #0
 800a542:	d1e1      	bne.n	800a508 <__ssputs_r+0x70>
 800a544:	6921      	ldr	r1, [r4, #16]
 800a546:	4650      	mov	r0, sl
 800a548:	f000 fabe 	bl	800aac8 <_free_r>
 800a54c:	e7c7      	b.n	800a4de <__ssputs_r+0x46>
	...

0800a550 <_svfiprintf_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4698      	mov	r8, r3
 800a556:	898b      	ldrh	r3, [r1, #12]
 800a558:	061b      	lsls	r3, r3, #24
 800a55a:	b09d      	sub	sp, #116	; 0x74
 800a55c:	4607      	mov	r7, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	4614      	mov	r4, r2
 800a562:	d50e      	bpl.n	800a582 <_svfiprintf_r+0x32>
 800a564:	690b      	ldr	r3, [r1, #16]
 800a566:	b963      	cbnz	r3, 800a582 <_svfiprintf_r+0x32>
 800a568:	2140      	movs	r1, #64	; 0x40
 800a56a:	f000 fb19 	bl	800aba0 <_malloc_r>
 800a56e:	6028      	str	r0, [r5, #0]
 800a570:	6128      	str	r0, [r5, #16]
 800a572:	b920      	cbnz	r0, 800a57e <_svfiprintf_r+0x2e>
 800a574:	230c      	movs	r3, #12
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	e0d1      	b.n	800a722 <_svfiprintf_r+0x1d2>
 800a57e:	2340      	movs	r3, #64	; 0x40
 800a580:	616b      	str	r3, [r5, #20]
 800a582:	2300      	movs	r3, #0
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	2320      	movs	r3, #32
 800a588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a590:	2330      	movs	r3, #48	; 0x30
 800a592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a73c <_svfiprintf_r+0x1ec>
 800a596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a59a:	f04f 0901 	mov.w	r9, #1
 800a59e:	4623      	mov	r3, r4
 800a5a0:	469a      	mov	sl, r3
 800a5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a6:	b10a      	cbz	r2, 800a5ac <_svfiprintf_r+0x5c>
 800a5a8:	2a25      	cmp	r2, #37	; 0x25
 800a5aa:	d1f9      	bne.n	800a5a0 <_svfiprintf_r+0x50>
 800a5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b0:	d00b      	beq.n	800a5ca <_svfiprintf_r+0x7a>
 800a5b2:	465b      	mov	r3, fp
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7ff ff6d 	bl	800a498 <__ssputs_r>
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f000 80aa 	beq.w	800a718 <_svfiprintf_r+0x1c8>
 800a5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c6:	445a      	add	r2, fp
 800a5c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80a2 	beq.w	800a718 <_svfiprintf_r+0x1c8>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5de:	f10a 0a01 	add.w	sl, sl, #1
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	9307      	str	r3, [sp, #28]
 800a5e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ec:	4654      	mov	r4, sl
 800a5ee:	2205      	movs	r2, #5
 800a5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f4:	4851      	ldr	r0, [pc, #324]	; (800a73c <_svfiprintf_r+0x1ec>)
 800a5f6:	f7fd fe03 	bl	8008200 <memchr>
 800a5fa:	9a04      	ldr	r2, [sp, #16]
 800a5fc:	b9d8      	cbnz	r0, 800a636 <_svfiprintf_r+0xe6>
 800a5fe:	06d0      	lsls	r0, r2, #27
 800a600:	bf44      	itt	mi
 800a602:	2320      	movmi	r3, #32
 800a604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a608:	0711      	lsls	r1, r2, #28
 800a60a:	bf44      	itt	mi
 800a60c:	232b      	movmi	r3, #43	; 0x2b
 800a60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b2a      	cmp	r3, #42	; 0x2a
 800a618:	d015      	beq.n	800a646 <_svfiprintf_r+0xf6>
 800a61a:	9a07      	ldr	r2, [sp, #28]
 800a61c:	4654      	mov	r4, sl
 800a61e:	2000      	movs	r0, #0
 800a620:	f04f 0c0a 	mov.w	ip, #10
 800a624:	4621      	mov	r1, r4
 800a626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62a:	3b30      	subs	r3, #48	; 0x30
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	d94e      	bls.n	800a6ce <_svfiprintf_r+0x17e>
 800a630:	b1b0      	cbz	r0, 800a660 <_svfiprintf_r+0x110>
 800a632:	9207      	str	r2, [sp, #28]
 800a634:	e014      	b.n	800a660 <_svfiprintf_r+0x110>
 800a636:	eba0 0308 	sub.w	r3, r0, r8
 800a63a:	fa09 f303 	lsl.w	r3, r9, r3
 800a63e:	4313      	orrs	r3, r2
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	46a2      	mov	sl, r4
 800a644:	e7d2      	b.n	800a5ec <_svfiprintf_r+0x9c>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	1d19      	adds	r1, r3, #4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	9103      	str	r1, [sp, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	bfbb      	ittet	lt
 800a652:	425b      	neglt	r3, r3
 800a654:	f042 0202 	orrlt.w	r2, r2, #2
 800a658:	9307      	strge	r3, [sp, #28]
 800a65a:	9307      	strlt	r3, [sp, #28]
 800a65c:	bfb8      	it	lt
 800a65e:	9204      	strlt	r2, [sp, #16]
 800a660:	7823      	ldrb	r3, [r4, #0]
 800a662:	2b2e      	cmp	r3, #46	; 0x2e
 800a664:	d10c      	bne.n	800a680 <_svfiprintf_r+0x130>
 800a666:	7863      	ldrb	r3, [r4, #1]
 800a668:	2b2a      	cmp	r3, #42	; 0x2a
 800a66a:	d135      	bne.n	800a6d8 <_svfiprintf_r+0x188>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9203      	str	r2, [sp, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfb8      	it	lt
 800a678:	f04f 33ff 	movlt.w	r3, #4294967295
 800a67c:	3402      	adds	r4, #2
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a74c <_svfiprintf_r+0x1fc>
 800a684:	7821      	ldrb	r1, [r4, #0]
 800a686:	2203      	movs	r2, #3
 800a688:	4650      	mov	r0, sl
 800a68a:	f7fd fdb9 	bl	8008200 <memchr>
 800a68e:	b140      	cbz	r0, 800a6a2 <_svfiprintf_r+0x152>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	eba0 000a 	sub.w	r0, r0, sl
 800a696:	fa03 f000 	lsl.w	r0, r3, r0
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	4303      	orrs	r3, r0
 800a69e:	3401      	adds	r4, #1
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a6:	4826      	ldr	r0, [pc, #152]	; (800a740 <_svfiprintf_r+0x1f0>)
 800a6a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ac:	2206      	movs	r2, #6
 800a6ae:	f7fd fda7 	bl	8008200 <memchr>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d038      	beq.n	800a728 <_svfiprintf_r+0x1d8>
 800a6b6:	4b23      	ldr	r3, [pc, #140]	; (800a744 <_svfiprintf_r+0x1f4>)
 800a6b8:	bb1b      	cbnz	r3, 800a702 <_svfiprintf_r+0x1b2>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	3307      	adds	r3, #7
 800a6be:	f023 0307 	bic.w	r3, r3, #7
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c8:	4433      	add	r3, r6
 800a6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a6cc:	e767      	b.n	800a59e <_svfiprintf_r+0x4e>
 800a6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	e7a5      	b.n	800a624 <_svfiprintf_r+0xd4>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	3401      	adds	r4, #1
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	f04f 0c0a 	mov.w	ip, #10
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ea:	3a30      	subs	r2, #48	; 0x30
 800a6ec:	2a09      	cmp	r2, #9
 800a6ee:	d903      	bls.n	800a6f8 <_svfiprintf_r+0x1a8>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0c5      	beq.n	800a680 <_svfiprintf_r+0x130>
 800a6f4:	9105      	str	r1, [sp, #20]
 800a6f6:	e7c3      	b.n	800a680 <_svfiprintf_r+0x130>
 800a6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	2301      	movs	r3, #1
 800a700:	e7f0      	b.n	800a6e4 <_svfiprintf_r+0x194>
 800a702:	ab03      	add	r3, sp, #12
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	462a      	mov	r2, r5
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <_svfiprintf_r+0x1f8>)
 800a70a:	a904      	add	r1, sp, #16
 800a70c:	4638      	mov	r0, r7
 800a70e:	f3af 8000 	nop.w
 800a712:	1c42      	adds	r2, r0, #1
 800a714:	4606      	mov	r6, r0
 800a716:	d1d6      	bne.n	800a6c6 <_svfiprintf_r+0x176>
 800a718:	89ab      	ldrh	r3, [r5, #12]
 800a71a:	065b      	lsls	r3, r3, #25
 800a71c:	f53f af2c 	bmi.w	800a578 <_svfiprintf_r+0x28>
 800a720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a722:	b01d      	add	sp, #116	; 0x74
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	ab03      	add	r3, sp, #12
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	462a      	mov	r2, r5
 800a72e:	4b06      	ldr	r3, [pc, #24]	; (800a748 <_svfiprintf_r+0x1f8>)
 800a730:	a904      	add	r1, sp, #16
 800a732:	4638      	mov	r0, r7
 800a734:	f000 f87a 	bl	800a82c <_printf_i>
 800a738:	e7eb      	b.n	800a712 <_svfiprintf_r+0x1c2>
 800a73a:	bf00      	nop
 800a73c:	0800adc8 	.word	0x0800adc8
 800a740:	0800add2 	.word	0x0800add2
 800a744:	00000000 	.word	0x00000000
 800a748:	0800a499 	.word	0x0800a499
 800a74c:	0800adce 	.word	0x0800adce

0800a750 <_printf_common>:
 800a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a754:	4616      	mov	r6, r2
 800a756:	4699      	mov	r9, r3
 800a758:	688a      	ldr	r2, [r1, #8]
 800a75a:	690b      	ldr	r3, [r1, #16]
 800a75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a760:	4293      	cmp	r3, r2
 800a762:	bfb8      	it	lt
 800a764:	4613      	movlt	r3, r2
 800a766:	6033      	str	r3, [r6, #0]
 800a768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a76c:	4607      	mov	r7, r0
 800a76e:	460c      	mov	r4, r1
 800a770:	b10a      	cbz	r2, 800a776 <_printf_common+0x26>
 800a772:	3301      	adds	r3, #1
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	0699      	lsls	r1, r3, #26
 800a77a:	bf42      	ittt	mi
 800a77c:	6833      	ldrmi	r3, [r6, #0]
 800a77e:	3302      	addmi	r3, #2
 800a780:	6033      	strmi	r3, [r6, #0]
 800a782:	6825      	ldr	r5, [r4, #0]
 800a784:	f015 0506 	ands.w	r5, r5, #6
 800a788:	d106      	bne.n	800a798 <_printf_common+0x48>
 800a78a:	f104 0a19 	add.w	sl, r4, #25
 800a78e:	68e3      	ldr	r3, [r4, #12]
 800a790:	6832      	ldr	r2, [r6, #0]
 800a792:	1a9b      	subs	r3, r3, r2
 800a794:	42ab      	cmp	r3, r5
 800a796:	dc26      	bgt.n	800a7e6 <_printf_common+0x96>
 800a798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a79c:	1e13      	subs	r3, r2, #0
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	bf18      	it	ne
 800a7a2:	2301      	movne	r3, #1
 800a7a4:	0692      	lsls	r2, r2, #26
 800a7a6:	d42b      	bmi.n	800a800 <_printf_common+0xb0>
 800a7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	47c0      	blx	r8
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d01e      	beq.n	800a7f4 <_printf_common+0xa4>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	68e5      	ldr	r5, [r4, #12]
 800a7ba:	6832      	ldr	r2, [r6, #0]
 800a7bc:	f003 0306 	and.w	r3, r3, #6
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	bf08      	it	eq
 800a7c4:	1aad      	subeq	r5, r5, r2
 800a7c6:	68a3      	ldr	r3, [r4, #8]
 800a7c8:	6922      	ldr	r2, [r4, #16]
 800a7ca:	bf0c      	ite	eq
 800a7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7d0:	2500      	movne	r5, #0
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	bfc4      	itt	gt
 800a7d6:	1a9b      	subgt	r3, r3, r2
 800a7d8:	18ed      	addgt	r5, r5, r3
 800a7da:	2600      	movs	r6, #0
 800a7dc:	341a      	adds	r4, #26
 800a7de:	42b5      	cmp	r5, r6
 800a7e0:	d11a      	bne.n	800a818 <_printf_common+0xc8>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e008      	b.n	800a7f8 <_printf_common+0xa8>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4652      	mov	r2, sl
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	47c0      	blx	r8
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d103      	bne.n	800a7fc <_printf_common+0xac>
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	e7c6      	b.n	800a78e <_printf_common+0x3e>
 800a800:	18e1      	adds	r1, r4, r3
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	2030      	movs	r0, #48	; 0x30
 800a806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a80a:	4422      	add	r2, r4
 800a80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a814:	3302      	adds	r3, #2
 800a816:	e7c7      	b.n	800a7a8 <_printf_common+0x58>
 800a818:	2301      	movs	r3, #1
 800a81a:	4622      	mov	r2, r4
 800a81c:	4649      	mov	r1, r9
 800a81e:	4638      	mov	r0, r7
 800a820:	47c0      	blx	r8
 800a822:	3001      	adds	r0, #1
 800a824:	d0e6      	beq.n	800a7f4 <_printf_common+0xa4>
 800a826:	3601      	adds	r6, #1
 800a828:	e7d9      	b.n	800a7de <_printf_common+0x8e>
	...

0800a82c <_printf_i>:
 800a82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	7e0f      	ldrb	r7, [r1, #24]
 800a832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a834:	2f78      	cmp	r7, #120	; 0x78
 800a836:	4691      	mov	r9, r2
 800a838:	4680      	mov	r8, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	469a      	mov	sl, r3
 800a83e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a842:	d807      	bhi.n	800a854 <_printf_i+0x28>
 800a844:	2f62      	cmp	r7, #98	; 0x62
 800a846:	d80a      	bhi.n	800a85e <_printf_i+0x32>
 800a848:	2f00      	cmp	r7, #0
 800a84a:	f000 80d8 	beq.w	800a9fe <_printf_i+0x1d2>
 800a84e:	2f58      	cmp	r7, #88	; 0x58
 800a850:	f000 80a3 	beq.w	800a99a <_printf_i+0x16e>
 800a854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a85c:	e03a      	b.n	800a8d4 <_printf_i+0xa8>
 800a85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a862:	2b15      	cmp	r3, #21
 800a864:	d8f6      	bhi.n	800a854 <_printf_i+0x28>
 800a866:	a101      	add	r1, pc, #4	; (adr r1, 800a86c <_printf_i+0x40>)
 800a868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	0800a8d9 	.word	0x0800a8d9
 800a874:	0800a855 	.word	0x0800a855
 800a878:	0800a855 	.word	0x0800a855
 800a87c:	0800a855 	.word	0x0800a855
 800a880:	0800a855 	.word	0x0800a855
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800a855 	.word	0x0800a855
 800a88c:	0800a855 	.word	0x0800a855
 800a890:	0800a855 	.word	0x0800a855
 800a894:	0800a855 	.word	0x0800a855
 800a898:	0800a9e5 	.word	0x0800a9e5
 800a89c:	0800a909 	.word	0x0800a909
 800a8a0:	0800a9c7 	.word	0x0800a9c7
 800a8a4:	0800a855 	.word	0x0800a855
 800a8a8:	0800a855 	.word	0x0800a855
 800a8ac:	0800aa07 	.word	0x0800aa07
 800a8b0:	0800a855 	.word	0x0800a855
 800a8b4:	0800a909 	.word	0x0800a909
 800a8b8:	0800a855 	.word	0x0800a855
 800a8bc:	0800a855 	.word	0x0800a855
 800a8c0:	0800a9cf 	.word	0x0800a9cf
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	602a      	str	r2, [r5, #0]
 800a8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e0a3      	b.n	800aa20 <_printf_i+0x1f4>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	6829      	ldr	r1, [r5, #0]
 800a8dc:	0606      	lsls	r6, r0, #24
 800a8de:	f101 0304 	add.w	r3, r1, #4
 800a8e2:	d50a      	bpl.n	800a8fa <_printf_i+0xce>
 800a8e4:	680e      	ldr	r6, [r1, #0]
 800a8e6:	602b      	str	r3, [r5, #0]
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	da03      	bge.n	800a8f4 <_printf_i+0xc8>
 800a8ec:	232d      	movs	r3, #45	; 0x2d
 800a8ee:	4276      	negs	r6, r6
 800a8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f4:	485e      	ldr	r0, [pc, #376]	; (800aa70 <_printf_i+0x244>)
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	e019      	b.n	800a92e <_printf_i+0x102>
 800a8fa:	680e      	ldr	r6, [r1, #0]
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a902:	bf18      	it	ne
 800a904:	b236      	sxthne	r6, r6
 800a906:	e7ef      	b.n	800a8e8 <_printf_i+0xbc>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	6820      	ldr	r0, [r4, #0]
 800a90c:	1d19      	adds	r1, r3, #4
 800a90e:	6029      	str	r1, [r5, #0]
 800a910:	0601      	lsls	r1, r0, #24
 800a912:	d501      	bpl.n	800a918 <_printf_i+0xec>
 800a914:	681e      	ldr	r6, [r3, #0]
 800a916:	e002      	b.n	800a91e <_printf_i+0xf2>
 800a918:	0646      	lsls	r6, r0, #25
 800a91a:	d5fb      	bpl.n	800a914 <_printf_i+0xe8>
 800a91c:	881e      	ldrh	r6, [r3, #0]
 800a91e:	4854      	ldr	r0, [pc, #336]	; (800aa70 <_printf_i+0x244>)
 800a920:	2f6f      	cmp	r7, #111	; 0x6f
 800a922:	bf0c      	ite	eq
 800a924:	2308      	moveq	r3, #8
 800a926:	230a      	movne	r3, #10
 800a928:	2100      	movs	r1, #0
 800a92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a92e:	6865      	ldr	r5, [r4, #4]
 800a930:	60a5      	str	r5, [r4, #8]
 800a932:	2d00      	cmp	r5, #0
 800a934:	bfa2      	ittt	ge
 800a936:	6821      	ldrge	r1, [r4, #0]
 800a938:	f021 0104 	bicge.w	r1, r1, #4
 800a93c:	6021      	strge	r1, [r4, #0]
 800a93e:	b90e      	cbnz	r6, 800a944 <_printf_i+0x118>
 800a940:	2d00      	cmp	r5, #0
 800a942:	d04d      	beq.n	800a9e0 <_printf_i+0x1b4>
 800a944:	4615      	mov	r5, r2
 800a946:	fbb6 f1f3 	udiv	r1, r6, r3
 800a94a:	fb03 6711 	mls	r7, r3, r1, r6
 800a94e:	5dc7      	ldrb	r7, [r0, r7]
 800a950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a954:	4637      	mov	r7, r6
 800a956:	42bb      	cmp	r3, r7
 800a958:	460e      	mov	r6, r1
 800a95a:	d9f4      	bls.n	800a946 <_printf_i+0x11a>
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d10b      	bne.n	800a978 <_printf_i+0x14c>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	07de      	lsls	r6, r3, #31
 800a964:	d508      	bpl.n	800a978 <_printf_i+0x14c>
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	6861      	ldr	r1, [r4, #4]
 800a96a:	4299      	cmp	r1, r3
 800a96c:	bfde      	ittt	le
 800a96e:	2330      	movle	r3, #48	; 0x30
 800a970:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a974:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a978:	1b52      	subs	r2, r2, r5
 800a97a:	6122      	str	r2, [r4, #16]
 800a97c:	f8cd a000 	str.w	sl, [sp]
 800a980:	464b      	mov	r3, r9
 800a982:	aa03      	add	r2, sp, #12
 800a984:	4621      	mov	r1, r4
 800a986:	4640      	mov	r0, r8
 800a988:	f7ff fee2 	bl	800a750 <_printf_common>
 800a98c:	3001      	adds	r0, #1
 800a98e:	d14c      	bne.n	800aa2a <_printf_i+0x1fe>
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	b004      	add	sp, #16
 800a996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99a:	4835      	ldr	r0, [pc, #212]	; (800aa70 <_printf_i+0x244>)
 800a99c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9a0:	6829      	ldr	r1, [r5, #0]
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9a8:	6029      	str	r1, [r5, #0]
 800a9aa:	061d      	lsls	r5, r3, #24
 800a9ac:	d514      	bpl.n	800a9d8 <_printf_i+0x1ac>
 800a9ae:	07df      	lsls	r7, r3, #31
 800a9b0:	bf44      	itt	mi
 800a9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a9b6:	6023      	strmi	r3, [r4, #0]
 800a9b8:	b91e      	cbnz	r6, 800a9c2 <_printf_i+0x196>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	f023 0320 	bic.w	r3, r3, #32
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	2310      	movs	r3, #16
 800a9c4:	e7b0      	b.n	800a928 <_printf_i+0xfc>
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	f043 0320 	orr.w	r3, r3, #32
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	2378      	movs	r3, #120	; 0x78
 800a9d0:	4828      	ldr	r0, [pc, #160]	; (800aa74 <_printf_i+0x248>)
 800a9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9d6:	e7e3      	b.n	800a9a0 <_printf_i+0x174>
 800a9d8:	0659      	lsls	r1, r3, #25
 800a9da:	bf48      	it	mi
 800a9dc:	b2b6      	uxthmi	r6, r6
 800a9de:	e7e6      	b.n	800a9ae <_printf_i+0x182>
 800a9e0:	4615      	mov	r5, r2
 800a9e2:	e7bb      	b.n	800a95c <_printf_i+0x130>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	6826      	ldr	r6, [r4, #0]
 800a9e8:	6961      	ldr	r1, [r4, #20]
 800a9ea:	1d18      	adds	r0, r3, #4
 800a9ec:	6028      	str	r0, [r5, #0]
 800a9ee:	0635      	lsls	r5, r6, #24
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	d501      	bpl.n	800a9f8 <_printf_i+0x1cc>
 800a9f4:	6019      	str	r1, [r3, #0]
 800a9f6:	e002      	b.n	800a9fe <_printf_i+0x1d2>
 800a9f8:	0670      	lsls	r0, r6, #25
 800a9fa:	d5fb      	bpl.n	800a9f4 <_printf_i+0x1c8>
 800a9fc:	8019      	strh	r1, [r3, #0]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	6123      	str	r3, [r4, #16]
 800aa02:	4615      	mov	r5, r2
 800aa04:	e7ba      	b.n	800a97c <_printf_i+0x150>
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	602a      	str	r2, [r5, #0]
 800aa0c:	681d      	ldr	r5, [r3, #0]
 800aa0e:	6862      	ldr	r2, [r4, #4]
 800aa10:	2100      	movs	r1, #0
 800aa12:	4628      	mov	r0, r5
 800aa14:	f7fd fbf4 	bl	8008200 <memchr>
 800aa18:	b108      	cbz	r0, 800aa1e <_printf_i+0x1f2>
 800aa1a:	1b40      	subs	r0, r0, r5
 800aa1c:	6060      	str	r0, [r4, #4]
 800aa1e:	6863      	ldr	r3, [r4, #4]
 800aa20:	6123      	str	r3, [r4, #16]
 800aa22:	2300      	movs	r3, #0
 800aa24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa28:	e7a8      	b.n	800a97c <_printf_i+0x150>
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	462a      	mov	r2, r5
 800aa2e:	4649      	mov	r1, r9
 800aa30:	4640      	mov	r0, r8
 800aa32:	47d0      	blx	sl
 800aa34:	3001      	adds	r0, #1
 800aa36:	d0ab      	beq.n	800a990 <_printf_i+0x164>
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	079b      	lsls	r3, r3, #30
 800aa3c:	d413      	bmi.n	800aa66 <_printf_i+0x23a>
 800aa3e:	68e0      	ldr	r0, [r4, #12]
 800aa40:	9b03      	ldr	r3, [sp, #12]
 800aa42:	4298      	cmp	r0, r3
 800aa44:	bfb8      	it	lt
 800aa46:	4618      	movlt	r0, r3
 800aa48:	e7a4      	b.n	800a994 <_printf_i+0x168>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	4649      	mov	r1, r9
 800aa50:	4640      	mov	r0, r8
 800aa52:	47d0      	blx	sl
 800aa54:	3001      	adds	r0, #1
 800aa56:	d09b      	beq.n	800a990 <_printf_i+0x164>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	68e3      	ldr	r3, [r4, #12]
 800aa5c:	9903      	ldr	r1, [sp, #12]
 800aa5e:	1a5b      	subs	r3, r3, r1
 800aa60:	42ab      	cmp	r3, r5
 800aa62:	dcf2      	bgt.n	800aa4a <_printf_i+0x21e>
 800aa64:	e7eb      	b.n	800aa3e <_printf_i+0x212>
 800aa66:	2500      	movs	r5, #0
 800aa68:	f104 0619 	add.w	r6, r4, #25
 800aa6c:	e7f5      	b.n	800aa5a <_printf_i+0x22e>
 800aa6e:	bf00      	nop
 800aa70:	0800add9 	.word	0x0800add9
 800aa74:	0800adea 	.word	0x0800adea

0800aa78 <memcpy>:
 800aa78:	440a      	add	r2, r1
 800aa7a:	4291      	cmp	r1, r2
 800aa7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa80:	d100      	bne.n	800aa84 <memcpy+0xc>
 800aa82:	4770      	bx	lr
 800aa84:	b510      	push	{r4, lr}
 800aa86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa8e:	4291      	cmp	r1, r2
 800aa90:	d1f9      	bne.n	800aa86 <memcpy+0xe>
 800aa92:	bd10      	pop	{r4, pc}

0800aa94 <memmove>:
 800aa94:	4288      	cmp	r0, r1
 800aa96:	b510      	push	{r4, lr}
 800aa98:	eb01 0402 	add.w	r4, r1, r2
 800aa9c:	d902      	bls.n	800aaa4 <memmove+0x10>
 800aa9e:	4284      	cmp	r4, r0
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	d807      	bhi.n	800aab4 <memmove+0x20>
 800aaa4:	1e43      	subs	r3, r0, #1
 800aaa6:	42a1      	cmp	r1, r4
 800aaa8:	d008      	beq.n	800aabc <memmove+0x28>
 800aaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aab2:	e7f8      	b.n	800aaa6 <memmove+0x12>
 800aab4:	4402      	add	r2, r0
 800aab6:	4601      	mov	r1, r0
 800aab8:	428a      	cmp	r2, r1
 800aaba:	d100      	bne.n	800aabe <memmove+0x2a>
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac6:	e7f7      	b.n	800aab8 <memmove+0x24>

0800aac8 <_free_r>:
 800aac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d044      	beq.n	800ab58 <_free_r+0x90>
 800aace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad2:	9001      	str	r0, [sp, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f1a1 0404 	sub.w	r4, r1, #4
 800aada:	bfb8      	it	lt
 800aadc:	18e4      	addlt	r4, r4, r3
 800aade:	f000 f913 	bl	800ad08 <__malloc_lock>
 800aae2:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <_free_r+0x94>)
 800aae4:	9801      	ldr	r0, [sp, #4]
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	b933      	cbnz	r3, 800aaf8 <_free_r+0x30>
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	6014      	str	r4, [r2, #0]
 800aaee:	b003      	add	sp, #12
 800aaf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf4:	f000 b90e 	b.w	800ad14 <__malloc_unlock>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d908      	bls.n	800ab0e <_free_r+0x46>
 800aafc:	6825      	ldr	r5, [r4, #0]
 800aafe:	1961      	adds	r1, r4, r5
 800ab00:	428b      	cmp	r3, r1
 800ab02:	bf01      	itttt	eq
 800ab04:	6819      	ldreq	r1, [r3, #0]
 800ab06:	685b      	ldreq	r3, [r3, #4]
 800ab08:	1949      	addeq	r1, r1, r5
 800ab0a:	6021      	streq	r1, [r4, #0]
 800ab0c:	e7ed      	b.n	800aaea <_free_r+0x22>
 800ab0e:	461a      	mov	r2, r3
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	b10b      	cbz	r3, 800ab18 <_free_r+0x50>
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d9fa      	bls.n	800ab0e <_free_r+0x46>
 800ab18:	6811      	ldr	r1, [r2, #0]
 800ab1a:	1855      	adds	r5, r2, r1
 800ab1c:	42a5      	cmp	r5, r4
 800ab1e:	d10b      	bne.n	800ab38 <_free_r+0x70>
 800ab20:	6824      	ldr	r4, [r4, #0]
 800ab22:	4421      	add	r1, r4
 800ab24:	1854      	adds	r4, r2, r1
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	6011      	str	r1, [r2, #0]
 800ab2a:	d1e0      	bne.n	800aaee <_free_r+0x26>
 800ab2c:	681c      	ldr	r4, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	6053      	str	r3, [r2, #4]
 800ab32:	4421      	add	r1, r4
 800ab34:	6011      	str	r1, [r2, #0]
 800ab36:	e7da      	b.n	800aaee <_free_r+0x26>
 800ab38:	d902      	bls.n	800ab40 <_free_r+0x78>
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	e7d6      	b.n	800aaee <_free_r+0x26>
 800ab40:	6825      	ldr	r5, [r4, #0]
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf04      	itt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	bf04      	itt	eq
 800ab50:	1949      	addeq	r1, r1, r5
 800ab52:	6021      	streq	r1, [r4, #0]
 800ab54:	6054      	str	r4, [r2, #4]
 800ab56:	e7ca      	b.n	800aaee <_free_r+0x26>
 800ab58:	b003      	add	sp, #12
 800ab5a:	bd30      	pop	{r4, r5, pc}
 800ab5c:	2000011c 	.word	0x2000011c

0800ab60 <sbrk_aligned>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	4e0e      	ldr	r6, [pc, #56]	; (800ab9c <sbrk_aligned+0x3c>)
 800ab64:	460c      	mov	r4, r1
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	4605      	mov	r5, r0
 800ab6a:	b911      	cbnz	r1, 800ab72 <sbrk_aligned+0x12>
 800ab6c:	f000 f8bc 	bl	800ace8 <_sbrk_r>
 800ab70:	6030      	str	r0, [r6, #0]
 800ab72:	4621      	mov	r1, r4
 800ab74:	4628      	mov	r0, r5
 800ab76:	f000 f8b7 	bl	800ace8 <_sbrk_r>
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	d00a      	beq.n	800ab94 <sbrk_aligned+0x34>
 800ab7e:	1cc4      	adds	r4, r0, #3
 800ab80:	f024 0403 	bic.w	r4, r4, #3
 800ab84:	42a0      	cmp	r0, r4
 800ab86:	d007      	beq.n	800ab98 <sbrk_aligned+0x38>
 800ab88:	1a21      	subs	r1, r4, r0
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 f8ac 	bl	800ace8 <_sbrk_r>
 800ab90:	3001      	adds	r0, #1
 800ab92:	d101      	bne.n	800ab98 <sbrk_aligned+0x38>
 800ab94:	f04f 34ff 	mov.w	r4, #4294967295
 800ab98:	4620      	mov	r0, r4
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	20000120 	.word	0x20000120

0800aba0 <_malloc_r>:
 800aba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba4:	1ccd      	adds	r5, r1, #3
 800aba6:	f025 0503 	bic.w	r5, r5, #3
 800abaa:	3508      	adds	r5, #8
 800abac:	2d0c      	cmp	r5, #12
 800abae:	bf38      	it	cc
 800abb0:	250c      	movcc	r5, #12
 800abb2:	2d00      	cmp	r5, #0
 800abb4:	4607      	mov	r7, r0
 800abb6:	db01      	blt.n	800abbc <_malloc_r+0x1c>
 800abb8:	42a9      	cmp	r1, r5
 800abba:	d905      	bls.n	800abc8 <_malloc_r+0x28>
 800abbc:	230c      	movs	r3, #12
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	2600      	movs	r6, #0
 800abc2:	4630      	mov	r0, r6
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	4e2e      	ldr	r6, [pc, #184]	; (800ac84 <_malloc_r+0xe4>)
 800abca:	f000 f89d 	bl	800ad08 <__malloc_lock>
 800abce:	6833      	ldr	r3, [r6, #0]
 800abd0:	461c      	mov	r4, r3
 800abd2:	bb34      	cbnz	r4, 800ac22 <_malloc_r+0x82>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4638      	mov	r0, r7
 800abd8:	f7ff ffc2 	bl	800ab60 <sbrk_aligned>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	4604      	mov	r4, r0
 800abe0:	d14d      	bne.n	800ac7e <_malloc_r+0xde>
 800abe2:	6834      	ldr	r4, [r6, #0]
 800abe4:	4626      	mov	r6, r4
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	d140      	bne.n	800ac6c <_malloc_r+0xcc>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	4631      	mov	r1, r6
 800abee:	4638      	mov	r0, r7
 800abf0:	eb04 0803 	add.w	r8, r4, r3
 800abf4:	f000 f878 	bl	800ace8 <_sbrk_r>
 800abf8:	4580      	cmp	r8, r0
 800abfa:	d13a      	bne.n	800ac72 <_malloc_r+0xd2>
 800abfc:	6821      	ldr	r1, [r4, #0]
 800abfe:	3503      	adds	r5, #3
 800ac00:	1a6d      	subs	r5, r5, r1
 800ac02:	f025 0503 	bic.w	r5, r5, #3
 800ac06:	3508      	adds	r5, #8
 800ac08:	2d0c      	cmp	r5, #12
 800ac0a:	bf38      	it	cc
 800ac0c:	250c      	movcc	r5, #12
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff ffa5 	bl	800ab60 <sbrk_aligned>
 800ac16:	3001      	adds	r0, #1
 800ac18:	d02b      	beq.n	800ac72 <_malloc_r+0xd2>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	442b      	add	r3, r5
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	e00e      	b.n	800ac40 <_malloc_r+0xa0>
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	d41e      	bmi.n	800ac66 <_malloc_r+0xc6>
 800ac28:	2a0b      	cmp	r2, #11
 800ac2a:	d916      	bls.n	800ac5a <_malloc_r+0xba>
 800ac2c:	1961      	adds	r1, r4, r5
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	6025      	str	r5, [r4, #0]
 800ac32:	bf18      	it	ne
 800ac34:	6059      	strne	r1, [r3, #4]
 800ac36:	6863      	ldr	r3, [r4, #4]
 800ac38:	bf08      	it	eq
 800ac3a:	6031      	streq	r1, [r6, #0]
 800ac3c:	5162      	str	r2, [r4, r5]
 800ac3e:	604b      	str	r3, [r1, #4]
 800ac40:	4638      	mov	r0, r7
 800ac42:	f104 060b 	add.w	r6, r4, #11
 800ac46:	f000 f865 	bl	800ad14 <__malloc_unlock>
 800ac4a:	f026 0607 	bic.w	r6, r6, #7
 800ac4e:	1d23      	adds	r3, r4, #4
 800ac50:	1af2      	subs	r2, r6, r3
 800ac52:	d0b6      	beq.n	800abc2 <_malloc_r+0x22>
 800ac54:	1b9b      	subs	r3, r3, r6
 800ac56:	50a3      	str	r3, [r4, r2]
 800ac58:	e7b3      	b.n	800abc2 <_malloc_r+0x22>
 800ac5a:	6862      	ldr	r2, [r4, #4]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	bf0c      	ite	eq
 800ac60:	6032      	streq	r2, [r6, #0]
 800ac62:	605a      	strne	r2, [r3, #4]
 800ac64:	e7ec      	b.n	800ac40 <_malloc_r+0xa0>
 800ac66:	4623      	mov	r3, r4
 800ac68:	6864      	ldr	r4, [r4, #4]
 800ac6a:	e7b2      	b.n	800abd2 <_malloc_r+0x32>
 800ac6c:	4634      	mov	r4, r6
 800ac6e:	6876      	ldr	r6, [r6, #4]
 800ac70:	e7b9      	b.n	800abe6 <_malloc_r+0x46>
 800ac72:	230c      	movs	r3, #12
 800ac74:	603b      	str	r3, [r7, #0]
 800ac76:	4638      	mov	r0, r7
 800ac78:	f000 f84c 	bl	800ad14 <__malloc_unlock>
 800ac7c:	e7a1      	b.n	800abc2 <_malloc_r+0x22>
 800ac7e:	6025      	str	r5, [r4, #0]
 800ac80:	e7de      	b.n	800ac40 <_malloc_r+0xa0>
 800ac82:	bf00      	nop
 800ac84:	2000011c 	.word	0x2000011c

0800ac88 <_realloc_r>:
 800ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	4614      	mov	r4, r2
 800ac90:	460e      	mov	r6, r1
 800ac92:	b921      	cbnz	r1, 800ac9e <_realloc_r+0x16>
 800ac94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	4611      	mov	r1, r2
 800ac9a:	f7ff bf81 	b.w	800aba0 <_malloc_r>
 800ac9e:	b92a      	cbnz	r2, 800acac <_realloc_r+0x24>
 800aca0:	f7ff ff12 	bl	800aac8 <_free_r>
 800aca4:	4625      	mov	r5, r4
 800aca6:	4628      	mov	r0, r5
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	f000 f838 	bl	800ad20 <_malloc_usable_size_r>
 800acb0:	4284      	cmp	r4, r0
 800acb2:	4607      	mov	r7, r0
 800acb4:	d802      	bhi.n	800acbc <_realloc_r+0x34>
 800acb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acba:	d812      	bhi.n	800ace2 <_realloc_r+0x5a>
 800acbc:	4621      	mov	r1, r4
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff ff6e 	bl	800aba0 <_malloc_r>
 800acc4:	4605      	mov	r5, r0
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d0ed      	beq.n	800aca6 <_realloc_r+0x1e>
 800acca:	42bc      	cmp	r4, r7
 800accc:	4622      	mov	r2, r4
 800acce:	4631      	mov	r1, r6
 800acd0:	bf28      	it	cs
 800acd2:	463a      	movcs	r2, r7
 800acd4:	f7ff fed0 	bl	800aa78 <memcpy>
 800acd8:	4631      	mov	r1, r6
 800acda:	4640      	mov	r0, r8
 800acdc:	f7ff fef4 	bl	800aac8 <_free_r>
 800ace0:	e7e1      	b.n	800aca6 <_realloc_r+0x1e>
 800ace2:	4635      	mov	r5, r6
 800ace4:	e7df      	b.n	800aca6 <_realloc_r+0x1e>
	...

0800ace8 <_sbrk_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d06      	ldr	r5, [pc, #24]	; (800ad04 <_sbrk_r+0x1c>)
 800acec:	2300      	movs	r3, #0
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	602b      	str	r3, [r5, #0]
 800acf4:	f7fd feb2 	bl	8008a5c <_sbrk>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_sbrk_r+0x1a>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_sbrk_r+0x1a>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	20000124 	.word	0x20000124

0800ad08 <__malloc_lock>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__malloc_lock+0x8>)
 800ad0a:	f000 b811 	b.w	800ad30 <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20000128 	.word	0x20000128

0800ad14 <__malloc_unlock>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__malloc_unlock+0x8>)
 800ad16:	f000 b80c 	b.w	800ad32 <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20000128 	.word	0x20000128

0800ad20 <_malloc_usable_size_r>:
 800ad20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad24:	1f18      	subs	r0, r3, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfbc      	itt	lt
 800ad2a:	580b      	ldrlt	r3, [r1, r0]
 800ad2c:	18c0      	addlt	r0, r0, r3
 800ad2e:	4770      	bx	lr

0800ad30 <__retarget_lock_acquire_recursive>:
 800ad30:	4770      	bx	lr

0800ad32 <__retarget_lock_release_recursive>:
 800ad32:	4770      	bx	lr

0800ad34 <_init>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr

0800ad40 <_fini>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	bf00      	nop
 800ad44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad46:	bc08      	pop	{r3}
 800ad48:	469e      	mov	lr, r3
 800ad4a:	4770      	bx	lr
